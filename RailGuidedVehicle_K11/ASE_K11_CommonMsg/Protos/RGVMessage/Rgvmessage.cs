// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rgvmessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.mirle.AKA.ProtocolFormat.RGVMessage {

  /// <summary>Holder for reflection information generated from rgvmessage.proto</summary>
  public static partial class RgvmessageReflection {

    #region Descriptor
    /// <summary>File descriptor for rgvmessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RgvmessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChByZ3ZtZXNzYWdlLnByb3RvEgh0dXRvcmlhbCIrCglUaW1lc3RhbXASDwoH",
            "c2Vjb25kcxgBIAEoAxINCgVuYW5vcxgCIAEoBSLoAgogSURfMV9IT1NUX0JB",
            "U0lDX0lORk9fVkVSU0lPTl9SRVASGQoRRGF0YURhdGVUaW1lX1llYXIYASAB",
            "KAkSGgoSRGF0YURhdGVUaW1lX01vbnRoGAIgASgJEhgKEERhdGFEYXRlVGlt",
            "ZV9EYXkYAyABKAkSGQoRRGF0YURhdGVUaW1lX0hvdXIYBCABKAkSGwoTRGF0",
            "YURhdGVUaW1lX01pbnV0ZRgFIAEoCRIbChNEYXRhRGF0ZVRpbWVfU2Vjb25k",
            "GAYgASgJEhgKEEN1cnJlbnRUaW1lX1llYXIYByABKAkSGQoRQ3VycmVudFRp",
            "bWVfTW9udGgYCCABKAkSFwoPQ3VycmVudFRpbWVfRGF5GAkgASgJEhgKEEN1",
            "cnJlbnRUaW1lX0hvdXIYCiABKAkSGgoSQ3VycmVudFRpbWVfTWludXRlGAsg",
            "ASgJEhoKEkN1cnJlbnRUaW1lX1NlY29uZBgMIAEoCSI8CidJRF8xMDFfSE9T",
            "VF9CQVNJQ19JTkZPX1ZFUlNJT05fUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEg",
            "ASgFIt0BCh1JRF8xMDJfQkFTSUNfSU5GT19WRVJTSU9OX1JFUBIdChVCYXNp",
            "Y0luZm9WZXJzaW9uX1llYXIYASABKAkSHgoWQmFzaWNJbmZvVmVyc2lvbl9N",
            "b250aBgCIAEoCRIcChRCYXNpY0luZm9WZXJzaW9uX0RheRgDIAEoCRIdChVC",
            "YXNpY0luZm9WZXJzaW9uX0hvdXIYBCABKAkSHwoXQmFzaWNJbmZvVmVyc2lv",
            "bl9NaW51dGUYBSABKAkSHwoXQmFzaWNJbmZvVmVyc2lvbl9TZWNvbmQYBiAB",
            "KAkiNQogSURfMl9CQVNJQ19JTkZPX1ZFUlNJT05fUkVTUE9OU0USEQoJUmVw",
            "bHlDb2RlGAEgASgFIpQBChhJRF8xMDZfSU5JVElBTF9FVkVOVF9SRVASKwoI",
            "SGFzQm94X0wYASABKA4yGS50dXRvcmlhbC5WaExvYWRDU1RTdGF0dXMSDgoG",
            "Qm94SWRMGAIgASgJEisKCEhhc0JveF9SGAMgASgOMhkudHV0b3JpYWwuVmhM",
            "b2FkQ1NUU3RhdHVzEg4KBkJveElkUhgEIAEoCSJeChtJRF82X0lOSVRJQUxf",
            "RVZFTlRfUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgFEhUKDVJlbmFtZUJP",
            "WElEX0wYAiABKAkSFQoNUmVuYW1lQk9YSURfUhgDIAEoCSKxAQoUSURfMTFf",
            "QkFTSUNfSU5GT19SRVASHAoUVHJhdmVsQmFzaWNEYXRhQ291bnQYASABKAUS",
            "GAoQU2VjdGlvbkRhdGFDb3VudBgCIAEoBRIYChBBZGRyZXNzRGF0YUNvdW50",
            "GAMgASgFEhYKDlNjYWxlRGF0YUNvdW50GAQgASgFEhcKD0NvbnRybERhdGFD",
            "b3VudBgFIAEoBRIWCg5HdWlkZURhdGFDb3VudBgGIAEoBSIvChpJRF8xMTFf",
            "QkFTSUNfSU5GT19SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUi4wIKGElE",
            "XzEzX1RBVkVMTElOR19EQVRBX1JFUBISCgpSZXNvbHV0aW9uGAEgASgNEhQK",
            "DFN0YXJ0U3RvcFNwZBgCIAEoDRIQCghNYXhTcGVlZBgDIAEoDRIRCglBY2Nl",
            "bFRpbWUYBCABKA0SEgoKU0N1cnZlUmF0ZRgFIAEoBRIRCglPcmlnaW5EaXIY",
            "BiABKAUSEQoJT3JpZ2luU3BkGAcgASgNEhAKCEJlYWVtU3BkGAggASgNEhIK",
            "Ck1hbnVhbEhTcGQYCSABKA0SEgoKTWFudWFsTFNwZBgKIAEoDRITCgtUZWFj",
            "aGluZ1NwZBgLIAEoDRIRCglSb3RhdGVEaXIYDCABKAUSEwoLRW5jb2RlclBv",
            "bGUYDSABKAUSHAoUUG9zaXRpb25Db21wZW5zYXRpb24YDiABKA0SEwoLS2Vl",
            "cERpc3RGYXIYDyABKA0SFAoMS2VlcERpc3ROZWFyGBAgASgNIjMKHklEXzEx",
            "M19UQVZFTExJTkdfREFUQV9SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUi",
            "rQMKFklEXzE1X1NFQ1RJT05fREFUQV9SRVASOgoIU2VjdGlvbnMYASADKAsy",
            "KC50dXRvcmlhbC5JRF8xNV9TRUNUSU9OX0RBVEFfUkVQLlNlY3Rpb24a1gIK",
            "B1NlY3Rpb24SEAoIRHJpdmVEaXIYASABKAUSEgoKQWVyYVNlY3NvchgCIAEo",
            "BRIQCghHdWlkZURpchgDIAEoBRIRCglTZWN0aW9uSUQYBCABKAkSEAoIRnJv",
            "bUFkZHIYBSABKAkSDgoGVG9BZGRyGAYgASgJEhQKDENvbnRyb2xUYWJsZRgH",
            "IAEoBRINCgVTcGVlZBgJIAEoDRIQCghEaXN0YW5jZRgKIAEoDRIZChFDaGFu",
            "Z2VBcmVhU2Vuc29yMRgLIAEoBRIXCg9DaGFuZ2VHdWlkZURpcjEYDCABKAUS",
            "FQoNQ2hhbmdlU2VnTnVtMRgNIAEoCRIZChFDaGFuZ2VBcmVhU2Vuc29yMhgO",
            "IAEoBRIXCg9DaGFuZ2VHdWlkZURpcjIYDyABKAUSFQoNQ2hhbmdlU2VnTnVt",
            "MhgQIAEoCRIRCglBdFNlZ21lbnQYESABKAkiMQocSURfMTE1X1NFQ1RJT05f",
            "REFUQV9SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUivQEKFklEXzE3X0FE",
            "RFJFU1NfREFUQV9SRVASOgoIQWRkcmVzc3MYASADKAsyKC50dXRvcmlhbC5J",
            "RF8xN19BRERSRVNTX0RBVEFfUkVQLkFkZHJlc3MaZwoHQWRkcmVzcxIMCgRB",
            "ZGRyGAEgASgJEhIKClJlc29sdXRpb24YAiABKAUSEAoITG9hY3Rpb24YAyAB",
            "KAUSFAoMQmxvY2tSZWxlYXNlGAQgASgFEhIKCkhJRFJlbGVhc2UYBSABKAUi",
            "MQocSURfMTE3X0FERFJFU1NfREFUQV9SRVNQT05TRRIRCglSZXBseUNvZGUY",
            "ASABKAUiowEKFElEXzE5X1NDQUxFX0RBVEFfUkVQEhIKClJlc29sdXRpb24Y",
            "ASABKA0SEQoJSW5wb3NBcmVhGAIgASgNEhYKDklucG9zU3RhYmlsaXR5GAMg",
            "ASgNEhIKClNjYWxlUHVsc2UYBCABKA0SEwoLU2NhbGVPZmZzZXQYBSABKA0S",
            "EgoKU2NhbGVSZXNldBgGIAEoDRIPCgdSZWFkRGlyGAcgASgFIi8KGklEXzEx",
            "OV9TQ0FMRV9EQVRBX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSLGAQoW",
            "SURfMjFfQ09OVFJPTF9EQVRBX1JFUBIRCglUaW1lb3V0VDEYASABKA0SEQoJ",
            "VGltZW91dFQyGAIgASgNEhEKCVRpbWVvdXRUMxgDIAEoDRIRCglUaW1lb3V0",
            "VDQYBCABKA0SEQoJVGltZW91dFQ1GAUgASgNEhEKCVRpbWVvdXRUNhgGIAEo",
            "DRIRCglUaW1lb3V0VDcYByABKA0SEQoJVGltZW91dFQ4GAggASgNEhQKDFRp",
            "bWVvdXRCbG9jaxgJIAEoDSIxChxJRF8xMjFfQ09OVFJPTF9EQVRBX1JFU1BP",
            "TlNFEhEKCVJlcGx5Q29kZRgBIAEoBSKJAgoUSURfMjNfR1VJREVfREFUQV9S",
            "RVASFAoMU3RhcnRTdG9wU3BkGAEgASgNEhAKCE1heFNwZWVkGAIgASgNEhEK",
            "CUFjY2VsVGltZRgDIAEoDRISCgpTQ3VydmVSYXRlGAQgASgFEhEKCU5vcm1h",
            "bFNwZBgFIAEoDRISCgpNYW51YWxIU3BkGAYgASgNEhIKCk1hbnVhbExTcGQY",
            "ByABKA0SEQoJTEZMb2NrUG9zGAggASgNEhEKCUxCTG9ja1BvcxgJIAEoDRIR",
            "CglSRkxvY2tQb3MYCiABKA0SEQoJUkJMb2NrUG9zGAsgASgNEhsKE0NoYW5n",
            "ZVN0YWJpbGl0eVRpbWUYDCABKA0iLwoaSURfMTIzX0dVSURFX0RBVEFfUkVT",
            "UE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIh0KG0lEXzYxX0lORElWSURVQUxf",
            "VVBMT0FEX1JFUSJ/CiFJRF8xNjFfSU5ESVZJRFVBTF9VUExPQURfUkVTUE9O",
            "U0USFQoNT2Zmc2V0R3VpZGVGTBgBIAEoDRIVCg1PZmZzZXRHdWlkZVJMGAIg",
            "ASgNEhUKDU9mZnNldEd1aWRlRlIYAyABKA0SFQoNT2Zmc2V0R3VpZGVSUhgE",
            "IAEoDSJ6ChxJRF8xNjJfR1VJREVfREFUQV9VUExPQURfUkVQEhUKDU9mZnNl",
            "dEd1aWRlRkwYASABKA0SFQoNT2Zmc2V0R3VpZGVSTBgCIAEoDRIVCg1PZmZz",
            "ZXRHdWlkZUZSGAMgASgNEhUKDU9mZnNldEd1aWRlUlIYBCABKA0iNAofSURf",
            "NjJfR1VJRF9EQVRBX1VQTE9BRF9SRVNQT05TRRIRCglSZXBseUNvZGUYASAB",
            "KAUieQobSURfNjNfSU5ESVZJRFVBTF9DSEFOR0VfUkVREhUKDU9mZnNldEd1",
            "aWRlRkwYASABKA0SFQoNT2Zmc2V0R3VpZGVSTBgCIAEoDRIVCg1PZmZzZXRH",
            "dWlkZUZSGAMgASgNEhUKDU9mZnNldEd1aWRlUlIYBCABKA0iNgohSURfMTYz",
            "X0lORElWSURVQUxfQ0hBTkdFX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEo",
            "BSLeAgoTSURfMzFfVFJBTlNfUkVRVUVTVBIOCgZDbWRfSUQYASABKAkSJQoH",
            "QWN0VHlwZRgCIAEoDjIULnR1dG9yaWFsLkFjdGl2ZVR5cGUSDwoHTG9hZEFk",
            "chgDIAEoCRINCgVUb0FkchgEIAEoCRISCgpMb2FkUG9ydElEGAUgASgJEhQK",
            "DFVubG9hZFBvcnRJRBgGIAEoCRIUCgxTZWNfRGlzdGFuY2UYByABKA0SDgoG",
            "Qk9YX0lEGAggASgJEg4KBkxPVF9JRBgKIAEoCRIiChpHdWlkZV9TZWN0aW9u",
            "c19TdGFydFRvTG9hZBgLIAMoCRIhChlHdWlkZV9BZGRyZXNzX1N0YXJ0VG9M",
            "b2FkGAwgAygJEiQKHEd1aWRlX1NlY3Rpb25zX1RvRGVzdGluYXRpb24YDSAD",
            "KAkSIwobR3VpZGVfQWRkcmVzc19Ub0Rlc3RpbmF0aW9uGA4gAygJInMKFUlE",
            "XzEzMV9UUkFOU19SRVNQT05TRRIOCgZDbWRfSUQYASABKAkSJQoHQWN0VHlw",
            "ZRgCIAEoDjIULnR1dG9yaWFsLkFjdGl2ZVR5cGUSEQoJUmVwbHlDb2RlGAMg",
            "ASgFEhAKCE5nUmVhc29uGAQgASgJIqACChxJRF8xMzJfVFJBTlNfQ09NUExF",
            "VEVfUkVQT1JUEg4KBkNtZF9JRBgBIAEoCRIOCgZCT1hfSUQYAiABKAkSDgoG",
            "Q1NUX0lEGAMgASgJEg4KBkxPVF9JRBgEIAEoCRIrCglDbXBTdGF0dXMYBSAB",
            "KA4yGC50dXRvcmlhbC5Db21wbGV0ZVN0YXR1cxIUCgxDdXJyZW50QWRySUQY",
            "BiABKAkSFAoMQ3VycmVudFNlY0lEGAcgASgJEhQKDFNlY19EaXN0YW5jZRgI",
            "IAEoDRIUCgxDbWRfRGlzdGFuY2UYCSABKAUSKQoGSGFzQm94GAogASgOMhku",
            "dHV0b3JpYWwuVmhMb2FkQ1NUU3RhdHVzEhAKCENhckJveElEGAsgASgJIjIK",
            "HUlEXzMyX1RSQU5TX0NPTVBMRVRFX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgB",
            "IAEoBSJsCilJRF8zM19DT05UUk9MX1pPTkVfUkVQVUVTVF9DQU5DRUxfUkVR",
            "VUVTVBIqCgtDb250cm9sVHlwZRgBIAEoDjIVLnR1dG9yaWFsLkNvbnRyb2xU",
            "eXBlEhMKC0NhbmNlbFNlY0lEGAIgASgJIoEBCitJRF8xMzNfQ09OVFJPTF9a",
            "T05FX1JFUFVFU1RfQ0FOQ0VMX1JFU1BPTlNFEioKC0NvbnRyb2xUeXBlGAEg",
            "ASgOMhUudHV0b3JpYWwuQ29udHJvbFR5cGUSEwoLQ2FuY2VsU2VjSUQYAiAB",
            "KAkSEQoJUmVwbHlDb2RlGAMgASgFIqsCChZJRF8xMzRfVFJBTlNfRVZFTlRf",
            "UkVQEiYKCUV2ZW50VHlwZRgBIAEoDjITLnR1dG9yaWFsLkV2ZW50VHlwZRIU",
            "CgxDdXJyZW50QWRySUQYAiABKAkSFAoMQ3VycmVudFNlY0lEGAMgASgJEjQK",
            "E0xlZnRHdWlkZUxvY2tTdGF0dXMYBSABKA4yFy50dXRvcmlhbC5WaEd1aWRl",
            "U3RhdHVzEjUKFFJpZ2h0R3VpZGVMb2NrU3RhdHVzGAYgASgOMhcudHV0b3Jp",
            "YWwuVmhHdWlkZVN0YXR1cxIUCgxTZWNfRGlzdGFuY2UYByABKA0SDQoFU3Bl",
            "ZWQYCCABKAESDQoFQW5nbGUYCSABKAESDQoFWEF4aXMYCiABKAESDQoFWUF4",
            "aXMYCyABKAEicQofSURfMzVfQ0FSUklFUl9JRF9SRU5BTUVfUkVRVUVTVBIS",
            "CgpPTERfQk9YX0lEGAEgASgJEhIKCk5FV19CT1hfSUQYAiABKAkSEgoKT0xE",
            "X0xPVF9JRBgFIAEoCRISCgpORVdfTE9UX0lEGAYgASgJIjYKIUlEXzEzNV9D",
            "QVJSSUVSX0lEX1JFTkFNRV9SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUi",
            "WQoLUmVzZXJ2ZUluZm8SGgoSUmVzZXJ2ZV9TZWN0aW9uX0lEGAEgASgJEi4K",
            "DURyaXZlRGlyY3Rpb24YAiABKA4yFy50dXRvcmlhbC5Ecml2ZURpcmN0aW9u",
            "IuEDChZJRF8xMzZfVFJBTlNfRVZFTlRfUkVQEiYKCUV2ZW50VHlwZRgBIAEo",
            "DjITLnR1dG9yaWFsLkV2ZW50VHlwZRIrCgxSZXNlcnZlSW5mb3MYAiADKAsy",
            "FS50dXRvcmlhbC5SZXNlcnZlSW5mbxIYChBSZXF1ZXN0X0Jsb2NrX0lEGAMg",
            "ASgJEhYKDlJlcXVlc3RfSElEX0lEGAQgASgJEg4KBkJPWF9JRBgFIAEoCRIO",
            "CgZMT1RfSUQYByABKAkSGwoTUmVsZWFzZV9CbG9ja19BZHJJRBgIIAEoCRIZ",
            "ChFSZWxlYXNlX0hJRF9BZHJJRBgJIAEoCRISCgpMb2FkUG9ydElEGAogASgJ",
            "EhQKDFVubG9hZFBvcnRJRBgLIAEoCRIUCgxDdXJyZW50QWRySUQYDCABKAkS",
            "FAoMQ3VycmVudFNlY0lEGA0gASgJEhQKDFNlY19EaXN0YW5jZRgOIAEoDRIu",
            "Cg1CQ1JSZWFkUmVzdWx0GA8gASgOMhcudHV0b3JpYWwuQkNSUmVhZFJlc3Vs",
            "dBIOCgZDbWRfSUQYECABKAkSJwoITG9jYXRpb24YESABKA4yFS50dXRvcmlh",
            "bC5BR1ZMb2NhdGlvbhITCgtJc05lZWRBdm9pZBgSIAEoCCLBAgoaSURfMzZf",
            "VFJBTlNfRVZFTlRfUkVTUE9OU0USKQoNSXNfQmxvY2tfUGFzcxgBIAEoDjIS",
            "LnR1dG9yaWFsLlBhc3NUeXBlEjMKEklzX1Jlc2VydmVfU3VjY2VzcxgCIAEo",
            "DjIXLnR1dG9yaWFsLlJlc2VydmVSZXN1bHQSKwoMUmVzZXJ2ZUluZm9zGAMg",
            "AygLMhUudHV0b3JpYWwuUmVzZXJ2ZUluZm8SJwoLSXNfSElEX1Bhc3MYBCAB",
            "KA4yEi50dXRvcmlhbC5QYXNzVHlwZRITCgtSZW5hbWVCT1hJRBgFIAEoCRIT",
            "CgtSZW5hbWVMT1RJRBgHIAEoCRIwCg9SZXBseUFjdGl2ZVR5cGUYCCABKA4y",
            "Fy50dXRvcmlhbC5DTURDYW5jZWxUeXBlEhEKCVJlcGx5Q29kZRgJIAEoBSJW",
            "ChpJRF8zN19UUkFOU19DQU5DRUxfUkVRVUVTVBIOCgZDbWRfSUQYASABKAkS",
            "KAoHQWN0VHlwZRgCIAEoDjIXLnR1dG9yaWFsLkNNRENhbmNlbFR5cGUiawoc",
            "SURfMTM3X1RSQU5TX0NBTkNFTF9SRVNQT05TRRIOCgZDbWRfSUQYASABKAkS",
            "KAoHQWN0VHlwZRgCIAEoDjIXLnR1dG9yaWFsLkNNRENhbmNlbFR5cGUSEQoJ",
            "UmVwbHlDb2RlGAMgASgFIiUKCUZyb21Ub0FkchIMCgRGcm9tGAEgASgJEgoK",
            "AlRvGAIgASgJInEKCUd1aWRlSW5mbxIjCgZGcm9tVG8YASABKAsyEy50dXRv",
            "cmlhbC5Gcm9tVG9BZHISFQoNR3VpZGVTZWN0aW9ucxgCIAMoCRIWCg5HdWlk",
            "ZUFkZHJlc3NlcxgDIAMoCRIQCghEaXN0YW5jZRgEIAEoDSJHChlJRF8xMzhf",
            "R1VJREVfSU5GT19SRVFVRVNUEioKDUZyb21Ub0Fkckxpc3QYASADKAsyEy50",
            "dXRvcmlhbC5Gcm9tVG9BZHIiRwoZSURfMzhfR1VJREVfSU5GT19SRVNQT05T",
            "RRIqCg1HdWlkZUluZm9MaXN0GAEgAygLMhMudHV0b3JpYWwuR3VpZGVJbmZv",
            "IpMBChNJRF8zOV9QQVVTRV9SRVFVRVNUEicKCUV2ZW50VHlwZRgBIAEoDjIU",
            "LnR1dG9yaWFsLlBhdXNlRXZlbnQSJgoJUGF1c2VUeXBlGAIgASgOMhMudHV0",
            "b3JpYWwuUGF1c2VUeXBlEisKDFJlc2VydmVJbmZvcxgDIAMoCzIVLnR1dG9y",
            "aWFsLlJlc2VydmVJbmZvIlMKFUlEXzEzOV9QQVVTRV9SRVNQT05TRRInCglF",
            "dmVudFR5cGUYASABKA4yFC50dXRvcmlhbC5QYXVzZUV2ZW50EhEKCVJlcGx5",
            "Q29kZRgCIAEoBSJLChVJRF80MV9NT0RFX0NIQU5HRV9SRVESMgoPT3BlcmF0",
            "aW5nVkhNb2RlGAEgASgOMhkudHV0b3JpYWwuT3BlcmF0aW5nVkhNb2RlIjAK",
            "G0lEXzE0MV9NT0RFX0NIQU5HRV9SRVNQT05TRRIRCglSZXBseUNvZGUYASAB",
            "KAUiKgoUSURfNDNfU1RBVFVTX1JFUVVFU1QSEgoKU3lzdGVtVGltZRgBIAEo",
            "CSLkCgoWSURfMTQzX1NUQVRVU19SRVNQT05TRRIUCgxDdXJyZW50QWRySUQY",
            "ASABKAkSFAoMQ3VycmVudFNlY0lEGAIgASgJEioKCk1vZGVTdGF0dXMYAyAB",
            "KA4yFi50dXRvcmlhbC5WSE1vZGVTdGF0dXMSLgoMQWN0aW9uU3RhdHVzGAQg",
            "ASgOMhgudHV0b3JpYWwuVkhBY3Rpb25TdGF0dXMSLAoLUG93ZXJTdGF0dXMY",
            "BSABKA4yFy50dXRvcmlhbC5WaFBvd2VyU3RhdHVzEi4KDk9ic3RhY2xlU3Rh",
            "dHVzGAYgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEi4KDkJsb2NraW5n",
            "U3RhdHVzGAcgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEikKCUhJRFN0",
            "YXR1cxgIIAEoDjIWLnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIrCgtQYXVzZVN0",
            "YXR1cxgJIAEoDjIWLnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIrCgtFcnJvclN0",
            "YXR1cxgKIAEoDjIWLnR1dG9yaWFsLlZoU3RvcFNpbmdsZRItCg1SZXNlcnZl",
            "U3RhdHVzGAsgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEhQKDFNlY19E",
            "aXN0YW5jZRgMIAEoDRIVCg1PYnN0X0Rpc3RhbmNlGA0gASgFEhcKD09ic3Rf",
            "VmVoaWNsZV9JRBgOIAEoCRIZChFTdG9wcGVkX0Jsb2NrX0lEXxgPIAEoCRIW",
            "Cg5TdG9wcGVkX0hJRF9JRBgQIAEoCRI2ChZFYXJ0aHF1YWtlX1BhdXNlX3Rh",
            "dHVzGBEgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEjMKE1NhZmV0eV9Q",
            "YXVzZV9TdGF0dXMYEiABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSKwoM",
            "UmVzZXJ2ZUluZm9zGBMgAygLMhUudHV0b3JpYWwuUmVzZXJ2ZUluZm8SMQoQ",
            "RHJpdmluZ0RpcmVjdGlvbhgUIAEoDjIXLnR1dG9yaWFsLkRyaXZlRGlyY3Rp",
            "b24SDQoFU3BlZWQYFSABKAUSDQoFQW5nbGUYFiABKAESDQoFWEF4aXMYFyAB",
            "KAESDQoFWUF4aXMYGCABKAESDgoGQ21kSWQxGBkgASgJEioKCkNtZFN0YXRl",
            "XzEYGiABKA4yFi50dXRvcmlhbC5Db21tYW5kU3RhdGUSDgoGQ21kSWQyGBsg",
            "ASgJEioKCkNtZFN0YXRlXzIYHCABKA4yFi50dXRvcmlhbC5Db21tYW5kU3Rh",
            "dGUSDgoGQ21kSWQzGB0gASgJEioKCkNtZFN0YXRlXzMYHiABKA4yFi50dXRv",
            "cmlhbC5Db21tYW5kU3RhdGUSDgoGQ21kSWQ0GB8gASgJEioKCkNtZFN0YXRl",
            "XzQYICABKA4yFi50dXRvcmlhbC5Db21tYW5kU3RhdGUSKwoISGFzQm94X0wY",
            "ISABKA4yGS50dXRvcmlhbC5WaExvYWRDU1RTdGF0dXMSDgoGQm94SWRMGCIg",
            "ASgJEisKCEhhc0JveF9SGCMgASgOMhkudHV0b3JpYWwuVmhMb2FkQ1NUU3Rh",
            "dHVzEg4KBkJveElkUhgkIAEoCRIsCg1TaGVsZlN0YXR1c19MGCUgASgOMhUu",
            "dHV0b3JpYWwuU2hlbGZTdGF0dXMSLAoNU2hlbGZTdGF0dXNfUhgmIAEoDjIV",
            "LnR1dG9yaWFsLlNoZWxmU3RhdHVzEhoKEkN1cnJlbnRFeGN1dGVDbWRJZBgn",
            "IAEoCRIcChRXaWxsUGFzc0d1aWRlU2VjdGlvbhgoIAMoCSLmCgoYSURfMTQ0",
            "X1NUQVRVU19DSEFOR0VfUkVQEhQKDEN1cnJlbnRBZHJJRBgBIAEoCRIUCgxD",
            "dXJyZW50U2VjSUQYAiABKAkSKgoKTW9kZVN0YXR1cxgDIAEoDjIWLnR1dG9y",
            "aWFsLlZITW9kZVN0YXR1cxIuCgxBY3Rpb25TdGF0dXMYBCABKA4yGC50dXRv",
            "cmlhbC5WSEFjdGlvblN0YXR1cxIsCgtQb3dlclN0YXR1cxgFIAEoDjIXLnR1",
            "dG9yaWFsLlZoUG93ZXJTdGF0dXMSLgoOT2JzdGFjbGVTdGF0dXMYBiABKA4y",
            "Fi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSLgoOQmxvY2tpbmdTdGF0dXMYByAB",
            "KA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSKQoJSElEU3RhdHVzGAggASgO",
            "MhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEisKC1BhdXNlU3RhdHVzGAkgASgO",
            "MhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEisKC0Vycm9yU3RhdHVzGAogASgO",
            "MhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEi0KDVJlc2VydmVTdGF0dXMYCyAB",
            "KA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSFAoMU2VjX0Rpc3RhbmNlGAwg",
            "ASgNEhUKDU9ic3RfRGlzdGFuY2UYDSABKAUSFwoPT2JzdF9WZWhpY2xlX0lE",
            "GA4gASgJEhkKEVN0b3BwZWRfQmxvY2tfSURfGA8gASgJEhYKDlN0b3BwZWRf",
            "SElEX0lEGBAgASgJEjYKFkVhcnRocXVha2VfUGF1c2VfdGF0dXMYESABKA4y",
            "Fi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSMwoTU2FmZXR5X1BhdXNlX1N0YXR1",
            "cxgSIAEoDjIWLnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIrCgxSZXNlcnZlSW5m",
            "b3MYEyADKAsyFS50dXRvcmlhbC5SZXNlcnZlSW5mbxIxChBEcml2aW5nRGly",
            "ZWN0aW9uGBQgASgOMhcudHV0b3JpYWwuRHJpdmVEaXJjdGlvbhINCgVTcGVl",
            "ZBgVIAEoBRINCgVBbmdsZRgWIAEoARINCgVYQXhpcxgXIAEoARINCgVZQXhp",
            "cxgYIAEoARIOCgZDbWRJZDEYGSABKAkSKgoKQ21kU3RhdGVfMRgaIAEoDjIW",
            "LnR1dG9yaWFsLkNvbW1hbmRTdGF0ZRIOCgZDbWRJZDIYGyABKAkSKgoKQ21k",
            "U3RhdGVfMhgcIAEoDjIWLnR1dG9yaWFsLkNvbW1hbmRTdGF0ZRIOCgZDbWRJ",
            "ZDMYHSABKAkSKgoKQ21kU3RhdGVfMxgeIAEoDjIWLnR1dG9yaWFsLkNvbW1h",
            "bmRTdGF0ZRIOCgZDbWRJZDQYHyABKAkSKgoKQ21kU3RhdGVfNBggIAEoDjIW",
            "LnR1dG9yaWFsLkNvbW1hbmRTdGF0ZRIrCghIYXNCb3hfTBghIAEoDjIZLnR1",
            "dG9yaWFsLlZoTG9hZENTVFN0YXR1cxIOCgZCb3hJZEwYIiABKAkSKwoISGFz",
            "Qm94X1IYIyABKA4yGS50dXRvcmlhbC5WaExvYWRDU1RTdGF0dXMSDgoGQm94",
            "SWRSGCQgASgJEiwKDVNoZWxmU3RhdHVzX0wYJSABKA4yFS50dXRvcmlhbC5T",
            "aGVsZlN0YXR1cxIsCg1TaGVsZlN0YXR1c19SGCYgASgOMhUudHV0b3JpYWwu",
            "U2hlbGZTdGF0dXMSGgoSQ3VycmVudEV4Y3V0ZUNtZElkGCcgASgJEhwKFFdp",
            "bGxQYXNzR3VpZGVTZWN0aW9uGCggAygJIjEKHElEXzQ0X1NUQVRVU19DSEFO",
            "R0VfUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIk8KE0lEXzQ1X1BPV0VS",
            "X09QRV9SRVESOAoST3BlcmF0aW5nUG93ZXJNb2RlGAEgASgOMhwudHV0b3Jp",
            "YWwuT3BlcmF0aW5nUG93ZXJNb2RlIi4KGUlEXzE0NV9QT1dFUl9PUEVfUkVT",
            "UE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIm4KE0lEXzUxX0FWT0lEX1JFUVVF",
            "U1QSFgoORGVzdGluYXRpb25BZHIYASABKAkSFgoOR3VpZGVfU2VjdGlvbnMY",
            "AiADKAkSFwoPR3VpZGVfQWRkcmVzc2VzGAMgAygJEg4KBkNtZF9JRBgEIAEo",
            "CSI8ChVJRF8xNTFfQVZPSURfUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgF",
            "EhAKCE5nUmVhc29uGAIgASgJIkEKHElEXzE1Ml9BVk9JRF9DT01QTEVURV9S",
            "RVBPUlQSEQoJQ21wU3RhdHVzGAEgASgFEg4KBkNtZF9JRBgCIAEoCSIyCh1J",
            "RF81Ml9BVk9JRF9DT01QTEVURV9SRVNQT05TRRIRCglSZXBseUNvZGUYASAB",
            "KAUiPgocSURfNzFfUkFOR0VfVEVBQ0hJTkdfUkVRVUVTVBIPCgdGcm9tQWRy",
            "GAEgASgJEg0KBVRvQWRyGAIgASgJIjMKHklEXzE3MV9SQU5HRV9URUFDSElO",
            "R19SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUidAolSURfMTcyX1JBTkdF",
            "X1RFQUNISU5HX0NPTVBMRVRFX1JFUE9SVBIPCgdGcm9tQWRyGAEgASgJEg0K",
            "BVRvQWRyGAIgASgJEhQKDFNlY19EaXN0YW5jZRgDIAEoDRIVCg1Db21wbGV0",
            "ZV9Db2RlGAQgASgFIjsKJklEXzcyX1JBTkdFX1RFQUNISU5HX0NPTVBMRVRF",
            "X1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSI9ChtJRF8xNzRfQUREUkVT",
            "U19URUFDSF9SRVBPUlQSDAoEQWRkchgBIAEoCRIQCghQb3NpdGlvbhgCIAEo",
            "BSIxChxJRF83NF9BRERSRVNTX1RFQUNIX1JFU1BPTlNFEhEKCVJlcGx5Q29k",
            "ZRgBIAEoBSIbChlJRF85MV9BTEFSTV9SRVNFVF9SRVFVRVNUIjAKG0lEXzE5",
            "MV9BTEFSTV9SRVNFVF9SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUiaAoT",
            "SURfMTk0X0FMQVJNX1JFUE9SVBIPCgdFcnJDb2RlGAEgASgJEigKCUVyclN0",
            "YXR1cxgCIAEoDjIVLnR1dG9yaWFsLkVycm9yU3RhdHVzEhYKDkVyckRlc2Ny",
            "aXB0aW9uGAMgASgJIikKFElEXzk0X0FMQVJNX1JFU1BPTlNFEhEKCVJlcGx5",
            "Q29kZRgBIAEoBSLMIgoOV3JhcHBlck1lc3NhZ2USCwoCSUQY6AcgASgFEg8K",
            "BlNlcU51bRjpByABKAUSSQoTSG9zdF9CYXNpY19JbmZvX1JlcBgBIAEoCzIq",
            "LnR1dG9yaWFsLklEXzFfSE9TVF9CQVNJQ19JTkZPX1ZFUlNJT05fUkVQSAAS",
            "UQoUSG9zdF9CYXNpY19JbmZvX1Jlc3AYZSABKAsyMS50dXRvcmlhbC5JRF8x",
            "MDFfSE9TVF9CQVNJQ19JTkZPX1ZFUlNJT05fUkVTUE9OU0VIABJJChZCYXNp",
            "Y19JbmZvX1ZlcnNpb25fUmVwGGYgASgLMicudHV0b3JpYWwuSURfMTAyX0JB",
            "U0lDX0lORk9fVkVSU0lPTl9SRVBIABJNChdCYXNpY19JbmZvX1ZlcnNpb25f",
            "UmVzcBgCIAEoCzIqLnR1dG9yaWFsLklEXzJfQkFTSUNfSU5GT19WRVJTSU9O",
            "X1JFU1BPTlNFSAASPwoRSW5pdGlhbF9FdmVudF9SZXAYaiABKAsyIi50dXRv",
            "cmlhbC5JRF8xMDZfSU5JVElBTF9FVkVOVF9SRVBIABJDChJJbml0aWFsX0V2",
            "ZW50X1Jlc3AYBiABKAsyJS50dXRvcmlhbC5JRF82X0lOSVRJQUxfRVZFTlRf",
            "UkVTUE9OU0VIABI4Cg5CYXNpY19JbmZvX1JlcBgLIAEoCzIeLnR1dG9yaWFs",
            "LklEXzExX0JBU0lDX0lORk9fUkVQSAASPwoPQmFzaWNfSW5mb19SZXNwGG8g",
            "ASgLMiQudHV0b3JpYWwuSURfMTExX0JBU0lDX0lORk9fUkVTUE9OU0VIABJA",
            "ChJUYXZlbGxpbmdfRGF0YV9SZXAYDSABKAsyIi50dXRvcmlhbC5JRF8xM19U",
            "QVZFTExJTkdfREFUQV9SRVBIABJHChNUYXZlbGxpbmdfRGF0YV9SZXNwGHEg",
            "ASgLMigudHV0b3JpYWwuSURfMTEzX1RBVkVMTElOR19EQVRBX1JFU1BPTlNF",
            "SAASPAoQU2VjdGlvbl9EYXRhX1JlcBgPIAEoCzIgLnR1dG9yaWFsLklEXzE1",
            "X1NFQ1RJT05fREFUQV9SRVBIABJDChFTZWN0aW9uX0RhdGFfUmVzcBhzIAEo",
            "CzImLnR1dG9yaWFsLklEXzExNV9TRUNUSU9OX0RBVEFfUkVTUE9OU0VIABI8",
            "ChBBZGRyZXNzX0RhdGFfUmVwGBEgASgLMiAudHV0b3JpYWwuSURfMTdfQURE",
            "UkVTU19EQVRBX1JFUEgAEkMKEUFkZHJlc3NfRGF0YV9SZXNwGHUgASgLMiYu",
            "dHV0b3JpYWwuSURfMTE3X0FERFJFU1NfREFUQV9SRVNQT05TRUgAEjgKDlNj",
            "YWxlX0RhdGFfUmVwGBMgASgLMh4udHV0b3JpYWwuSURfMTlfU0NBTEVfREFU",
            "QV9SRVBIABI/Cg9TY2FsZV9EYXRhX1Jlc3AYdyABKAsyJC50dXRvcmlhbC5J",
            "RF8xMTlfU0NBTEVfREFUQV9SRVNQT05TRUgAEjwKEENvbnRyb2xfRGF0YV9S",
            "ZXAYFSABKAsyIC50dXRvcmlhbC5JRF8yMV9DT05UUk9MX0RBVEFfUkVQSAAS",
            "QwoRQ29udHJvbF9EYXRhX1Jlc3AYeSABKAsyJi50dXRvcmlhbC5JRF8xMjFf",
            "Q09OVFJPTF9EQVRBX1JFU1BPTlNFSAASOAoOR3VpZGVfRGF0YV9SZXAYFyAB",
            "KAsyHi50dXRvcmlhbC5JRF8yM19HVUlERV9EQVRBX1JFUEgAEj8KD0d1aWRl",
            "X0RhdGFfUmVzcBh7IAEoCzIkLnR1dG9yaWFsLklEXzEyM19HVUlERV9EQVRB",
            "X1JFU1BPTlNFSAASRgoVSW5kaXZpZHVhbF9VcGxvYWRfUmVxGD0gASgLMiUu",
            "dHV0b3JpYWwuSURfNjFfSU5ESVZJRFVBTF9VUExPQURfUkVRSAASTgoWSW5k",
            "aXZpZHVhbF9VcGxvYWRfUmVzcBihASABKAsyKy50dXRvcmlhbC5JRF8xNjFf",
            "SU5ESVZJRFVBTF9VUExPQURfUkVTUE9OU0VIABJIChVHVUlERV9EYXRhX1Vw",
            "bG9hZF9SZXEYogEgASgLMiYudHV0b3JpYWwuSURfMTYyX0dVSURFX0RBVEFf",
            "VVBMT0FEX1JFUEgAEksKFkdVSURFX0RhdGFfVXBsb2FkX1Jlc3AYPiABKAsy",
            "KS50dXRvcmlhbC5JRF82Ml9HVUlEX0RBVEFfVVBMT0FEX1JFU1BPTlNFSAAS",
            "RgoVSW5kaXZpZHVhbF9DaGFuZ2VfUmVxGD8gASgLMiUudHV0b3JpYWwuSURf",
            "NjNfSU5ESVZJRFVBTF9DSEFOR0VfUkVRSAASTgoWSW5kaXZpZHVhbF9DaGFu",
            "Z2VfUmVzcBijASABKAsyKy50dXRvcmlhbC5JRF8xNjNfSU5ESVZJRFVBTF9D",
            "SEFOR0VfUkVTUE9OU0VIABI6Cg9Nb2RlX0NoYW5nZV9SZXEYKSABKAsyHy50",
            "dXRvcmlhbC5JRF80MV9NT0RFX0NIQU5HRV9SRVFIABJCChBNb2RlX0NoYW5n",
            "ZV9SZXNwGI0BIAEoCzIlLnR1dG9yaWFsLklEXzE0MV9NT0RFX0NIQU5HRV9S",
            "RVNQT05TRUgAEjIKCVRyYW5zX1JlcRgfIAEoCzIdLnR1dG9yaWFsLklEXzMx",
            "X1RSQU5TX1JFUVVFU1RIABI2CgpUcmFuc19SZXNwGIMBIAEoCzIfLnR1dG9y",
            "aWFsLklEXzEzMV9UUkFOU19SRVNQT05TRUgAEj8KDFRyYW5fQ21wX1JlcBiE",
            "ASABKAsyJi50dXRvcmlhbC5JRF8xMzJfVFJBTlNfQ09NUExFVEVfUkVQT1JU",
            "SAASQAoNVHJhbl9DbXBfUmVzcBggIAEoCzInLnR1dG9yaWFsLklEXzMyX1RS",
            "QU5TX0NPTVBMRVRFX1JFU1BPTlNFSAASTwoQQ29udHJvbF9ab25lX1JlcRgh",
            "IAEoCzIzLnR1dG9yaWFsLklEXzMzX0NPTlRST0xfWk9ORV9SRVBVRVNUX0NB",
            "TkNFTF9SRVFVRVNUSAASUwoRQ29udHJvbF9ab25lX1Jlc3AYhQEgASgLMjUu",
            "dHV0b3JpYWwuSURfMTMzX0NPTlRST0xfWk9ORV9SRVBVRVNUX0NBTkNFTF9S",
            "RVNQT05TRUgAEkoKFUNBUlJJRVJfSURfUmVuYW1lX1JlcRgjIAEoCzIpLnR1",
            "dG9yaWFsLklEXzM1X0NBUlJJRVJfSURfUkVOQU1FX1JFUVVFU1RIABJOChZD",
            "QVJSSUVSX0lEX1JlbmFtZV9SZXNwGIcBIAEoCzIrLnR1dG9yaWFsLklEXzEz",
            "NV9DQVJSSUVSX0lEX1JFTkFNRV9SRVNQT05TRUgAEkAKEFRyYW5zX0NhbmNl",
            "bF9SZXEYJSABKAsyJC50dXRvcmlhbC5JRF8zN19UUkFOU19DQU5DRUxfUkVR",
            "VUVTVEgAEkQKEVRyYW5zX0NhbmNlbF9SZXNwGIkBIAEoCzImLnR1dG9yaWFs",
            "LklEXzEzN19UUkFOU19DQU5DRUxfUkVTUE9OU0VIABI+Cg5HdWlkZV9JbmZv",
            "X1JlcRiKASABKAsyIy50dXRvcmlhbC5JRF8xMzhfR1VJREVfSU5GT19SRVFV",
            "RVNUSAASPgoPR3VpZGVfSW5mb19SZXNwGCYgASgLMiMudHV0b3JpYWwuSURf",
            "MzhfR1VJREVfSU5GT19SRVNQT05TRUgAEjIKCVBhdXNlX1JlcRgnIAEoCzId",
            "LnR1dG9yaWFsLklEXzM5X1BBVVNFX1JFUVVFU1RIABI2CgpQYXVzZV9SZXNw",
            "GIsBIAEoCzIfLnR1dG9yaWFsLklEXzEzOV9QQVVTRV9SRVNQT05TRUgAEjwK",
            "D1RyYW5zX0V2ZW50X1JlcBiGASABKAsyIC50dXRvcmlhbC5JRF8xMzRfVFJB",
            "TlNfRVZFTlRfUkVQSAASQAoTSW1wX1RyYW5zX0V2ZW50X1JlcBiIASABKAsy",
            "IC50dXRvcmlhbC5JRF8xMzZfVFJBTlNfRVZFTlRfUkVQSAASRAoUSW1wX1Ry",
            "YW5zX0V2ZW50X1Jlc3AYJCABKAsyJC50dXRvcmlhbC5JRF8zNl9UUkFOU19F",
            "VkVOVF9SRVNQT05TRUgAEjQKClN0YXR1c19SZXEYKyABKAsyHi50dXRvcmlh",
            "bC5JRF80M19TVEFUVVNfUkVRVUVTVEgAEjwKD1N0YXR1c19SZXFfUmVzcBiP",
            "ASABKAsyIC50dXRvcmlhbC5JRF8xNDNfU1RBVFVTX1JFU1BPTlNFSAASQAoR",
            "U3RhdHVlX0NoYW5nZV9SZXAYkAEgASgLMiIudHV0b3JpYWwuSURfMTQ0X1NU",
            "QVRVU19DSEFOR0VfUkVQSAASRAoSU3RhdHVzX0NoYW5nZV9SZXNwGCwgASgL",
            "MiYudHV0b3JpYWwuSURfNDRfU1RBVFVTX0NIQU5HRV9SRVNQT05TRUgAEjYK",
            "DVBvd2VyX09wZV9SZXEYLSABKAsyHS50dXRvcmlhbC5JRF80NV9QT1dFUl9P",
            "UEVfUkVRSAASPgoOUG93ZXJfT3BlX1Jlc3AYkQEgASgLMiMudHV0b3JpYWwu",
            "SURfMTQ1X1BPV0VSX09QRV9SRVNQT05TRUgAEjIKCUF2b2lkX1JlcRgzIAEo",
            "CzIdLnR1dG9yaWFsLklEXzUxX0FWT0lEX1JFUVVFU1RIABI2CgpBdm9pZF9S",
            "ZXNwGJcBIAEoCzIfLnR1dG9yaWFsLklEXzE1MV9BVk9JRF9SRVNQT05TRUgA",
            "EkUKEkF2b2lkX0NvbXBsZXRlX1JlcBiYASABKAsyJi50dXRvcmlhbC5JRF8x",
            "NTJfQVZPSURfQ09NUExFVEVfUkVQT1JUSAASRgoTQXZvaWRfQ29tcGxldGVf",
            "UmVzcBg0IAEoCzInLnR1dG9yaWFsLklEXzUyX0FWT0lEX0NPTVBMRVRFX1JF",
            "U1BPTlNFSAASRAoSUmFuZ2VfVGVhY2hpbmdfUmVxGEcgASgLMiYudHV0b3Jp",
            "YWwuSURfNzFfUkFOR0VfVEVBQ0hJTkdfUkVRVUVTVEgAEkgKE1JhbmdlX1Rl",
            "YWNoaW5nX1Jlc3AYqwEgASgLMigudHV0b3JpYWwuSURfMTcxX1JBTkdFX1RF",
            "QUNISU5HX1JFU1BPTlNFSAASUgoWUmFuZ2VfVGVhY2hpbmdfQ21wX1JlcBis",
            "ASABKAsyLy50dXRvcmlhbC5JRF8xNzJfUkFOR0VfVEVBQ0hJTkdfQ09NUExF",
            "VEVfUkVQT1JUSAASUwoXUmFuZ2VfVGVhY2hpbmdfQ21wX1Jlc3AYSCABKAsy",
            "MC50dXRvcmlhbC5JRF83Ml9SQU5HRV9URUFDSElOR19DT01QTEVURV9SRVNQ",
            "T05TRUgAEkMKEUFkZHJlc3NfVGVhY2hfUmVwGK4BIAEoCzIlLnR1dG9yaWFs",
            "LklEXzE3NF9BRERSRVNTX1RFQUNIX1JFUE9SVEgAEkQKEkFkZHJlc3NfVGVh",
            "Y2hfUmVzcBhKIAEoCzImLnR1dG9yaWFsLklEXzc0X0FERFJFU1NfVEVBQ0hf",
            "UkVTUE9OU0VIABI+Cg9BbGFybV9SZXNldF9SZXEYWyABKAsyIy50dXRvcmlh",
            "bC5JRF85MV9BTEFSTV9SRVNFVF9SRVFVRVNUSAASQgoQQWxhcm1fUmVzZXRf",
            "UmVzcBi/ASABKAsyJS50dXRvcmlhbC5JRF8xOTFfQUxBUk1fUkVTRVRfUkVT",
            "UE9OU0VIABIzCglBbGFybV9SZXAYwgEgASgLMh0udHV0b3JpYWwuSURfMTk0",
            "X0FMQVJNX1JFUE9SVEgAEjQKCkFsYXJtX1Jlc3AYXiABKAsyHi50dXRvcmlh",
            "bC5JRF85NF9BTEFSTV9SRVNQT05TRUgAQgUKA21zZyKZAgoSU1lTVEVNUFJP",
            "Q0VTU19JTkZPEgwKBFRJTUUYASABKAkSCwoDU0VRGAIgASgEEhEKCUxPR19M",
            "RVZFTBgDIAEoCRINCgVDTEFTUxgEIAEoCRIOCgZNRVRIT0QYBSABKAkSDgoG",
            "REVWSUNFGAYgASgJEgwKBERBVEEYByABKAkSDQoFVkhfSUQYCCABKAkSDgoG",
            "Q1JSX0lEGAkgASgJEgwKBFRZUEUYCiABKAkSDgoGTE9HX0lEGAsgASgJEhEK",
            "CVRIUkVBRF9JRBgMIAEoCRILCgNMT1QYDSABKAkSDQoFTEVWRUwYDiABKAkS",
            "CwoDWElEGA8gASgJEg4KBlRSWF9JRBgQIAEoCRIPCgdERVRBSUxTGBEgASgJ",
            "IowBCgxIT1NUTE9HX0lORk8SDAoEVElNRRgBIAEoCRINCgVFUV9JRBgCIAEo",
            "CRIUCgxTRU5EX1JFQ0VJVkUYAyABKAkSCgoCU1gYBCABKAkSCgoCRlkYBSAB",
            "KAkSDgoGREVWSUNFGAYgASgJEhAKCEZVTl9OQU1FGAcgASgJEg8KB01FU1NB",
            "R0UYCCABKAki1AEKCkVRTE9HX0lORk8SDAoEVElNRRgBIAEoCRIUCgxTRU5E",
            "X1JFQ0VJVkUYAiABKAkSEAoIRlVOX05BTUUYAyABKAkSDgoGU0VRX05PGAQg",
            "ASgFEg0KBVZIX0lEGAUgASgJEhMKC09IVENfQ01EX0lEGAYgASgJEhAKCEFD",
            "VF9UWVBFGAcgASgJEhIKCk1DU19DTURfSUQYCCABKAkSEgoKRVZFTlRfVFlQ",
            "RRgJIAEoCRIRCglWSF9TVEFUVVMYCiABKAkSDwoHTUVTU0FHRRgLIAEoCSqz",
            "AQoKQWN0aXZlVHlwZRIICgRNT1ZFEAASCAoETE9BRBABEgoKBlVOTE9BRBAC",
            "Eg4KCkxPQURVTkxPQUQQAxIICgRIT01FEAQSDAoIT1ZFUlJJREUQBRILCgdN",
            "VExIT01FEAcSCAoEU0NBThAIEg0KCU1PVkVUT01UTBAKEg0KCVNZU1RFTU9V",
            "VBALEgwKCFNZU1RFTUlOEAwSDwoLVEVDSElOR01PVkUQDRIJCgVST1VORBBj",
            "KpwDCglFdmVudFR5cGUSEAoMTG9hZEFycml2YWxzEAASEAoMTG9hZENvbXBs",
            "ZXRlEAESEgoOVW5sb2FkQXJyaXZhbHMQAhISCg5VbmxvYWRDb21wbGV0ZRAD",
            "EhUKEUFkck9yTW92ZUFycml2YWxzEAQSCwoHQWRyUGFzcxAFEg0KCU1vdmVQ",
            "YXVzZRAGEg8KC01vdmVSZXN0YXJ0EAcSDgoKUmVzZXJ2ZVJlcRAIEgwKCEJs",
            "b2NrUmVxEAkSCgoGSElEUmVxEAoSDwoLQmxvY2tISURSZXEQCxINCglWSExv",
            "YWRpbmcQDBIPCgtWSFVubG9hZGluZxANEgsKB0JDUlJlYWQQDhIRCg1Eb3Vi",
            "bGVTdG9yYWdlEA8SEgoORW1wdHlSZXRyaWV2YWwQEBIICgRTY2FuEBESEwoP",
            "Q1NUVHlwZU1pc21hdGNoEBISDQoJQXZvaWRlUmVxEBMSEAoMQmxvY2tSZWxl",
            "YXNlEBUSDgoKSElEUmVsZWFzZRAWEhMKD0Jsb2NrSElEUmVsZWFzZRAXEgsK",
            "B0luaXRpYWwQHyr+BAoOQ29tcGxldGVTdGF0dXMSEQoNQ21wU3RhdHVzTW92",
            "ZRAAEhEKDUNtcFN0YXR1c0xvYWQQARITCg9DbXBTdGF0dXNVbmxvYWQQAhIX",
            "ChNDbXBTdGF0dXNMb2FkdW5sb2FkEAMSEQoNQ21wU3RhdHVzSG9tZRAEEhUK",
            "EUNtcFN0YXR1c092ZXJyaWRlEAUSGAoUQ21wU3RhdHVzQ3N0SURSZW5tYWUQ",
            "BhIUChBDbXBTdGF0dXNNVExIb21lEAcSEQoNQ21wU3RhdHVzU2NhbhAIEhYK",
            "EkNtcFN0YXR1c01vdmVUb01UTBAKEhYKEkNtcFN0YXR1c1N5c3RlbU91dBAL",
            "EhUKEUNtcFN0YXR1c1N5c3RlbUluEAwSGAoUQ21wU3RhdHVzVGVjaGluZ01v",
            "dmUQDRITCg9DbXBTdGF0dXNDYW5jZWwQFBISCg5DbXBTdGF0dXNBYm9ydBAV",
            "EhkKFUNtcFN0YXR1c1ZlaGljbGVBYm9ydBAWEhcKE0NtcFN0YXR1c0lETWlz",
            "TWF0Y2gQFxIZChVDbXBTdGF0dXNJRFJlYWRGYWlsZWQQGBIcChhDbXBTdGF0",
            "dXNJRFJlYWREdXBsaWNhdGUQGRIcChhDbXBTdGF0dXNJRERvdWJsZVN0b3Jh",
            "Z2UQGhIcChhDbXBTdGF0dXNJREVtcHR5UmV0cml2YWwQGxIeChpDbXBTdGF0",
            "dXNJRENTVFR5cGVNaXNtYXRjaBAcEhsKF0NtcFN0YXR1c0ludGVybG9ja0Vy",
            "cm9yEEASHQoZQ21wU3RhdHVzTG9uZ1RpbWVJbmFjdGlvbhBiEhwKGENtcFN0",
            "YXR1c0ZvcmNlRmluaXNoQnlPcBBjKswBCg1DTURDYW5jZWxUeXBlEgwKCENN",
            "RF9Ob25lEAASDQoJQ01EX1JldHJ5EAESDgoKQ01EX0NhbmNlbBAUEg0KCUNN",
            "RF9BYm9ydBAVEhoKFkNNRF9DYW5jZWxfSURfTWlzbWF0Y2gQFxIdChlDTURf",
            "Q2FuY2VsX0lEX1JlYWRfRmFpbGVkEBgSIAocQ01EX0NhbmNlbF9JRF9SZWFk",
            "X0R1cGxpY2F0ZRAZEiIKHkNNRF9DYW5jZWxfSURfUmVhZF9Gb3JjZUZpbmlz",
            "aBAaKiUKClBhdXNlRXZlbnQSDAoIQ29udGludWUQABIJCgVQYXVzZRABKukB",
            "CglQYXVzZVR5cGUSEgoOUGF1c2VUeXBlX05vbmUQABISCg5QYXVzZVR5cGVf",
            "T0h4QxABEhMKD1BhdXNlVHlwZV9CbG9jaxACEhEKDVBhdXNlVHlwZV9ISUQQ",
            "AxIYChRQYXVzZVR5cGVfRWFydGhRdWFrZRAEEhQKEFBhdXNlVHlwZV9TYWZl",
            "dHkQBRIVChFQYXVzZVR5cGVfUmVzZXJ2ZRAGEhkKFVBhdXNlVHlwZV9NYW51",
            "YWxCbG9jaxAHEhcKE1BhdXNlVHlwZV9NYW51YWxISUQQCBIRCg1QYXVzZVR5",
            "cGVfQWxsEAkqJQoNVmhHdWlkZVN0YXR1cxIKCgZVbmxvY2sQABIICgRMb2Nr",
            "EAEqHwoIUGFzc1R5cGUSCAoEUGFzcxAAEgkKBUJsb2NrEAEqTAoPRV9BcmVh",
            "U2Vuc29yRGlyEhYKEkFyZWFTZW5zb3JEaXJfTm9uZRAAEgwKCFN0cmFpZ2h0",
            "EAESCAoETGVmdBACEgkKBVJpZ2h0EAMqOwoPT3BlcmF0aW5nVkhNb2RlEhIK",
            "Dk9wZXJhdGluZ19BdXRvEAASFAoQT3BlcmF0aW5nX01hbnVhbBABKmAKC0Nv",
            "bnRyb2xUeXBlEgsKB05vdGhpbmcQABIVChFDb250cm9sVHlwZV9CbG9jaxAE",
            "EhMKD0NvbnRyb2xUeXBlX0hJRBAFEhgKFENvbnRyb2xUeXBlX1Jlc2VydmVy",
            "EAYqTgoNRHJpdmVEaXJjdGlvbhIRCg1Ecml2ZURpcl9Ob25lEAASFAoQRHJp",
            "dmVEaXJfRm9yd2FyZBABEhQKEERyaXZlRGlyX1JldmVyc2UQAipHCg1SZXNl",
            "cnZlUmVzdWx0EhkKFVJlc2VydmVSZXN1bHRfU3VjY2VzcxAAEhsKF1Jlc2Vy",
            "dmVSZXN1bHRfVW5zdWNjZXNzEAEqQwoNQkNSUmVhZFJlc3VsdBIOCgpCQ1Jf",
            "Tm9ybWFsEAASEAoMQkNSX1JlYWRGYWlsEAESEAoMQkNSX01pc01hdGNoEAIq",
            "UAoLQUdWTG9jYXRpb24SFQoRQUdWTG9jYXRpb25fUmlnaHQQABIUChBBR1ZM",
            "b2NhdGlvbl9MZWZ0EAESFAoQQUdWTG9jYXRpb25fTm9uZRACKo4BCgxWSE1v",
            "ZGVTdGF0dXMSCAoETm9uZRAAEhUKEUluaXRpYWxfUG93ZXJfT0ZGEAESFAoQ",
            "SW5pdGlhbF9Qb3dlcl9PThACEgoKBk1hbnVhbBADEg8KC0F1dG9fUmVtb3Rl",
            "EAQSDgoKQXV0b19Mb2NhbBAFEgwKCEF1dG9fTVRTEAYSDAoIQXV0b19NVEwQ",
            "BypgCg5WSEFjdGlvblN0YXR1cxINCglOb0NvbW1hbmQQABIOCgpDb21tYW5k",
            "aW5nEAESDAoIVGVhY2hpbmcQBRITCg9HcmlwcGVyVGVhY2hpbmcQBhIMCghD",
            "eWNsZVJ1bhAHKiwKDVZoUG93ZXJTdGF0dXMSDQoJUG93ZXJfT2ZmEAASDAoI",
            "UG93ZXJfT24QASoqCg9WaExvYWRDU1RTdGF0dXMSDAoITm90RXhpc3QQABIJ",
            "CgVFeGlzdBABKjUKDFZoU3RvcFNpbmdsZRISCg5TdG9wU2luZ2xlX09mZhAA",
            "EhEKDVN0b3BTaW5nbGVfT24QASpjCgxDb21tYW5kU3RhdGUSFQoRQ29tbWFu",
            "ZFN0YXRlX05vbmUQABIcChhDb21tYW5kU3RhdGVfTG9hZEVucm91dGUQARIe",
            "ChpDb21tYW5kU3RhdGVfVW5sb2FkRW5yb3V0ZRACKj4KC1NoZWxmU3RhdHVz",
            "EhcKE1NoZWxmU3RhdHVzX0Rpc2FibGUQABIWChJTaGVsZlN0YXR1c19FbmFi",
            "bGUQASpFChJPcGVyYXRpbmdQb3dlck1vZGUSFwoTT3BlcmF0aW5nX1Bvd2Vy",
            "X09mZhAAEhYKEk9wZXJhdGluZ19Qb3dlcl9PbhABKikKC0Vycm9yU3RhdHVz",
            "Eg0KCUVycl9SZXNldBAAEgsKB0Vycl9TZXQQAUKLAQoUY29tLmV4YW1wbGUu",
            "dHV0b3JpYWxCEUFkZHJlc3NCb29rUHJvdG9zUAFaK2dpdGh1Yi5jb20vZ29s",
            "YW5nL3Byb3RvYnVmL3B0eXBlcy90aW1lc3RhbXD4AQGiAgNHUEKqAidjb20u",
            "bWlybGUuQUtBLlByb3RvY29sRm9ybWF0LlJHVk1lc3NhZ2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ActiveType), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.EventType), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.CompleteStatus), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseEvent), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseType), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhGuideStatus), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.PassType), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.E_AreaSensorDir), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.OperatingVHMode), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ControlType), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveResult), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.BCRReadResult), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.AGVLocation), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHModeStatus), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHActionStatus), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhPowerStatus), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.OperatingPowerMode), typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ErrorStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.Timestamp), global::com.mirle.AKA.ProtocolFormat.RGVMessage.Timestamp.Parser, new[]{ "Seconds", "Nanos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_1_HOST_BASIC_INFO_VERSION_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_1_HOST_BASIC_INFO_VERSION_REP.Parser, new[]{ "DataDateTimeYear", "DataDateTimeMonth", "DataDateTimeDay", "DataDateTimeHour", "DataDateTimeMinute", "DataDateTimeSecond", "CurrentTimeYear", "CurrentTimeMonth", "CurrentTimeDay", "CurrentTimeHour", "CurrentTimeMinute", "CurrentTimeSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_102_BASIC_INFO_VERSION_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_102_BASIC_INFO_VERSION_REP.Parser, new[]{ "BasicInfoVersionYear", "BasicInfoVersionMonth", "BasicInfoVersionDay", "BasicInfoVersionHour", "BasicInfoVersionMinute", "BasicInfoVersionSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_2_BASIC_INFO_VERSION_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_2_BASIC_INFO_VERSION_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_106_INITIAL_EVENT_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_106_INITIAL_EVENT_REP.Parser, new[]{ "HasBoxL", "BoxIdL", "HasBoxR", "BoxIdR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_6_INITIAL_EVENT_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_6_INITIAL_EVENT_RESPONSE.Parser, new[]{ "ReplyCode", "RenameBOXIDL", "RenameBOXIDR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_11_BASIC_INFO_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_11_BASIC_INFO_REP.Parser, new[]{ "TravelBasicDataCount", "SectionDataCount", "AddressDataCount", "ScaleDataCount", "ContrlDataCount", "GuideDataCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_111_BASIC_INFO_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_111_BASIC_INFO_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_13_TAVELLING_DATA_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_13_TAVELLING_DATA_REP.Parser, new[]{ "Resolution", "StartStopSpd", "MaxSpeed", "AccelTime", "SCurveRate", "OriginDir", "OriginSpd", "BeaemSpd", "ManualHSpd", "ManualLSpd", "TeachingSpd", "RotateDir", "EncoderPole", "PositionCompensation", "KeepDistFar", "KeepDistNear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_113_TAVELLING_DATA_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_113_TAVELLING_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP.Parser, new[]{ "Sections" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP.Types.Section), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP.Types.Section.Parser, new[]{ "DriveDir", "AeraSecsor", "GuideDir", "SectionID", "FromAddr", "ToAddr", "ControlTable", "Speed", "Distance", "ChangeAreaSensor1", "ChangeGuideDir1", "ChangeSegNum1", "ChangeAreaSensor2", "ChangeGuideDir2", "ChangeSegNum2", "AtSegment" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_115_SECTION_DATA_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_115_SECTION_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP.Parser, new[]{ "Addresss" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP.Types.Address), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP.Types.Address.Parser, new[]{ "Addr", "Resolution", "Loaction", "BlockRelease", "HIDRelease" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_117_ADDRESS_DATA_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_117_ADDRESS_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_19_SCALE_DATA_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_19_SCALE_DATA_REP.Parser, new[]{ "Resolution", "InposArea", "InposStability", "ScalePulse", "ScaleOffset", "ScaleReset", "ReadDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_119_SCALE_DATA_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_119_SCALE_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_21_CONTROL_DATA_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_21_CONTROL_DATA_REP.Parser, new[]{ "TimeoutT1", "TimeoutT2", "TimeoutT3", "TimeoutT4", "TimeoutT5", "TimeoutT6", "TimeoutT7", "TimeoutT8", "TimeoutBlock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_121_CONTROL_DATA_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_121_CONTROL_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_23_GUIDE_DATA_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_23_GUIDE_DATA_REP.Parser, new[]{ "StartStopSpd", "MaxSpeed", "AccelTime", "SCurveRate", "NormalSpd", "ManualHSpd", "ManualLSpd", "LFLockPos", "LBLockPos", "RFLockPos", "RBLockPos", "ChangeStabilityTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_123_GUIDE_DATA_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_123_GUIDE_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_61_INDIVIDUAL_UPLOAD_REQ), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_61_INDIVIDUAL_UPLOAD_REQ.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_162_GUIDE_DATA_UPLOAD_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_162_GUIDE_DATA_UPLOAD_REP.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_63_INDIVIDUAL_CHANGE_REQ), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_63_INDIVIDUAL_CHANGE_REQ.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_31_TRANS_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_31_TRANS_REQUEST.Parser, new[]{ "CmdID", "ActType", "LoadAdr", "ToAdr", "LoadPortID", "UnloadPortID", "SecDistance", "BOXID", "LOTID", "GuideSectionsStartToLoad", "GuideAddressStartToLoad", "GuideSectionsToDestination", "GuideAddressToDestination" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_131_TRANS_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_131_TRANS_RESPONSE.Parser, new[]{ "CmdID", "ActType", "ReplyCode", "NgReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_132_TRANS_COMPLETE_REPORT), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_132_TRANS_COMPLETE_REPORT.Parser, new[]{ "CmdID", "BOXID", "CSTID", "LOTID", "CmpStatus", "CurrentAdrID", "CurrentSecID", "SecDistance", "CmdDistance", "HasBox", "CarBoxID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_32_TRANS_COMPLETE_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_32_TRANS_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST.Parser, new[]{ "ControlType", "CancelSecID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE.Parser, new[]{ "ControlType", "CancelSecID", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_134_TRANS_EVENT_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_134_TRANS_EVENT_REP.Parser, new[]{ "EventType", "CurrentAdrID", "CurrentSecID", "LeftGuideLockStatus", "RightGuideLockStatus", "SecDistance", "Speed", "Angle", "XAxis", "YAxis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_35_CARRIER_ID_RENAME_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_35_CARRIER_ID_RENAME_REQUEST.Parser, new[]{ "OLDBOXID", "NEWBOXID", "OLDLOTID", "NEWLOTID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_135_CARRIER_ID_RENAME_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_135_CARRIER_ID_RENAME_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo.Parser, new[]{ "ReserveSectionID", "DriveDirction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_136_TRANS_EVENT_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_136_TRANS_EVENT_REP.Parser, new[]{ "EventType", "ReserveInfos", "RequestBlockID", "RequestHIDID", "BOXID", "LOTID", "ReleaseBlockAdrID", "ReleaseHIDAdrID", "LoadPortID", "UnloadPortID", "CurrentAdrID", "CurrentSecID", "SecDistance", "BCRReadResult", "CmdID", "Location", "IsNeedAvoid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_36_TRANS_EVENT_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_36_TRANS_EVENT_RESPONSE.Parser, new[]{ "IsBlockPass", "IsReserveSuccess", "ReserveInfos", "IsHIDPass", "RenameBOXID", "RenameLOTID", "ReplyActiveType", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_37_TRANS_CANCEL_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_37_TRANS_CANCEL_REQUEST.Parser, new[]{ "CmdID", "ActType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_137_TRANS_CANCEL_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_137_TRANS_CANCEL_RESPONSE.Parser, new[]{ "CmdID", "ActType", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr), global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.GuideInfo), global::com.mirle.AKA.ProtocolFormat.RGVMessage.GuideInfo.Parser, new[]{ "FromTo", "GuideSections", "GuideAddresses", "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_138_GUIDE_INFO_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_138_GUIDE_INFO_REQUEST.Parser, new[]{ "FromToAdrList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_38_GUIDE_INFO_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_38_GUIDE_INFO_RESPONSE.Parser, new[]{ "GuideInfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_39_PAUSE_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_39_PAUSE_REQUEST.Parser, new[]{ "EventType", "PauseType", "ReserveInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_139_PAUSE_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_139_PAUSE_RESPONSE.Parser, new[]{ "EventType", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_41_MODE_CHANGE_REQ), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_41_MODE_CHANGE_REQ.Parser, new[]{ "OperatingVHMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_141_MODE_CHANGE_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_141_MODE_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_43_STATUS_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_43_STATUS_REQUEST.Parser, new[]{ "SystemTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_143_STATUS_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_143_STATUS_RESPONSE.Parser, new[]{ "CurrentAdrID", "CurrentSecID", "ModeStatus", "ActionStatus", "PowerStatus", "ObstacleStatus", "BlockingStatus", "HIDStatus", "PauseStatus", "ErrorStatus", "ReserveStatus", "SecDistance", "ObstDistance", "ObstVehicleID", "StoppedBlockID", "StoppedHIDID", "EarthquakePauseTatus", "SafetyPauseStatus", "ReserveInfos", "DrivingDirection", "Speed", "Angle", "XAxis", "YAxis", "CmdId1", "CmdState1", "CmdId2", "CmdState2", "CmdId3", "CmdState3", "CmdId4", "CmdState4", "HasBoxL", "BoxIdL", "HasBoxR", "BoxIdR", "ShelfStatusL", "ShelfStatusR", "CurrentExcuteCmdId", "WillPassGuideSection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_144_STATUS_CHANGE_REP), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_144_STATUS_CHANGE_REP.Parser, new[]{ "CurrentAdrID", "CurrentSecID", "ModeStatus", "ActionStatus", "PowerStatus", "ObstacleStatus", "BlockingStatus", "HIDStatus", "PauseStatus", "ErrorStatus", "ReserveStatus", "SecDistance", "ObstDistance", "ObstVehicleID", "StoppedBlockID", "StoppedHIDID", "EarthquakePauseTatus", "SafetyPauseStatus", "ReserveInfos", "DrivingDirection", "Speed", "Angle", "XAxis", "YAxis", "CmdId1", "CmdState1", "CmdId2", "CmdState2", "CmdId3", "CmdState3", "CmdId4", "CmdState4", "HasBoxL", "BoxIdL", "HasBoxR", "BoxIdR", "ShelfStatusL", "ShelfStatusR", "CurrentExcuteCmdId", "WillPassGuideSection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_44_STATUS_CHANGE_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_44_STATUS_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_45_POWER_OPE_REQ), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_45_POWER_OPE_REQ.Parser, new[]{ "OperatingPowerMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_145_POWER_OPE_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_145_POWER_OPE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_51_AVOID_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_51_AVOID_REQUEST.Parser, new[]{ "DestinationAdr", "GuideSections", "GuideAddresses", "CmdID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_151_AVOID_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_151_AVOID_RESPONSE.Parser, new[]{ "ReplyCode", "NgReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_152_AVOID_COMPLETE_REPORT), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_152_AVOID_COMPLETE_REPORT.Parser, new[]{ "CmpStatus", "CmdID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_52_AVOID_COMPLETE_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_52_AVOID_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_71_RANGE_TEACHING_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_71_RANGE_TEACHING_REQUEST.Parser, new[]{ "FromAdr", "ToAdr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_171_RANGE_TEACHING_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_171_RANGE_TEACHING_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT.Parser, new[]{ "FromAdr", "ToAdr", "SecDistance", "CompleteCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_174_ADDRESS_TEACH_REPORT), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_174_ADDRESS_TEACH_REPORT.Parser, new[]{ "Addr", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_74_ADDRESS_TEACH_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_74_ADDRESS_TEACH_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_91_ALARM_RESET_REQUEST), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_91_ALARM_RESET_REQUEST.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_191_ALARM_RESET_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_191_ALARM_RESET_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_194_ALARM_REPORT), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_194_ALARM_REPORT.Parser, new[]{ "ErrCode", "ErrStatus", "ErrDescription" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_94_ALARM_RESPONSE), global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_94_ALARM_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.WrapperMessage), global::com.mirle.AKA.ProtocolFormat.RGVMessage.WrapperMessage.Parser, new[]{ "ID", "SeqNum", "HostBasicInfoRep", "HostBasicInfoResp", "BasicInfoVersionRep", "BasicInfoVersionResp", "InitialEventRep", "InitialEventResp", "BasicInfoRep", "BasicInfoResp", "TavellingDataRep", "TavellingDataResp", "SectionDataRep", "SectionDataResp", "AddressDataRep", "AddressDataResp", "ScaleDataRep", "ScaleDataResp", "ControlDataRep", "ControlDataResp", "GuideDataRep", "GuideDataResp", "IndividualUploadReq", "IndividualUploadResp", "GUIDEDataUploadReq", "GUIDEDataUploadResp", "IndividualChangeReq", "IndividualChangeResp", "ModeChangeReq", "ModeChangeResp", "TransReq", "TransResp", "TranCmpRep", "TranCmpResp", "ControlZoneReq", "ControlZoneResp", "CARRIERIDRenameReq", "CARRIERIDRenameResp", "TransCancelReq", "TransCancelResp", "GuideInfoReq", "GuideInfoResp", "PauseReq", "PauseResp", "TransEventRep", "ImpTransEventRep", "ImpTransEventResp", "StatusReq", "StatusReqResp", "StatueChangeRep", "StatusChangeResp", "PowerOpeReq", "PowerOpeResp", "AvoidReq", "AvoidResp", "AvoidCompleteRep", "AvoidCompleteResp", "RangeTeachingReq", "RangeTeachingResp", "RangeTeachingCmpRep", "RangeTeachingCmpResp", "AddressTeachRep", "AddressTeachResp", "AlarmResetReq", "AlarmResetResp", "AlarmRep", "AlarmResp" }, new[]{ "Msg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.SYSTEMPROCESS_INFO), global::com.mirle.AKA.ProtocolFormat.RGVMessage.SYSTEMPROCESS_INFO.Parser, new[]{ "TIME", "SEQ", "LOGLEVEL", "CLASS", "METHOD", "DEVICE", "DATA", "VHID", "CRRID", "TYPE", "LOGID", "THREADID", "LOT", "LEVEL", "XID", "TRXID", "DETAILS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.HOSTLOG_INFO), global::com.mirle.AKA.ProtocolFormat.RGVMessage.HOSTLOG_INFO.Parser, new[]{ "TIME", "EQID", "SENDRECEIVE", "SX", "FY", "DEVICE", "FUNNAME", "MESSAGE" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.AKA.ProtocolFormat.RGVMessage.EQLOG_INFO), global::com.mirle.AKA.ProtocolFormat.RGVMessage.EQLOG_INFO.Parser, new[]{ "TIME", "SENDRECEIVE", "FUNNAME", "SEQNO", "VHID", "OHTCCMDID", "ACTTYPE", "MCSCMDID", "EVENTTYPE", "VHSTATUS", "MESSAGE" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ActiveType {
    [pbr::OriginalName("MOVE")] Move = 0,
    [pbr::OriginalName("LOAD")] Load = 1,
    [pbr::OriginalName("UNLOAD")] Unload = 2,
    [pbr::OriginalName("LOADUNLOAD")] Loadunload = 3,
    [pbr::OriginalName("HOME")] Home = 4,
    [pbr::OriginalName("OVERRIDE")] Override = 5,
    [pbr::OriginalName("MTLHOME")] Mtlhome = 7,
    [pbr::OriginalName("SCAN")] Scan = 8,
    [pbr::OriginalName("MOVETOMTL")] Movetomtl = 10,
    [pbr::OriginalName("SYSTEMOUT")] Systemout = 11,
    [pbr::OriginalName("SYSTEMIN")] Systemin = 12,
    [pbr::OriginalName("TECHINGMOVE")] Techingmove = 13,
    [pbr::OriginalName("ROUND")] Round = 99,
  }

  public enum EventType {
    [pbr::OriginalName("LoadArrivals")] LoadArrivals = 0,
    [pbr::OriginalName("LoadComplete")] LoadComplete = 1,
    [pbr::OriginalName("UnloadArrivals")] UnloadArrivals = 2,
    [pbr::OriginalName("UnloadComplete")] UnloadComplete = 3,
    [pbr::OriginalName("AdrOrMoveArrivals")] AdrOrMoveArrivals = 4,
    [pbr::OriginalName("AdrPass")] AdrPass = 5,
    [pbr::OriginalName("MovePause")] MovePause = 6,
    [pbr::OriginalName("MoveRestart")] MoveRestart = 7,
    [pbr::OriginalName("ReserveReq")] ReserveReq = 8,
    [pbr::OriginalName("BlockReq")] BlockReq = 9,
    [pbr::OriginalName("HIDReq")] Hidreq = 10,
    [pbr::OriginalName("BlockHIDReq")] BlockHidreq = 11,
    [pbr::OriginalName("VHLoading")] Vhloading = 12,
    [pbr::OriginalName("VHUnloading")] Vhunloading = 13,
    [pbr::OriginalName("BCRRead")] Bcrread = 14,
    [pbr::OriginalName("DoubleStorage")] DoubleStorage = 15,
    [pbr::OriginalName("EmptyRetrieval")] EmptyRetrieval = 16,
    [pbr::OriginalName("Scan")] Scan = 17,
    [pbr::OriginalName("CSTTypeMismatch")] CsttypeMismatch = 18,
    [pbr::OriginalName("AvoideReq")] AvoideReq = 19,
    [pbr::OriginalName("BlockRelease")] BlockRelease = 21,
    [pbr::OriginalName("HIDRelease")] Hidrelease = 22,
    [pbr::OriginalName("BlockHIDRelease")] BlockHidrelease = 23,
    [pbr::OriginalName("Initial")] Initial = 31,
  }

  public enum CompleteStatus {
    [pbr::OriginalName("CmpStatusMove")] CmpStatusMove = 0,
    [pbr::OriginalName("CmpStatusLoad")] CmpStatusLoad = 1,
    [pbr::OriginalName("CmpStatusUnload")] CmpStatusUnload = 2,
    [pbr::OriginalName("CmpStatusLoadunload")] CmpStatusLoadunload = 3,
    [pbr::OriginalName("CmpStatusHome")] CmpStatusHome = 4,
    [pbr::OriginalName("CmpStatusOverride")] CmpStatusOverride = 5,
    [pbr::OriginalName("CmpStatusCstIDRenmae")] CmpStatusCstIdrenmae = 6,
    [pbr::OriginalName("CmpStatusMTLHome")] CmpStatusMtlhome = 7,
    [pbr::OriginalName("CmpStatusScan")] CmpStatusScan = 8,
    [pbr::OriginalName("CmpStatusMoveToMTL")] CmpStatusMoveToMtl = 10,
    [pbr::OriginalName("CmpStatusSystemOut")] CmpStatusSystemOut = 11,
    [pbr::OriginalName("CmpStatusSystemIn")] CmpStatusSystemIn = 12,
    [pbr::OriginalName("CmpStatusTechingMove")] CmpStatusTechingMove = 13,
    [pbr::OriginalName("CmpStatusCancel")] CmpStatusCancel = 20,
    [pbr::OriginalName("CmpStatusAbort")] CmpStatusAbort = 21,
    [pbr::OriginalName("CmpStatusVehicleAbort")] CmpStatusVehicleAbort = 22,
    [pbr::OriginalName("CmpStatusIDMisMatch")] CmpStatusIdmisMatch = 23,
    [pbr::OriginalName("CmpStatusIDReadFailed")] CmpStatusIdreadFailed = 24,
    [pbr::OriginalName("CmpStatusIDReadDuplicate")] CmpStatusIdreadDuplicate = 25,
    [pbr::OriginalName("CmpStatusIDDoubleStorage")] CmpStatusIddoubleStorage = 26,
    [pbr::OriginalName("CmpStatusIDEmptyRetrival")] CmpStatusIdemptyRetrival = 27,
    [pbr::OriginalName("CmpStatusIDCSTTypeMismatch")] CmpStatusIdcsttypeMismatch = 28,
    [pbr::OriginalName("CmpStatusInterlockError")] CmpStatusInterlockError = 64,
    [pbr::OriginalName("CmpStatusLongTimeInaction")] CmpStatusLongTimeInaction = 98,
    [pbr::OriginalName("CmpStatusForceFinishByOp")] CmpStatusForceFinishByOp = 99,
  }

  public enum CMDCancelType {
    [pbr::OriginalName("CMD_None")] CmdNone = 0,
    [pbr::OriginalName("CMD_Retry")] CmdRetry = 1,
    [pbr::OriginalName("CMD_Cancel")] CmdCancel = 20,
    [pbr::OriginalName("CMD_Abort")] CmdAbort = 21,
    [pbr::OriginalName("CMD_Cancel_ID_Mismatch")] CmdCancelIdMismatch = 23,
    [pbr::OriginalName("CMD_Cancel_ID_Read_Failed")] CmdCancelIdReadFailed = 24,
    [pbr::OriginalName("CMD_Cancel_ID_Read_Duplicate")] CmdCancelIdReadDuplicate = 25,
    [pbr::OriginalName("CMD_Cancel_ID_Read_ForceFinish")] CmdCancelIdReadForceFinish = 26,
  }

  public enum PauseEvent {
    [pbr::OriginalName("Continue")] Continue = 0,
    [pbr::OriginalName("Pause")] Pause = 1,
  }

  public enum PauseType {
    [pbr::OriginalName("PauseType_None")] None = 0,
    [pbr::OriginalName("PauseType_OHxC")] OhxC = 1,
    [pbr::OriginalName("PauseType_Block")] Block = 2,
    [pbr::OriginalName("PauseType_HID")] Hid = 3,
    [pbr::OriginalName("PauseType_EarthQuake")] EarthQuake = 4,
    [pbr::OriginalName("PauseType_Safety")] Safety = 5,
    [pbr::OriginalName("PauseType_Reserve")] Reserve = 6,
    [pbr::OriginalName("PauseType_ManualBlock")] ManualBlock = 7,
    [pbr::OriginalName("PauseType_ManualHID")] ManualHid = 8,
    [pbr::OriginalName("PauseType_All")] All = 9,
  }

  public enum VhGuideStatus {
    [pbr::OriginalName("Unlock")] Unlock = 0,
    [pbr::OriginalName("Lock")] Lock = 1,
  }

  public enum PassType {
    [pbr::OriginalName("Pass")] Pass = 0,
    [pbr::OriginalName("Block")] Block = 1,
  }

  public enum E_AreaSensorDir {
    [pbr::OriginalName("AreaSensorDir_None")] AreaSensorDirNone = 0,
    [pbr::OriginalName("Straight")] Straight = 1,
    [pbr::OriginalName("Left")] Left = 2,
    [pbr::OriginalName("Right")] Right = 3,
  }

  public enum OperatingVHMode {
    [pbr::OriginalName("Operating_Auto")] OperatingAuto = 0,
    [pbr::OriginalName("Operating_Manual")] OperatingManual = 1,
  }

  public enum ControlType {
    [pbr::OriginalName("Nothing")] Nothing = 0,
    [pbr::OriginalName("ControlType_Block")] Block = 4,
    [pbr::OriginalName("ControlType_HID")] Hid = 5,
    [pbr::OriginalName("ControlType_Reserver")] Reserver = 6,
  }

  public enum DriveDirction {
    [pbr::OriginalName("DriveDir_None")] DriveDirNone = 0,
    [pbr::OriginalName("DriveDir_Forward")] DriveDirForward = 1,
    [pbr::OriginalName("DriveDir_Reverse")] DriveDirReverse = 2,
  }

  public enum ReserveResult {
    [pbr::OriginalName("ReserveResult_Success")] Success = 0,
    [pbr::OriginalName("ReserveResult_Unsuccess")] Unsuccess = 1,
  }

  public enum BCRReadResult {
    [pbr::OriginalName("BCR_Normal")] BcrNormal = 0,
    [pbr::OriginalName("BCR_ReadFail")] BcrReadFail = 1,
    [pbr::OriginalName("BCR_MisMatch")] BcrMisMatch = 2,
  }

  public enum AGVLocation {
    [pbr::OriginalName("AGVLocation_Right")] Right = 0,
    [pbr::OriginalName("AGVLocation_Left")] Left = 1,
    [pbr::OriginalName("AGVLocation_None")] None = 2,
  }

  public enum VHModeStatus {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Initial_Power_OFF")] InitialPowerOff = 1,
    [pbr::OriginalName("Initial_Power_ON")] InitialPowerOn = 2,
    [pbr::OriginalName("Manual")] Manual = 3,
    [pbr::OriginalName("Auto_Remote")] AutoRemote = 4,
    [pbr::OriginalName("Auto_Local")] AutoLocal = 5,
    [pbr::OriginalName("Auto_MTS")] AutoMts = 6,
    [pbr::OriginalName("Auto_MTL")] AutoMtl = 7,
  }

  public enum VHActionStatus {
    [pbr::OriginalName("NoCommand")] NoCommand = 0,
    [pbr::OriginalName("Commanding")] Commanding = 1,
    [pbr::OriginalName("Teaching")] Teaching = 5,
    [pbr::OriginalName("GripperTeaching")] GripperTeaching = 6,
    [pbr::OriginalName("CycleRun")] CycleRun = 7,
  }

  public enum VhPowerStatus {
    [pbr::OriginalName("Power_Off")] PowerOff = 0,
    [pbr::OriginalName("Power_On")] PowerOn = 1,
  }

  public enum VhLoadCSTStatus {
    [pbr::OriginalName("NotExist")] NotExist = 0,
    [pbr::OriginalName("Exist")] Exist = 1,
  }

  public enum VhStopSingle {
    [pbr::OriginalName("StopSingle_Off")] StopSingleOff = 0,
    [pbr::OriginalName("StopSingle_On")] StopSingleOn = 1,
  }

  public enum CommandState {
    [pbr::OriginalName("CommandState_None")] None = 0,
    [pbr::OriginalName("CommandState_LoadEnroute")] LoadEnroute = 1,
    [pbr::OriginalName("CommandState_UnloadEnroute")] UnloadEnroute = 2,
  }

  public enum ShelfStatus {
    [pbr::OriginalName("ShelfStatus_Disable")] Disable = 0,
    [pbr::OriginalName("ShelfStatus_Enable")] Enable = 1,
  }

  public enum OperatingPowerMode {
    [pbr::OriginalName("Operating_Power_Off")] OperatingPowerOff = 0,
    [pbr::OriginalName("Operating_Power_On")] OperatingPowerOn = 1,
  }

  public enum ErrorStatus {
    [pbr::OriginalName("Err_Reset")] ErrReset = 0,
    [pbr::OriginalName("Err_Set")] ErrSet = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  [START messages]
  /// </summary>
  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      seconds_ = other.seconds_;
      nanos_ = other.nanos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 1;
    private long seconds_;
    /// <summary>
    ///  Represents seconds of UTC time since Unix epoch
    ///  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    ///  9999-12-31T23:59:59Z inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    /// <summary>
    ///  Non-negative fractions of a second at nanosecond resolution. Negative
    ///  second values with fractions must still have non-negative nanos values
    ///  that count forward in time. Must be from 0 to 999,999,999
    ///  inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seconds != other.Seconds) return false;
      if (Nanos != other.Nanos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Seconds);
      }
      if (Nanos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nanos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Nanos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nanos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seconds = input.ReadInt64();
            break;
          }
          case 16: {
            Nanos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_1_HOST_BASIC_INFO_VERSION_REP : pb::IMessage<ID_1_HOST_BASIC_INFO_VERSION_REP> {
    private static readonly pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP> _parser = new pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP>(() => new ID_1_HOST_BASIC_INFO_VERSION_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_1_HOST_BASIC_INFO_VERSION_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_1_HOST_BASIC_INFO_VERSION_REP(ID_1_HOST_BASIC_INFO_VERSION_REP other) : this() {
      dataDateTimeYear_ = other.dataDateTimeYear_;
      dataDateTimeMonth_ = other.dataDateTimeMonth_;
      dataDateTimeDay_ = other.dataDateTimeDay_;
      dataDateTimeHour_ = other.dataDateTimeHour_;
      dataDateTimeMinute_ = other.dataDateTimeMinute_;
      dataDateTimeSecond_ = other.dataDateTimeSecond_;
      currentTimeYear_ = other.currentTimeYear_;
      currentTimeMonth_ = other.currentTimeMonth_;
      currentTimeDay_ = other.currentTimeDay_;
      currentTimeHour_ = other.currentTimeHour_;
      currentTimeMinute_ = other.currentTimeMinute_;
      currentTimeSecond_ = other.currentTimeSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_1_HOST_BASIC_INFO_VERSION_REP Clone() {
      return new ID_1_HOST_BASIC_INFO_VERSION_REP(this);
    }

    /// <summary>Field number for the "DataDateTime_Year" field.</summary>
    public const int DataDateTimeYearFieldNumber = 1;
    private string dataDateTimeYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeYear {
      get { return dataDateTimeYear_; }
      set {
        dataDateTimeYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Month" field.</summary>
    public const int DataDateTimeMonthFieldNumber = 2;
    private string dataDateTimeMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeMonth {
      get { return dataDateTimeMonth_; }
      set {
        dataDateTimeMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Day" field.</summary>
    public const int DataDateTimeDayFieldNumber = 3;
    private string dataDateTimeDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeDay {
      get { return dataDateTimeDay_; }
      set {
        dataDateTimeDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Hour" field.</summary>
    public const int DataDateTimeHourFieldNumber = 4;
    private string dataDateTimeHour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeHour {
      get { return dataDateTimeHour_; }
      set {
        dataDateTimeHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Minute" field.</summary>
    public const int DataDateTimeMinuteFieldNumber = 5;
    private string dataDateTimeMinute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeMinute {
      get { return dataDateTimeMinute_; }
      set {
        dataDateTimeMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Second" field.</summary>
    public const int DataDateTimeSecondFieldNumber = 6;
    private string dataDateTimeSecond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeSecond {
      get { return dataDateTimeSecond_; }
      set {
        dataDateTimeSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Year" field.</summary>
    public const int CurrentTimeYearFieldNumber = 7;
    private string currentTimeYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeYear {
      get { return currentTimeYear_; }
      set {
        currentTimeYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Month" field.</summary>
    public const int CurrentTimeMonthFieldNumber = 8;
    private string currentTimeMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeMonth {
      get { return currentTimeMonth_; }
      set {
        currentTimeMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Day" field.</summary>
    public const int CurrentTimeDayFieldNumber = 9;
    private string currentTimeDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeDay {
      get { return currentTimeDay_; }
      set {
        currentTimeDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Hour" field.</summary>
    public const int CurrentTimeHourFieldNumber = 10;
    private string currentTimeHour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeHour {
      get { return currentTimeHour_; }
      set {
        currentTimeHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Minute" field.</summary>
    public const int CurrentTimeMinuteFieldNumber = 11;
    private string currentTimeMinute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeMinute {
      get { return currentTimeMinute_; }
      set {
        currentTimeMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Second" field.</summary>
    public const int CurrentTimeSecondFieldNumber = 12;
    private string currentTimeSecond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeSecond {
      get { return currentTimeSecond_; }
      set {
        currentTimeSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_1_HOST_BASIC_INFO_VERSION_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_1_HOST_BASIC_INFO_VERSION_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataDateTimeYear != other.DataDateTimeYear) return false;
      if (DataDateTimeMonth != other.DataDateTimeMonth) return false;
      if (DataDateTimeDay != other.DataDateTimeDay) return false;
      if (DataDateTimeHour != other.DataDateTimeHour) return false;
      if (DataDateTimeMinute != other.DataDateTimeMinute) return false;
      if (DataDateTimeSecond != other.DataDateTimeSecond) return false;
      if (CurrentTimeYear != other.CurrentTimeYear) return false;
      if (CurrentTimeMonth != other.CurrentTimeMonth) return false;
      if (CurrentTimeDay != other.CurrentTimeDay) return false;
      if (CurrentTimeHour != other.CurrentTimeHour) return false;
      if (CurrentTimeMinute != other.CurrentTimeMinute) return false;
      if (CurrentTimeSecond != other.CurrentTimeSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataDateTimeYear.Length != 0) hash ^= DataDateTimeYear.GetHashCode();
      if (DataDateTimeMonth.Length != 0) hash ^= DataDateTimeMonth.GetHashCode();
      if (DataDateTimeDay.Length != 0) hash ^= DataDateTimeDay.GetHashCode();
      if (DataDateTimeHour.Length != 0) hash ^= DataDateTimeHour.GetHashCode();
      if (DataDateTimeMinute.Length != 0) hash ^= DataDateTimeMinute.GetHashCode();
      if (DataDateTimeSecond.Length != 0) hash ^= DataDateTimeSecond.GetHashCode();
      if (CurrentTimeYear.Length != 0) hash ^= CurrentTimeYear.GetHashCode();
      if (CurrentTimeMonth.Length != 0) hash ^= CurrentTimeMonth.GetHashCode();
      if (CurrentTimeDay.Length != 0) hash ^= CurrentTimeDay.GetHashCode();
      if (CurrentTimeHour.Length != 0) hash ^= CurrentTimeHour.GetHashCode();
      if (CurrentTimeMinute.Length != 0) hash ^= CurrentTimeMinute.GetHashCode();
      if (CurrentTimeSecond.Length != 0) hash ^= CurrentTimeSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataDateTimeYear.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DataDateTimeYear);
      }
      if (DataDateTimeMonth.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataDateTimeMonth);
      }
      if (DataDateTimeDay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataDateTimeDay);
      }
      if (DataDateTimeHour.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DataDateTimeHour);
      }
      if (DataDateTimeMinute.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DataDateTimeMinute);
      }
      if (DataDateTimeSecond.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DataDateTimeSecond);
      }
      if (CurrentTimeYear.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CurrentTimeYear);
      }
      if (CurrentTimeMonth.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CurrentTimeMonth);
      }
      if (CurrentTimeDay.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CurrentTimeDay);
      }
      if (CurrentTimeHour.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CurrentTimeHour);
      }
      if (CurrentTimeMinute.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CurrentTimeMinute);
      }
      if (CurrentTimeSecond.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CurrentTimeSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataDateTimeYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeYear);
      }
      if (DataDateTimeMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeMonth);
      }
      if (DataDateTimeDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeDay);
      }
      if (DataDateTimeHour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeHour);
      }
      if (DataDateTimeMinute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeMinute);
      }
      if (DataDateTimeSecond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeSecond);
      }
      if (CurrentTimeYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeYear);
      }
      if (CurrentTimeMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeMonth);
      }
      if (CurrentTimeDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeDay);
      }
      if (CurrentTimeHour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeHour);
      }
      if (CurrentTimeMinute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeMinute);
      }
      if (CurrentTimeSecond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_1_HOST_BASIC_INFO_VERSION_REP other) {
      if (other == null) {
        return;
      }
      if (other.DataDateTimeYear.Length != 0) {
        DataDateTimeYear = other.DataDateTimeYear;
      }
      if (other.DataDateTimeMonth.Length != 0) {
        DataDateTimeMonth = other.DataDateTimeMonth;
      }
      if (other.DataDateTimeDay.Length != 0) {
        DataDateTimeDay = other.DataDateTimeDay;
      }
      if (other.DataDateTimeHour.Length != 0) {
        DataDateTimeHour = other.DataDateTimeHour;
      }
      if (other.DataDateTimeMinute.Length != 0) {
        DataDateTimeMinute = other.DataDateTimeMinute;
      }
      if (other.DataDateTimeSecond.Length != 0) {
        DataDateTimeSecond = other.DataDateTimeSecond;
      }
      if (other.CurrentTimeYear.Length != 0) {
        CurrentTimeYear = other.CurrentTimeYear;
      }
      if (other.CurrentTimeMonth.Length != 0) {
        CurrentTimeMonth = other.CurrentTimeMonth;
      }
      if (other.CurrentTimeDay.Length != 0) {
        CurrentTimeDay = other.CurrentTimeDay;
      }
      if (other.CurrentTimeHour.Length != 0) {
        CurrentTimeHour = other.CurrentTimeHour;
      }
      if (other.CurrentTimeMinute.Length != 0) {
        CurrentTimeMinute = other.CurrentTimeMinute;
      }
      if (other.CurrentTimeSecond.Length != 0) {
        CurrentTimeSecond = other.CurrentTimeSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DataDateTimeYear = input.ReadString();
            break;
          }
          case 18: {
            DataDateTimeMonth = input.ReadString();
            break;
          }
          case 26: {
            DataDateTimeDay = input.ReadString();
            break;
          }
          case 34: {
            DataDateTimeHour = input.ReadString();
            break;
          }
          case 42: {
            DataDateTimeMinute = input.ReadString();
            break;
          }
          case 50: {
            DataDateTimeSecond = input.ReadString();
            break;
          }
          case 58: {
            CurrentTimeYear = input.ReadString();
            break;
          }
          case 66: {
            CurrentTimeMonth = input.ReadString();
            break;
          }
          case 74: {
            CurrentTimeDay = input.ReadString();
            break;
          }
          case 82: {
            CurrentTimeHour = input.ReadString();
            break;
          }
          case 90: {
            CurrentTimeMinute = input.ReadString();
            break;
          }
          case 98: {
            CurrentTimeSecond = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_101_HOST_BASIC_INFO_VERSION_RESPONSE : pb::IMessage<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> {
    private static readonly pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> _parser = new pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE>(() => new ID_101_HOST_BASIC_INFO_VERSION_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE Clone() {
      return new ID_101_HOST_BASIC_INFO_VERSION_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_101_HOST_BASIC_INFO_VERSION_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_102_BASIC_INFO_VERSION_REP : pb::IMessage<ID_102_BASIC_INFO_VERSION_REP> {
    private static readonly pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP> _parser = new pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP>(() => new ID_102_BASIC_INFO_VERSION_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_102_BASIC_INFO_VERSION_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_102_BASIC_INFO_VERSION_REP(ID_102_BASIC_INFO_VERSION_REP other) : this() {
      basicInfoVersionYear_ = other.basicInfoVersionYear_;
      basicInfoVersionMonth_ = other.basicInfoVersionMonth_;
      basicInfoVersionDay_ = other.basicInfoVersionDay_;
      basicInfoVersionHour_ = other.basicInfoVersionHour_;
      basicInfoVersionMinute_ = other.basicInfoVersionMinute_;
      basicInfoVersionSecond_ = other.basicInfoVersionSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_102_BASIC_INFO_VERSION_REP Clone() {
      return new ID_102_BASIC_INFO_VERSION_REP(this);
    }

    /// <summary>Field number for the "BasicInfoVersion_Year" field.</summary>
    public const int BasicInfoVersionYearFieldNumber = 1;
    private string basicInfoVersionYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionYear {
      get { return basicInfoVersionYear_; }
      set {
        basicInfoVersionYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Month" field.</summary>
    public const int BasicInfoVersionMonthFieldNumber = 2;
    private string basicInfoVersionMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionMonth {
      get { return basicInfoVersionMonth_; }
      set {
        basicInfoVersionMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Day" field.</summary>
    public const int BasicInfoVersionDayFieldNumber = 3;
    private string basicInfoVersionDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionDay {
      get { return basicInfoVersionDay_; }
      set {
        basicInfoVersionDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Hour" field.</summary>
    public const int BasicInfoVersionHourFieldNumber = 4;
    private string basicInfoVersionHour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionHour {
      get { return basicInfoVersionHour_; }
      set {
        basicInfoVersionHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Minute" field.</summary>
    public const int BasicInfoVersionMinuteFieldNumber = 5;
    private string basicInfoVersionMinute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionMinute {
      get { return basicInfoVersionMinute_; }
      set {
        basicInfoVersionMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Second" field.</summary>
    public const int BasicInfoVersionSecondFieldNumber = 6;
    private string basicInfoVersionSecond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionSecond {
      get { return basicInfoVersionSecond_; }
      set {
        basicInfoVersionSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_102_BASIC_INFO_VERSION_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_102_BASIC_INFO_VERSION_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BasicInfoVersionYear != other.BasicInfoVersionYear) return false;
      if (BasicInfoVersionMonth != other.BasicInfoVersionMonth) return false;
      if (BasicInfoVersionDay != other.BasicInfoVersionDay) return false;
      if (BasicInfoVersionHour != other.BasicInfoVersionHour) return false;
      if (BasicInfoVersionMinute != other.BasicInfoVersionMinute) return false;
      if (BasicInfoVersionSecond != other.BasicInfoVersionSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BasicInfoVersionYear.Length != 0) hash ^= BasicInfoVersionYear.GetHashCode();
      if (BasicInfoVersionMonth.Length != 0) hash ^= BasicInfoVersionMonth.GetHashCode();
      if (BasicInfoVersionDay.Length != 0) hash ^= BasicInfoVersionDay.GetHashCode();
      if (BasicInfoVersionHour.Length != 0) hash ^= BasicInfoVersionHour.GetHashCode();
      if (BasicInfoVersionMinute.Length != 0) hash ^= BasicInfoVersionMinute.GetHashCode();
      if (BasicInfoVersionSecond.Length != 0) hash ^= BasicInfoVersionSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BasicInfoVersionYear.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BasicInfoVersionYear);
      }
      if (BasicInfoVersionMonth.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BasicInfoVersionMonth);
      }
      if (BasicInfoVersionDay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BasicInfoVersionDay);
      }
      if (BasicInfoVersionHour.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BasicInfoVersionHour);
      }
      if (BasicInfoVersionMinute.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BasicInfoVersionMinute);
      }
      if (BasicInfoVersionSecond.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BasicInfoVersionSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BasicInfoVersionYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionYear);
      }
      if (BasicInfoVersionMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionMonth);
      }
      if (BasicInfoVersionDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionDay);
      }
      if (BasicInfoVersionHour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionHour);
      }
      if (BasicInfoVersionMinute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionMinute);
      }
      if (BasicInfoVersionSecond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_102_BASIC_INFO_VERSION_REP other) {
      if (other == null) {
        return;
      }
      if (other.BasicInfoVersionYear.Length != 0) {
        BasicInfoVersionYear = other.BasicInfoVersionYear;
      }
      if (other.BasicInfoVersionMonth.Length != 0) {
        BasicInfoVersionMonth = other.BasicInfoVersionMonth;
      }
      if (other.BasicInfoVersionDay.Length != 0) {
        BasicInfoVersionDay = other.BasicInfoVersionDay;
      }
      if (other.BasicInfoVersionHour.Length != 0) {
        BasicInfoVersionHour = other.BasicInfoVersionHour;
      }
      if (other.BasicInfoVersionMinute.Length != 0) {
        BasicInfoVersionMinute = other.BasicInfoVersionMinute;
      }
      if (other.BasicInfoVersionSecond.Length != 0) {
        BasicInfoVersionSecond = other.BasicInfoVersionSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BasicInfoVersionYear = input.ReadString();
            break;
          }
          case 18: {
            BasicInfoVersionMonth = input.ReadString();
            break;
          }
          case 26: {
            BasicInfoVersionDay = input.ReadString();
            break;
          }
          case 34: {
            BasicInfoVersionHour = input.ReadString();
            break;
          }
          case 42: {
            BasicInfoVersionMinute = input.ReadString();
            break;
          }
          case 50: {
            BasicInfoVersionSecond = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_2_BASIC_INFO_VERSION_RESPONSE : pb::IMessage<ID_2_BASIC_INFO_VERSION_RESPONSE> {
    private static readonly pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE> _parser = new pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE>(() => new ID_2_BASIC_INFO_VERSION_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_2_BASIC_INFO_VERSION_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_2_BASIC_INFO_VERSION_RESPONSE(ID_2_BASIC_INFO_VERSION_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_2_BASIC_INFO_VERSION_RESPONSE Clone() {
      return new ID_2_BASIC_INFO_VERSION_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_2_BASIC_INFO_VERSION_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_2_BASIC_INFO_VERSION_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_2_BASIC_INFO_VERSION_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_106_INITIAL_EVENT_REP : pb::IMessage<ID_106_INITIAL_EVENT_REP> {
    private static readonly pb::MessageParser<ID_106_INITIAL_EVENT_REP> _parser = new pb::MessageParser<ID_106_INITIAL_EVENT_REP>(() => new ID_106_INITIAL_EVENT_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_106_INITIAL_EVENT_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_106_INITIAL_EVENT_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_106_INITIAL_EVENT_REP(ID_106_INITIAL_EVENT_REP other) : this() {
      hasBoxL_ = other.hasBoxL_;
      boxIdL_ = other.boxIdL_;
      hasBoxR_ = other.hasBoxR_;
      boxIdR_ = other.boxIdR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_106_INITIAL_EVENT_REP Clone() {
      return new ID_106_INITIAL_EVENT_REP(this);
    }

    /// <summary>Field number for the "HasBox_L" field.</summary>
    public const int HasBoxLFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus hasBoxL_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus HasBoxL {
      get { return hasBoxL_; }
      set {
        hasBoxL_ = value;
      }
    }

    /// <summary>Field number for the "BoxIdL" field.</summary>
    public const int BoxIdLFieldNumber = 2;
    private string boxIdL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxIdL {
      get { return boxIdL_; }
      set {
        boxIdL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasBox_R" field.</summary>
    public const int HasBoxRFieldNumber = 3;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus hasBoxR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus HasBoxR {
      get { return hasBoxR_; }
      set {
        hasBoxR_ = value;
      }
    }

    /// <summary>Field number for the "BoxIdR" field.</summary>
    public const int BoxIdRFieldNumber = 4;
    private string boxIdR_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxIdR {
      get { return boxIdR_; }
      set {
        boxIdR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_106_INITIAL_EVENT_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_106_INITIAL_EVENT_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HasBoxL != other.HasBoxL) return false;
      if (BoxIdL != other.BoxIdL) return false;
      if (HasBoxR != other.HasBoxR) return false;
      if (BoxIdR != other.BoxIdR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBoxL != 0) hash ^= HasBoxL.GetHashCode();
      if (BoxIdL.Length != 0) hash ^= BoxIdL.GetHashCode();
      if (HasBoxR != 0) hash ^= HasBoxR.GetHashCode();
      if (BoxIdR.Length != 0) hash ^= BoxIdR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBoxL != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HasBoxL);
      }
      if (BoxIdL.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BoxIdL);
      }
      if (HasBoxR != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) HasBoxR);
      }
      if (BoxIdR.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BoxIdR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBoxL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HasBoxL);
      }
      if (BoxIdL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoxIdL);
      }
      if (HasBoxR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HasBoxR);
      }
      if (BoxIdR.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoxIdR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_106_INITIAL_EVENT_REP other) {
      if (other == null) {
        return;
      }
      if (other.HasBoxL != 0) {
        HasBoxL = other.HasBoxL;
      }
      if (other.BoxIdL.Length != 0) {
        BoxIdL = other.BoxIdL;
      }
      if (other.HasBoxR != 0) {
        HasBoxR = other.HasBoxR;
      }
      if (other.BoxIdR.Length != 0) {
        BoxIdR = other.BoxIdR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            hasBoxL_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 18: {
            BoxIdL = input.ReadString();
            break;
          }
          case 24: {
            hasBoxR_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 34: {
            BoxIdR = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_6_INITIAL_EVENT_RESPONSE : pb::IMessage<ID_6_INITIAL_EVENT_RESPONSE> {
    private static readonly pb::MessageParser<ID_6_INITIAL_EVENT_RESPONSE> _parser = new pb::MessageParser<ID_6_INITIAL_EVENT_RESPONSE>(() => new ID_6_INITIAL_EVENT_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_6_INITIAL_EVENT_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_6_INITIAL_EVENT_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_6_INITIAL_EVENT_RESPONSE(ID_6_INITIAL_EVENT_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
      renameBOXIDL_ = other.renameBOXIDL_;
      renameBOXIDR_ = other.renameBOXIDR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_6_INITIAL_EVENT_RESPONSE Clone() {
      return new ID_6_INITIAL_EVENT_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    /// <summary>Field number for the "RenameBOXID_L" field.</summary>
    public const int RenameBOXIDLFieldNumber = 2;
    private string renameBOXIDL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RenameBOXIDL {
      get { return renameBOXIDL_; }
      set {
        renameBOXIDL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RenameBOXID_R" field.</summary>
    public const int RenameBOXIDRFieldNumber = 3;
    private string renameBOXIDR_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RenameBOXIDR {
      get { return renameBOXIDR_; }
      set {
        renameBOXIDR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_6_INITIAL_EVENT_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_6_INITIAL_EVENT_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      if (RenameBOXIDL != other.RenameBOXIDL) return false;
      if (RenameBOXIDR != other.RenameBOXIDR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      if (RenameBOXIDL.Length != 0) hash ^= RenameBOXIDL.GetHashCode();
      if (RenameBOXIDR.Length != 0) hash ^= RenameBOXIDR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
      if (RenameBOXIDL.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RenameBOXIDL);
      }
      if (RenameBOXIDR.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RenameBOXIDR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      if (RenameBOXIDL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenameBOXIDL);
      }
      if (RenameBOXIDR.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenameBOXIDR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_6_INITIAL_EVENT_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
      if (other.RenameBOXIDL.Length != 0) {
        RenameBOXIDL = other.RenameBOXIDL;
      }
      if (other.RenameBOXIDR.Length != 0) {
        RenameBOXIDR = other.RenameBOXIDR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
          case 18: {
            RenameBOXIDL = input.ReadString();
            break;
          }
          case 26: {
            RenameBOXIDR = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_11_BASIC_INFO_REP : pb::IMessage<ID_11_BASIC_INFO_REP> {
    private static readonly pb::MessageParser<ID_11_BASIC_INFO_REP> _parser = new pb::MessageParser<ID_11_BASIC_INFO_REP>(() => new ID_11_BASIC_INFO_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_11_BASIC_INFO_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_11_BASIC_INFO_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_11_BASIC_INFO_REP(ID_11_BASIC_INFO_REP other) : this() {
      travelBasicDataCount_ = other.travelBasicDataCount_;
      sectionDataCount_ = other.sectionDataCount_;
      addressDataCount_ = other.addressDataCount_;
      scaleDataCount_ = other.scaleDataCount_;
      contrlDataCount_ = other.contrlDataCount_;
      guideDataCount_ = other.guideDataCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_11_BASIC_INFO_REP Clone() {
      return new ID_11_BASIC_INFO_REP(this);
    }

    /// <summary>Field number for the "TravelBasicDataCount" field.</summary>
    public const int TravelBasicDataCountFieldNumber = 1;
    private int travelBasicDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TravelBasicDataCount {
      get { return travelBasicDataCount_; }
      set {
        travelBasicDataCount_ = value;
      }
    }

    /// <summary>Field number for the "SectionDataCount" field.</summary>
    public const int SectionDataCountFieldNumber = 2;
    private int sectionDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionDataCount {
      get { return sectionDataCount_; }
      set {
        sectionDataCount_ = value;
      }
    }

    /// <summary>Field number for the "AddressDataCount" field.</summary>
    public const int AddressDataCountFieldNumber = 3;
    private int addressDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressDataCount {
      get { return addressDataCount_; }
      set {
        addressDataCount_ = value;
      }
    }

    /// <summary>Field number for the "ScaleDataCount" field.</summary>
    public const int ScaleDataCountFieldNumber = 4;
    private int scaleDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaleDataCount {
      get { return scaleDataCount_; }
      set {
        scaleDataCount_ = value;
      }
    }

    /// <summary>Field number for the "ContrlDataCount" field.</summary>
    public const int ContrlDataCountFieldNumber = 5;
    private int contrlDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContrlDataCount {
      get { return contrlDataCount_; }
      set {
        contrlDataCount_ = value;
      }
    }

    /// <summary>Field number for the "GuideDataCount" field.</summary>
    public const int GuideDataCountFieldNumber = 6;
    private int guideDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuideDataCount {
      get { return guideDataCount_; }
      set {
        guideDataCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_11_BASIC_INFO_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_11_BASIC_INFO_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TravelBasicDataCount != other.TravelBasicDataCount) return false;
      if (SectionDataCount != other.SectionDataCount) return false;
      if (AddressDataCount != other.AddressDataCount) return false;
      if (ScaleDataCount != other.ScaleDataCount) return false;
      if (ContrlDataCount != other.ContrlDataCount) return false;
      if (GuideDataCount != other.GuideDataCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TravelBasicDataCount != 0) hash ^= TravelBasicDataCount.GetHashCode();
      if (SectionDataCount != 0) hash ^= SectionDataCount.GetHashCode();
      if (AddressDataCount != 0) hash ^= AddressDataCount.GetHashCode();
      if (ScaleDataCount != 0) hash ^= ScaleDataCount.GetHashCode();
      if (ContrlDataCount != 0) hash ^= ContrlDataCount.GetHashCode();
      if (GuideDataCount != 0) hash ^= GuideDataCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TravelBasicDataCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TravelBasicDataCount);
      }
      if (SectionDataCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SectionDataCount);
      }
      if (AddressDataCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AddressDataCount);
      }
      if (ScaleDataCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ScaleDataCount);
      }
      if (ContrlDataCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ContrlDataCount);
      }
      if (GuideDataCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GuideDataCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TravelBasicDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TravelBasicDataCount);
      }
      if (SectionDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionDataCount);
      }
      if (AddressDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressDataCount);
      }
      if (ScaleDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScaleDataCount);
      }
      if (ContrlDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContrlDataCount);
      }
      if (GuideDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideDataCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_11_BASIC_INFO_REP other) {
      if (other == null) {
        return;
      }
      if (other.TravelBasicDataCount != 0) {
        TravelBasicDataCount = other.TravelBasicDataCount;
      }
      if (other.SectionDataCount != 0) {
        SectionDataCount = other.SectionDataCount;
      }
      if (other.AddressDataCount != 0) {
        AddressDataCount = other.AddressDataCount;
      }
      if (other.ScaleDataCount != 0) {
        ScaleDataCount = other.ScaleDataCount;
      }
      if (other.ContrlDataCount != 0) {
        ContrlDataCount = other.ContrlDataCount;
      }
      if (other.GuideDataCount != 0) {
        GuideDataCount = other.GuideDataCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TravelBasicDataCount = input.ReadInt32();
            break;
          }
          case 16: {
            SectionDataCount = input.ReadInt32();
            break;
          }
          case 24: {
            AddressDataCount = input.ReadInt32();
            break;
          }
          case 32: {
            ScaleDataCount = input.ReadInt32();
            break;
          }
          case 40: {
            ContrlDataCount = input.ReadInt32();
            break;
          }
          case 48: {
            GuideDataCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_111_BASIC_INFO_RESPONSE : pb::IMessage<ID_111_BASIC_INFO_RESPONSE> {
    private static readonly pb::MessageParser<ID_111_BASIC_INFO_RESPONSE> _parser = new pb::MessageParser<ID_111_BASIC_INFO_RESPONSE>(() => new ID_111_BASIC_INFO_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_111_BASIC_INFO_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_111_BASIC_INFO_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_111_BASIC_INFO_RESPONSE(ID_111_BASIC_INFO_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_111_BASIC_INFO_RESPONSE Clone() {
      return new ID_111_BASIC_INFO_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_111_BASIC_INFO_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_111_BASIC_INFO_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_111_BASIC_INFO_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_13_TAVELLING_DATA_REP : pb::IMessage<ID_13_TAVELLING_DATA_REP> {
    private static readonly pb::MessageParser<ID_13_TAVELLING_DATA_REP> _parser = new pb::MessageParser<ID_13_TAVELLING_DATA_REP>(() => new ID_13_TAVELLING_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_13_TAVELLING_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_13_TAVELLING_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_13_TAVELLING_DATA_REP(ID_13_TAVELLING_DATA_REP other) : this() {
      resolution_ = other.resolution_;
      startStopSpd_ = other.startStopSpd_;
      maxSpeed_ = other.maxSpeed_;
      accelTime_ = other.accelTime_;
      sCurveRate_ = other.sCurveRate_;
      originDir_ = other.originDir_;
      originSpd_ = other.originSpd_;
      beaemSpd_ = other.beaemSpd_;
      manualHSpd_ = other.manualHSpd_;
      manualLSpd_ = other.manualLSpd_;
      teachingSpd_ = other.teachingSpd_;
      rotateDir_ = other.rotateDir_;
      encoderPole_ = other.encoderPole_;
      positionCompensation_ = other.positionCompensation_;
      keepDistFar_ = other.keepDistFar_;
      keepDistNear_ = other.keepDistNear_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_13_TAVELLING_DATA_REP Clone() {
      return new ID_13_TAVELLING_DATA_REP(this);
    }

    /// <summary>Field number for the "Resolution" field.</summary>
    public const int ResolutionFieldNumber = 1;
    private uint resolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "StartStopSpd" field.</summary>
    public const int StartStopSpdFieldNumber = 2;
    private uint startStopSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartStopSpd {
      get { return startStopSpd_; }
      set {
        startStopSpd_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 3;
    private uint maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AccelTime" field.</summary>
    public const int AccelTimeFieldNumber = 4;
    private uint accelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccelTime {
      get { return accelTime_; }
      set {
        accelTime_ = value;
      }
    }

    /// <summary>Field number for the "SCurveRate" field.</summary>
    public const int SCurveRateFieldNumber = 5;
    private int sCurveRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SCurveRate {
      get { return sCurveRate_; }
      set {
        sCurveRate_ = value;
      }
    }

    /// <summary>Field number for the "OriginDir" field.</summary>
    public const int OriginDirFieldNumber = 6;
    private int originDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginDir {
      get { return originDir_; }
      set {
        originDir_ = value;
      }
    }

    /// <summary>Field number for the "OriginSpd" field.</summary>
    public const int OriginSpdFieldNumber = 7;
    private uint originSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginSpd {
      get { return originSpd_; }
      set {
        originSpd_ = value;
      }
    }

    /// <summary>Field number for the "BeaemSpd" field.</summary>
    public const int BeaemSpdFieldNumber = 8;
    private uint beaemSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeaemSpd {
      get { return beaemSpd_; }
      set {
        beaemSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualHSpd" field.</summary>
    public const int ManualHSpdFieldNumber = 9;
    private uint manualHSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualHSpd {
      get { return manualHSpd_; }
      set {
        manualHSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualLSpd" field.</summary>
    public const int ManualLSpdFieldNumber = 10;
    private uint manualLSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualLSpd {
      get { return manualLSpd_; }
      set {
        manualLSpd_ = value;
      }
    }

    /// <summary>Field number for the "TeachingSpd" field.</summary>
    public const int TeachingSpdFieldNumber = 11;
    private uint teachingSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeachingSpd {
      get { return teachingSpd_; }
      set {
        teachingSpd_ = value;
      }
    }

    /// <summary>Field number for the "RotateDir" field.</summary>
    public const int RotateDirFieldNumber = 12;
    private int rotateDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotateDir {
      get { return rotateDir_; }
      set {
        rotateDir_ = value;
      }
    }

    /// <summary>Field number for the "EncoderPole" field.</summary>
    public const int EncoderPoleFieldNumber = 13;
    private int encoderPole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncoderPole {
      get { return encoderPole_; }
      set {
        encoderPole_ = value;
      }
    }

    /// <summary>Field number for the "PositionCompensation" field.</summary>
    public const int PositionCompensationFieldNumber = 14;
    private uint positionCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PositionCompensation {
      get { return positionCompensation_; }
      set {
        positionCompensation_ = value;
      }
    }

    /// <summary>Field number for the "KeepDistFar" field.</summary>
    public const int KeepDistFarFieldNumber = 15;
    private uint keepDistFar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeepDistFar {
      get { return keepDistFar_; }
      set {
        keepDistFar_ = value;
      }
    }

    /// <summary>Field number for the "KeepDistNear" field.</summary>
    public const int KeepDistNearFieldNumber = 16;
    private uint keepDistNear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeepDistNear {
      get { return keepDistNear_; }
      set {
        keepDistNear_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_13_TAVELLING_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_13_TAVELLING_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resolution != other.Resolution) return false;
      if (StartStopSpd != other.StartStopSpd) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      if (AccelTime != other.AccelTime) return false;
      if (SCurveRate != other.SCurveRate) return false;
      if (OriginDir != other.OriginDir) return false;
      if (OriginSpd != other.OriginSpd) return false;
      if (BeaemSpd != other.BeaemSpd) return false;
      if (ManualHSpd != other.ManualHSpd) return false;
      if (ManualLSpd != other.ManualLSpd) return false;
      if (TeachingSpd != other.TeachingSpd) return false;
      if (RotateDir != other.RotateDir) return false;
      if (EncoderPole != other.EncoderPole) return false;
      if (PositionCompensation != other.PositionCompensation) return false;
      if (KeepDistFar != other.KeepDistFar) return false;
      if (KeepDistNear != other.KeepDistNear) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resolution != 0) hash ^= Resolution.GetHashCode();
      if (StartStopSpd != 0) hash ^= StartStopSpd.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      if (AccelTime != 0) hash ^= AccelTime.GetHashCode();
      if (SCurveRate != 0) hash ^= SCurveRate.GetHashCode();
      if (OriginDir != 0) hash ^= OriginDir.GetHashCode();
      if (OriginSpd != 0) hash ^= OriginSpd.GetHashCode();
      if (BeaemSpd != 0) hash ^= BeaemSpd.GetHashCode();
      if (ManualHSpd != 0) hash ^= ManualHSpd.GetHashCode();
      if (ManualLSpd != 0) hash ^= ManualLSpd.GetHashCode();
      if (TeachingSpd != 0) hash ^= TeachingSpd.GetHashCode();
      if (RotateDir != 0) hash ^= RotateDir.GetHashCode();
      if (EncoderPole != 0) hash ^= EncoderPole.GetHashCode();
      if (PositionCompensation != 0) hash ^= PositionCompensation.GetHashCode();
      if (KeepDistFar != 0) hash ^= KeepDistFar.GetHashCode();
      if (KeepDistNear != 0) hash ^= KeepDistNear.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resolution != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Resolution);
      }
      if (StartStopSpd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxSpeed);
      }
      if (AccelTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AccelTime);
      }
      if (SCurveRate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SCurveRate);
      }
      if (OriginDir != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OriginDir);
      }
      if (OriginSpd != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(OriginSpd);
      }
      if (BeaemSpd != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BeaemSpd);
      }
      if (ManualHSpd != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ManualLSpd);
      }
      if (TeachingSpd != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TeachingSpd);
      }
      if (RotateDir != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RotateDir);
      }
      if (EncoderPole != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EncoderPole);
      }
      if (PositionCompensation != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(PositionCompensation);
      }
      if (KeepDistFar != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(KeepDistFar);
      }
      if (KeepDistNear != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(KeepDistNear);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resolution);
      }
      if (StartStopSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeed);
      }
      if (AccelTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccelTime);
      }
      if (SCurveRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SCurveRate);
      }
      if (OriginDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginDir);
      }
      if (OriginSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginSpd);
      }
      if (BeaemSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeaemSpd);
      }
      if (ManualHSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualLSpd);
      }
      if (TeachingSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeachingSpd);
      }
      if (RotateDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotateDir);
      }
      if (EncoderPole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncoderPole);
      }
      if (PositionCompensation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionCompensation);
      }
      if (KeepDistFar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepDistFar);
      }
      if (KeepDistNear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KeepDistNear);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_13_TAVELLING_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.Resolution != 0) {
        Resolution = other.Resolution;
      }
      if (other.StartStopSpd != 0) {
        StartStopSpd = other.StartStopSpd;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.AccelTime != 0) {
        AccelTime = other.AccelTime;
      }
      if (other.SCurveRate != 0) {
        SCurveRate = other.SCurveRate;
      }
      if (other.OriginDir != 0) {
        OriginDir = other.OriginDir;
      }
      if (other.OriginSpd != 0) {
        OriginSpd = other.OriginSpd;
      }
      if (other.BeaemSpd != 0) {
        BeaemSpd = other.BeaemSpd;
      }
      if (other.ManualHSpd != 0) {
        ManualHSpd = other.ManualHSpd;
      }
      if (other.ManualLSpd != 0) {
        ManualLSpd = other.ManualLSpd;
      }
      if (other.TeachingSpd != 0) {
        TeachingSpd = other.TeachingSpd;
      }
      if (other.RotateDir != 0) {
        RotateDir = other.RotateDir;
      }
      if (other.EncoderPole != 0) {
        EncoderPole = other.EncoderPole;
      }
      if (other.PositionCompensation != 0) {
        PositionCompensation = other.PositionCompensation;
      }
      if (other.KeepDistFar != 0) {
        KeepDistFar = other.KeepDistFar;
      }
      if (other.KeepDistNear != 0) {
        KeepDistNear = other.KeepDistNear;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Resolution = input.ReadUInt32();
            break;
          }
          case 16: {
            StartStopSpd = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxSpeed = input.ReadUInt32();
            break;
          }
          case 32: {
            AccelTime = input.ReadUInt32();
            break;
          }
          case 40: {
            SCurveRate = input.ReadInt32();
            break;
          }
          case 48: {
            OriginDir = input.ReadInt32();
            break;
          }
          case 56: {
            OriginSpd = input.ReadUInt32();
            break;
          }
          case 64: {
            BeaemSpd = input.ReadUInt32();
            break;
          }
          case 72: {
            ManualHSpd = input.ReadUInt32();
            break;
          }
          case 80: {
            ManualLSpd = input.ReadUInt32();
            break;
          }
          case 88: {
            TeachingSpd = input.ReadUInt32();
            break;
          }
          case 96: {
            RotateDir = input.ReadInt32();
            break;
          }
          case 104: {
            EncoderPole = input.ReadInt32();
            break;
          }
          case 112: {
            PositionCompensation = input.ReadUInt32();
            break;
          }
          case 120: {
            KeepDistFar = input.ReadUInt32();
            break;
          }
          case 128: {
            KeepDistNear = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_113_TAVELLING_DATA_RESPONSE : pb::IMessage<ID_113_TAVELLING_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE> _parser = new pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE>(() => new ID_113_TAVELLING_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_113_TAVELLING_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_113_TAVELLING_DATA_RESPONSE(ID_113_TAVELLING_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_113_TAVELLING_DATA_RESPONSE Clone() {
      return new ID_113_TAVELLING_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_113_TAVELLING_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_113_TAVELLING_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_113_TAVELLING_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_15_SECTION_DATA_REP : pb::IMessage<ID_15_SECTION_DATA_REP> {
    private static readonly pb::MessageParser<ID_15_SECTION_DATA_REP> _parser = new pb::MessageParser<ID_15_SECTION_DATA_REP>(() => new ID_15_SECTION_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_15_SECTION_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_15_SECTION_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_15_SECTION_DATA_REP(ID_15_SECTION_DATA_REP other) : this() {
      sections_ = other.sections_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_15_SECTION_DATA_REP Clone() {
      return new ID_15_SECTION_DATA_REP(this);
    }

    /// <summary>Field number for the "Sections" field.</summary>
    public const int SectionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP.Types.Section> _repeated_sections_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP.Types.Section.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP.Types.Section> sections_ = new pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP.Types.Section>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP.Types.Section> Sections {
      get { return sections_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_15_SECTION_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_15_SECTION_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sections_.Equals(other.sections_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sections_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sections_.WriteTo(output, _repeated_sections_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sections_.CalculateSize(_repeated_sections_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_15_SECTION_DATA_REP other) {
      if (other == null) {
        return;
      }
      sections_.Add(other.sections_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sections_.AddEntriesFrom(input, _repeated_sections_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ID_15_SECTION_DATA_REP message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Section : pb::IMessage<Section> {
        private static readonly pb::MessageParser<Section> _parser = new pb::MessageParser<Section>(() => new Section());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Section> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Section() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Section(Section other) : this() {
          driveDir_ = other.driveDir_;
          aeraSecsor_ = other.aeraSecsor_;
          guideDir_ = other.guideDir_;
          sectionID_ = other.sectionID_;
          fromAddr_ = other.fromAddr_;
          toAddr_ = other.toAddr_;
          controlTable_ = other.controlTable_;
          speed_ = other.speed_;
          distance_ = other.distance_;
          changeAreaSensor1_ = other.changeAreaSensor1_;
          changeGuideDir1_ = other.changeGuideDir1_;
          changeSegNum1_ = other.changeSegNum1_;
          changeAreaSensor2_ = other.changeAreaSensor2_;
          changeGuideDir2_ = other.changeGuideDir2_;
          changeSegNum2_ = other.changeSegNum2_;
          atSegment_ = other.atSegment_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Section Clone() {
          return new Section(this);
        }

        /// <summary>Field number for the "DriveDir" field.</summary>
        public const int DriveDirFieldNumber = 1;
        private int driveDir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DriveDir {
          get { return driveDir_; }
          set {
            driveDir_ = value;
          }
        }

        /// <summary>Field number for the "AeraSecsor" field.</summary>
        public const int AeraSecsorFieldNumber = 2;
        private int aeraSecsor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AeraSecsor {
          get { return aeraSecsor_; }
          set {
            aeraSecsor_ = value;
          }
        }

        /// <summary>Field number for the "GuideDir" field.</summary>
        public const int GuideDirFieldNumber = 3;
        private int guideDir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GuideDir {
          get { return guideDir_; }
          set {
            guideDir_ = value;
          }
        }

        /// <summary>Field number for the "SectionID" field.</summary>
        public const int SectionIDFieldNumber = 4;
        private string sectionID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SectionID {
          get { return sectionID_; }
          set {
            sectionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "FromAddr" field.</summary>
        public const int FromAddrFieldNumber = 5;
        private string fromAddr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FromAddr {
          get { return fromAddr_; }
          set {
            fromAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ToAddr" field.</summary>
        public const int ToAddrFieldNumber = 6;
        private string toAddr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ToAddr {
          get { return toAddr_; }
          set {
            toAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ControlTable" field.</summary>
        public const int ControlTableFieldNumber = 7;
        private int controlTable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ControlTable {
          get { return controlTable_; }
          set {
            controlTable_ = value;
          }
        }

        /// <summary>Field number for the "Speed" field.</summary>
        public const int SpeedFieldNumber = 9;
        private uint speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        /// <summary>Field number for the "Distance" field.</summary>
        public const int DistanceFieldNumber = 10;
        private uint distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        /// <summary>Field number for the "ChangeAreaSensor1" field.</summary>
        public const int ChangeAreaSensor1FieldNumber = 11;
        private int changeAreaSensor1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeAreaSensor1 {
          get { return changeAreaSensor1_; }
          set {
            changeAreaSensor1_ = value;
          }
        }

        /// <summary>Field number for the "ChangeGuideDir1" field.</summary>
        public const int ChangeGuideDir1FieldNumber = 12;
        private int changeGuideDir1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeGuideDir1 {
          get { return changeGuideDir1_; }
          set {
            changeGuideDir1_ = value;
          }
        }

        /// <summary>Field number for the "ChangeSegNum1" field.</summary>
        public const int ChangeSegNum1FieldNumber = 13;
        private string changeSegNum1_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChangeSegNum1 {
          get { return changeSegNum1_; }
          set {
            changeSegNum1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ChangeAreaSensor2" field.</summary>
        public const int ChangeAreaSensor2FieldNumber = 14;
        private int changeAreaSensor2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeAreaSensor2 {
          get { return changeAreaSensor2_; }
          set {
            changeAreaSensor2_ = value;
          }
        }

        /// <summary>Field number for the "ChangeGuideDir2" field.</summary>
        public const int ChangeGuideDir2FieldNumber = 15;
        private int changeGuideDir2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeGuideDir2 {
          get { return changeGuideDir2_; }
          set {
            changeGuideDir2_ = value;
          }
        }

        /// <summary>Field number for the "ChangeSegNum2" field.</summary>
        public const int ChangeSegNum2FieldNumber = 16;
        private string changeSegNum2_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChangeSegNum2 {
          get { return changeSegNum2_; }
          set {
            changeSegNum2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "AtSegment" field.</summary>
        public const int AtSegmentFieldNumber = 17;
        private string atSegment_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AtSegment {
          get { return atSegment_; }
          set {
            atSegment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Section);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Section other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DriveDir != other.DriveDir) return false;
          if (AeraSecsor != other.AeraSecsor) return false;
          if (GuideDir != other.GuideDir) return false;
          if (SectionID != other.SectionID) return false;
          if (FromAddr != other.FromAddr) return false;
          if (ToAddr != other.ToAddr) return false;
          if (ControlTable != other.ControlTable) return false;
          if (Speed != other.Speed) return false;
          if (Distance != other.Distance) return false;
          if (ChangeAreaSensor1 != other.ChangeAreaSensor1) return false;
          if (ChangeGuideDir1 != other.ChangeGuideDir1) return false;
          if (ChangeSegNum1 != other.ChangeSegNum1) return false;
          if (ChangeAreaSensor2 != other.ChangeAreaSensor2) return false;
          if (ChangeGuideDir2 != other.ChangeGuideDir2) return false;
          if (ChangeSegNum2 != other.ChangeSegNum2) return false;
          if (AtSegment != other.AtSegment) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DriveDir != 0) hash ^= DriveDir.GetHashCode();
          if (AeraSecsor != 0) hash ^= AeraSecsor.GetHashCode();
          if (GuideDir != 0) hash ^= GuideDir.GetHashCode();
          if (SectionID.Length != 0) hash ^= SectionID.GetHashCode();
          if (FromAddr.Length != 0) hash ^= FromAddr.GetHashCode();
          if (ToAddr.Length != 0) hash ^= ToAddr.GetHashCode();
          if (ControlTable != 0) hash ^= ControlTable.GetHashCode();
          if (Speed != 0) hash ^= Speed.GetHashCode();
          if (Distance != 0) hash ^= Distance.GetHashCode();
          if (ChangeAreaSensor1 != 0) hash ^= ChangeAreaSensor1.GetHashCode();
          if (ChangeGuideDir1 != 0) hash ^= ChangeGuideDir1.GetHashCode();
          if (ChangeSegNum1.Length != 0) hash ^= ChangeSegNum1.GetHashCode();
          if (ChangeAreaSensor2 != 0) hash ^= ChangeAreaSensor2.GetHashCode();
          if (ChangeGuideDir2 != 0) hash ^= ChangeGuideDir2.GetHashCode();
          if (ChangeSegNum2.Length != 0) hash ^= ChangeSegNum2.GetHashCode();
          if (AtSegment.Length != 0) hash ^= AtSegment.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DriveDir != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(DriveDir);
          }
          if (AeraSecsor != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AeraSecsor);
          }
          if (GuideDir != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(GuideDir);
          }
          if (SectionID.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SectionID);
          }
          if (FromAddr.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(FromAddr);
          }
          if (ToAddr.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(ToAddr);
          }
          if (ControlTable != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(ControlTable);
          }
          if (Speed != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(Speed);
          }
          if (Distance != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(Distance);
          }
          if (ChangeAreaSensor1 != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(ChangeAreaSensor1);
          }
          if (ChangeGuideDir1 != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(ChangeGuideDir1);
          }
          if (ChangeSegNum1.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ChangeSegNum1);
          }
          if (ChangeAreaSensor2 != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(ChangeAreaSensor2);
          }
          if (ChangeGuideDir2 != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(ChangeGuideDir2);
          }
          if (ChangeSegNum2.Length != 0) {
            output.WriteRawTag(130, 1);
            output.WriteString(ChangeSegNum2);
          }
          if (AtSegment.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(AtSegment);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DriveDir != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DriveDir);
          }
          if (AeraSecsor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AeraSecsor);
          }
          if (GuideDir != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideDir);
          }
          if (SectionID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SectionID);
          }
          if (FromAddr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAddr);
          }
          if (ToAddr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAddr);
          }
          if (ControlTable != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlTable);
          }
          if (Speed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
          }
          if (Distance != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Distance);
          }
          if (ChangeAreaSensor1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeAreaSensor1);
          }
          if (ChangeGuideDir1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGuideDir1);
          }
          if (ChangeSegNum1.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangeSegNum1);
          }
          if (ChangeAreaSensor2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeAreaSensor2);
          }
          if (ChangeGuideDir2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGuideDir2);
          }
          if (ChangeSegNum2.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ChangeSegNum2);
          }
          if (AtSegment.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AtSegment);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Section other) {
          if (other == null) {
            return;
          }
          if (other.DriveDir != 0) {
            DriveDir = other.DriveDir;
          }
          if (other.AeraSecsor != 0) {
            AeraSecsor = other.AeraSecsor;
          }
          if (other.GuideDir != 0) {
            GuideDir = other.GuideDir;
          }
          if (other.SectionID.Length != 0) {
            SectionID = other.SectionID;
          }
          if (other.FromAddr.Length != 0) {
            FromAddr = other.FromAddr;
          }
          if (other.ToAddr.Length != 0) {
            ToAddr = other.ToAddr;
          }
          if (other.ControlTable != 0) {
            ControlTable = other.ControlTable;
          }
          if (other.Speed != 0) {
            Speed = other.Speed;
          }
          if (other.Distance != 0) {
            Distance = other.Distance;
          }
          if (other.ChangeAreaSensor1 != 0) {
            ChangeAreaSensor1 = other.ChangeAreaSensor1;
          }
          if (other.ChangeGuideDir1 != 0) {
            ChangeGuideDir1 = other.ChangeGuideDir1;
          }
          if (other.ChangeSegNum1.Length != 0) {
            ChangeSegNum1 = other.ChangeSegNum1;
          }
          if (other.ChangeAreaSensor2 != 0) {
            ChangeAreaSensor2 = other.ChangeAreaSensor2;
          }
          if (other.ChangeGuideDir2 != 0) {
            ChangeGuideDir2 = other.ChangeGuideDir2;
          }
          if (other.ChangeSegNum2.Length != 0) {
            ChangeSegNum2 = other.ChangeSegNum2;
          }
          if (other.AtSegment.Length != 0) {
            AtSegment = other.AtSegment;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                DriveDir = input.ReadInt32();
                break;
              }
              case 16: {
                AeraSecsor = input.ReadInt32();
                break;
              }
              case 24: {
                GuideDir = input.ReadInt32();
                break;
              }
              case 34: {
                SectionID = input.ReadString();
                break;
              }
              case 42: {
                FromAddr = input.ReadString();
                break;
              }
              case 50: {
                ToAddr = input.ReadString();
                break;
              }
              case 56: {
                ControlTable = input.ReadInt32();
                break;
              }
              case 72: {
                Speed = input.ReadUInt32();
                break;
              }
              case 80: {
                Distance = input.ReadUInt32();
                break;
              }
              case 88: {
                ChangeAreaSensor1 = input.ReadInt32();
                break;
              }
              case 96: {
                ChangeGuideDir1 = input.ReadInt32();
                break;
              }
              case 106: {
                ChangeSegNum1 = input.ReadString();
                break;
              }
              case 112: {
                ChangeAreaSensor2 = input.ReadInt32();
                break;
              }
              case 120: {
                ChangeGuideDir2 = input.ReadInt32();
                break;
              }
              case 130: {
                ChangeSegNum2 = input.ReadString();
                break;
              }
              case 138: {
                AtSegment = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ID_115_SECTION_DATA_RESPONSE : pb::IMessage<ID_115_SECTION_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_115_SECTION_DATA_RESPONSE> _parser = new pb::MessageParser<ID_115_SECTION_DATA_RESPONSE>(() => new ID_115_SECTION_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_115_SECTION_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_115_SECTION_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_115_SECTION_DATA_RESPONSE(ID_115_SECTION_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_115_SECTION_DATA_RESPONSE Clone() {
      return new ID_115_SECTION_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_115_SECTION_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_115_SECTION_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_115_SECTION_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_17_ADDRESS_DATA_REP : pb::IMessage<ID_17_ADDRESS_DATA_REP> {
    private static readonly pb::MessageParser<ID_17_ADDRESS_DATA_REP> _parser = new pb::MessageParser<ID_17_ADDRESS_DATA_REP>(() => new ID_17_ADDRESS_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_17_ADDRESS_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_17_ADDRESS_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_17_ADDRESS_DATA_REP(ID_17_ADDRESS_DATA_REP other) : this() {
      addresss_ = other.addresss_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_17_ADDRESS_DATA_REP Clone() {
      return new ID_17_ADDRESS_DATA_REP(this);
    }

    /// <summary>Field number for the "Addresss" field.</summary>
    public const int AddresssFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP.Types.Address> _repeated_addresss_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP.Types.Address> addresss_ = new pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP.Types.Address> Addresss {
      get { return addresss_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_17_ADDRESS_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_17_ADDRESS_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresss_.Equals(other.addresss_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresss_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresss_.WriteTo(output, _repeated_addresss_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresss_.CalculateSize(_repeated_addresss_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_17_ADDRESS_DATA_REP other) {
      if (other == null) {
        return;
      }
      addresss_.Add(other.addresss_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addresss_.AddEntriesFrom(input, _repeated_addresss_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ID_17_ADDRESS_DATA_REP message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Address : pb::IMessage<Address> {
        private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Address> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address(Address other) : this() {
          addr_ = other.addr_;
          resolution_ = other.resolution_;
          loaction_ = other.loaction_;
          blockRelease_ = other.blockRelease_;
          hIDRelease_ = other.hIDRelease_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address Clone() {
          return new Address(this);
        }

        /// <summary>Field number for the "Addr" field.</summary>
        public const int AddrFieldNumber = 1;
        private string addr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Addr {
          get { return addr_; }
          set {
            addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Resolution" field.</summary>
        public const int ResolutionFieldNumber = 2;
        private int resolution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Resolution {
          get { return resolution_; }
          set {
            resolution_ = value;
          }
        }

        /// <summary>Field number for the "Loaction" field.</summary>
        public const int LoactionFieldNumber = 3;
        private int loaction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Loaction {
          get { return loaction_; }
          set {
            loaction_ = value;
          }
        }

        /// <summary>Field number for the "BlockRelease" field.</summary>
        public const int BlockReleaseFieldNumber = 4;
        private int blockRelease_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BlockRelease {
          get { return blockRelease_; }
          set {
            blockRelease_ = value;
          }
        }

        /// <summary>Field number for the "HIDRelease" field.</summary>
        public const int HIDReleaseFieldNumber = 5;
        private int hIDRelease_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HIDRelease {
          get { return hIDRelease_; }
          set {
            hIDRelease_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Address);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Address other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Addr != other.Addr) return false;
          if (Resolution != other.Resolution) return false;
          if (Loaction != other.Loaction) return false;
          if (BlockRelease != other.BlockRelease) return false;
          if (HIDRelease != other.HIDRelease) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Addr.Length != 0) hash ^= Addr.GetHashCode();
          if (Resolution != 0) hash ^= Resolution.GetHashCode();
          if (Loaction != 0) hash ^= Loaction.GetHashCode();
          if (BlockRelease != 0) hash ^= BlockRelease.GetHashCode();
          if (HIDRelease != 0) hash ^= HIDRelease.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Addr.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Addr);
          }
          if (Resolution != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Resolution);
          }
          if (Loaction != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Loaction);
          }
          if (BlockRelease != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(BlockRelease);
          }
          if (HIDRelease != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(HIDRelease);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Addr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
          }
          if (Resolution != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resolution);
          }
          if (Loaction != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Loaction);
          }
          if (BlockRelease != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockRelease);
          }
          if (HIDRelease != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HIDRelease);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Address other) {
          if (other == null) {
            return;
          }
          if (other.Addr.Length != 0) {
            Addr = other.Addr;
          }
          if (other.Resolution != 0) {
            Resolution = other.Resolution;
          }
          if (other.Loaction != 0) {
            Loaction = other.Loaction;
          }
          if (other.BlockRelease != 0) {
            BlockRelease = other.BlockRelease;
          }
          if (other.HIDRelease != 0) {
            HIDRelease = other.HIDRelease;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Addr = input.ReadString();
                break;
              }
              case 16: {
                Resolution = input.ReadInt32();
                break;
              }
              case 24: {
                Loaction = input.ReadInt32();
                break;
              }
              case 32: {
                BlockRelease = input.ReadInt32();
                break;
              }
              case 40: {
                HIDRelease = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ID_117_ADDRESS_DATA_RESPONSE : pb::IMessage<ID_117_ADDRESS_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE> _parser = new pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE>(() => new ID_117_ADDRESS_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_117_ADDRESS_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_117_ADDRESS_DATA_RESPONSE(ID_117_ADDRESS_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_117_ADDRESS_DATA_RESPONSE Clone() {
      return new ID_117_ADDRESS_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_117_ADDRESS_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_117_ADDRESS_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_117_ADDRESS_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_19_SCALE_DATA_REP : pb::IMessage<ID_19_SCALE_DATA_REP> {
    private static readonly pb::MessageParser<ID_19_SCALE_DATA_REP> _parser = new pb::MessageParser<ID_19_SCALE_DATA_REP>(() => new ID_19_SCALE_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_19_SCALE_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_19_SCALE_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_19_SCALE_DATA_REP(ID_19_SCALE_DATA_REP other) : this() {
      resolution_ = other.resolution_;
      inposArea_ = other.inposArea_;
      inposStability_ = other.inposStability_;
      scalePulse_ = other.scalePulse_;
      scaleOffset_ = other.scaleOffset_;
      scaleReset_ = other.scaleReset_;
      readDir_ = other.readDir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_19_SCALE_DATA_REP Clone() {
      return new ID_19_SCALE_DATA_REP(this);
    }

    /// <summary>Field number for the "Resolution" field.</summary>
    public const int ResolutionFieldNumber = 1;
    private uint resolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "InposArea" field.</summary>
    public const int InposAreaFieldNumber = 2;
    private uint inposArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InposArea {
      get { return inposArea_; }
      set {
        inposArea_ = value;
      }
    }

    /// <summary>Field number for the "InposStability" field.</summary>
    public const int InposStabilityFieldNumber = 3;
    private uint inposStability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InposStability {
      get { return inposStability_; }
      set {
        inposStability_ = value;
      }
    }

    /// <summary>Field number for the "ScalePulse" field.</summary>
    public const int ScalePulseFieldNumber = 4;
    private uint scalePulse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScalePulse {
      get { return scalePulse_; }
      set {
        scalePulse_ = value;
      }
    }

    /// <summary>Field number for the "ScaleOffset" field.</summary>
    public const int ScaleOffsetFieldNumber = 5;
    private uint scaleOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScaleOffset {
      get { return scaleOffset_; }
      set {
        scaleOffset_ = value;
      }
    }

    /// <summary>Field number for the "ScaleReset" field.</summary>
    public const int ScaleResetFieldNumber = 6;
    private uint scaleReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScaleReset {
      get { return scaleReset_; }
      set {
        scaleReset_ = value;
      }
    }

    /// <summary>Field number for the "ReadDir" field.</summary>
    public const int ReadDirFieldNumber = 7;
    private int readDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadDir {
      get { return readDir_; }
      set {
        readDir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_19_SCALE_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_19_SCALE_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resolution != other.Resolution) return false;
      if (InposArea != other.InposArea) return false;
      if (InposStability != other.InposStability) return false;
      if (ScalePulse != other.ScalePulse) return false;
      if (ScaleOffset != other.ScaleOffset) return false;
      if (ScaleReset != other.ScaleReset) return false;
      if (ReadDir != other.ReadDir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resolution != 0) hash ^= Resolution.GetHashCode();
      if (InposArea != 0) hash ^= InposArea.GetHashCode();
      if (InposStability != 0) hash ^= InposStability.GetHashCode();
      if (ScalePulse != 0) hash ^= ScalePulse.GetHashCode();
      if (ScaleOffset != 0) hash ^= ScaleOffset.GetHashCode();
      if (ScaleReset != 0) hash ^= ScaleReset.GetHashCode();
      if (ReadDir != 0) hash ^= ReadDir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resolution != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Resolution);
      }
      if (InposArea != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InposArea);
      }
      if (InposStability != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InposStability);
      }
      if (ScalePulse != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ScalePulse);
      }
      if (ScaleOffset != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScaleOffset);
      }
      if (ScaleReset != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ScaleReset);
      }
      if (ReadDir != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ReadDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resolution);
      }
      if (InposArea != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InposArea);
      }
      if (InposStability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InposStability);
      }
      if (ScalePulse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScalePulse);
      }
      if (ScaleOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScaleOffset);
      }
      if (ScaleReset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScaleReset);
      }
      if (ReadDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadDir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_19_SCALE_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.Resolution != 0) {
        Resolution = other.Resolution;
      }
      if (other.InposArea != 0) {
        InposArea = other.InposArea;
      }
      if (other.InposStability != 0) {
        InposStability = other.InposStability;
      }
      if (other.ScalePulse != 0) {
        ScalePulse = other.ScalePulse;
      }
      if (other.ScaleOffset != 0) {
        ScaleOffset = other.ScaleOffset;
      }
      if (other.ScaleReset != 0) {
        ScaleReset = other.ScaleReset;
      }
      if (other.ReadDir != 0) {
        ReadDir = other.ReadDir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Resolution = input.ReadUInt32();
            break;
          }
          case 16: {
            InposArea = input.ReadUInt32();
            break;
          }
          case 24: {
            InposStability = input.ReadUInt32();
            break;
          }
          case 32: {
            ScalePulse = input.ReadUInt32();
            break;
          }
          case 40: {
            ScaleOffset = input.ReadUInt32();
            break;
          }
          case 48: {
            ScaleReset = input.ReadUInt32();
            break;
          }
          case 56: {
            ReadDir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_119_SCALE_DATA_RESPONSE : pb::IMessage<ID_119_SCALE_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_119_SCALE_DATA_RESPONSE> _parser = new pb::MessageParser<ID_119_SCALE_DATA_RESPONSE>(() => new ID_119_SCALE_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_119_SCALE_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_119_SCALE_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_119_SCALE_DATA_RESPONSE(ID_119_SCALE_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_119_SCALE_DATA_RESPONSE Clone() {
      return new ID_119_SCALE_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_119_SCALE_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_119_SCALE_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_119_SCALE_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_21_CONTROL_DATA_REP : pb::IMessage<ID_21_CONTROL_DATA_REP> {
    private static readonly pb::MessageParser<ID_21_CONTROL_DATA_REP> _parser = new pb::MessageParser<ID_21_CONTROL_DATA_REP>(() => new ID_21_CONTROL_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_21_CONTROL_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_21_CONTROL_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_21_CONTROL_DATA_REP(ID_21_CONTROL_DATA_REP other) : this() {
      timeoutT1_ = other.timeoutT1_;
      timeoutT2_ = other.timeoutT2_;
      timeoutT3_ = other.timeoutT3_;
      timeoutT4_ = other.timeoutT4_;
      timeoutT5_ = other.timeoutT5_;
      timeoutT6_ = other.timeoutT6_;
      timeoutT7_ = other.timeoutT7_;
      timeoutT8_ = other.timeoutT8_;
      timeoutBlock_ = other.timeoutBlock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_21_CONTROL_DATA_REP Clone() {
      return new ID_21_CONTROL_DATA_REP(this);
    }

    /// <summary>Field number for the "TimeoutT1" field.</summary>
    public const int TimeoutT1FieldNumber = 1;
    private uint timeoutT1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT1 {
      get { return timeoutT1_; }
      set {
        timeoutT1_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT2" field.</summary>
    public const int TimeoutT2FieldNumber = 2;
    private uint timeoutT2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT2 {
      get { return timeoutT2_; }
      set {
        timeoutT2_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT3" field.</summary>
    public const int TimeoutT3FieldNumber = 3;
    private uint timeoutT3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT3 {
      get { return timeoutT3_; }
      set {
        timeoutT3_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT4" field.</summary>
    public const int TimeoutT4FieldNumber = 4;
    private uint timeoutT4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT4 {
      get { return timeoutT4_; }
      set {
        timeoutT4_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT5" field.</summary>
    public const int TimeoutT5FieldNumber = 5;
    private uint timeoutT5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT5 {
      get { return timeoutT5_; }
      set {
        timeoutT5_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT6" field.</summary>
    public const int TimeoutT6FieldNumber = 6;
    private uint timeoutT6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT6 {
      get { return timeoutT6_; }
      set {
        timeoutT6_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT7" field.</summary>
    public const int TimeoutT7FieldNumber = 7;
    private uint timeoutT7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT7 {
      get { return timeoutT7_; }
      set {
        timeoutT7_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT8" field.</summary>
    public const int TimeoutT8FieldNumber = 8;
    private uint timeoutT8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT8 {
      get { return timeoutT8_; }
      set {
        timeoutT8_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutBlock" field.</summary>
    public const int TimeoutBlockFieldNumber = 9;
    private uint timeoutBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutBlock {
      get { return timeoutBlock_; }
      set {
        timeoutBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_21_CONTROL_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_21_CONTROL_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeoutT1 != other.TimeoutT1) return false;
      if (TimeoutT2 != other.TimeoutT2) return false;
      if (TimeoutT3 != other.TimeoutT3) return false;
      if (TimeoutT4 != other.TimeoutT4) return false;
      if (TimeoutT5 != other.TimeoutT5) return false;
      if (TimeoutT6 != other.TimeoutT6) return false;
      if (TimeoutT7 != other.TimeoutT7) return false;
      if (TimeoutT8 != other.TimeoutT8) return false;
      if (TimeoutBlock != other.TimeoutBlock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeoutT1 != 0) hash ^= TimeoutT1.GetHashCode();
      if (TimeoutT2 != 0) hash ^= TimeoutT2.GetHashCode();
      if (TimeoutT3 != 0) hash ^= TimeoutT3.GetHashCode();
      if (TimeoutT4 != 0) hash ^= TimeoutT4.GetHashCode();
      if (TimeoutT5 != 0) hash ^= TimeoutT5.GetHashCode();
      if (TimeoutT6 != 0) hash ^= TimeoutT6.GetHashCode();
      if (TimeoutT7 != 0) hash ^= TimeoutT7.GetHashCode();
      if (TimeoutT8 != 0) hash ^= TimeoutT8.GetHashCode();
      if (TimeoutBlock != 0) hash ^= TimeoutBlock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeoutT1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeoutT1);
      }
      if (TimeoutT2 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeoutT2);
      }
      if (TimeoutT3 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeoutT3);
      }
      if (TimeoutT4 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeoutT4);
      }
      if (TimeoutT5 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TimeoutT5);
      }
      if (TimeoutT6 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TimeoutT6);
      }
      if (TimeoutT7 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TimeoutT7);
      }
      if (TimeoutT8 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TimeoutT8);
      }
      if (TimeoutBlock != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TimeoutBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeoutT1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT1);
      }
      if (TimeoutT2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT2);
      }
      if (TimeoutT3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT3);
      }
      if (TimeoutT4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT4);
      }
      if (TimeoutT5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT5);
      }
      if (TimeoutT6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT6);
      }
      if (TimeoutT7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT7);
      }
      if (TimeoutT8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT8);
      }
      if (TimeoutBlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutBlock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_21_CONTROL_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.TimeoutT1 != 0) {
        TimeoutT1 = other.TimeoutT1;
      }
      if (other.TimeoutT2 != 0) {
        TimeoutT2 = other.TimeoutT2;
      }
      if (other.TimeoutT3 != 0) {
        TimeoutT3 = other.TimeoutT3;
      }
      if (other.TimeoutT4 != 0) {
        TimeoutT4 = other.TimeoutT4;
      }
      if (other.TimeoutT5 != 0) {
        TimeoutT5 = other.TimeoutT5;
      }
      if (other.TimeoutT6 != 0) {
        TimeoutT6 = other.TimeoutT6;
      }
      if (other.TimeoutT7 != 0) {
        TimeoutT7 = other.TimeoutT7;
      }
      if (other.TimeoutT8 != 0) {
        TimeoutT8 = other.TimeoutT8;
      }
      if (other.TimeoutBlock != 0) {
        TimeoutBlock = other.TimeoutBlock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeoutT1 = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeoutT2 = input.ReadUInt32();
            break;
          }
          case 24: {
            TimeoutT3 = input.ReadUInt32();
            break;
          }
          case 32: {
            TimeoutT4 = input.ReadUInt32();
            break;
          }
          case 40: {
            TimeoutT5 = input.ReadUInt32();
            break;
          }
          case 48: {
            TimeoutT6 = input.ReadUInt32();
            break;
          }
          case 56: {
            TimeoutT7 = input.ReadUInt32();
            break;
          }
          case 64: {
            TimeoutT8 = input.ReadUInt32();
            break;
          }
          case 72: {
            TimeoutBlock = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_121_CONTROL_DATA_RESPONSE : pb::IMessage<ID_121_CONTROL_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE> _parser = new pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE>(() => new ID_121_CONTROL_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_121_CONTROL_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_121_CONTROL_DATA_RESPONSE(ID_121_CONTROL_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_121_CONTROL_DATA_RESPONSE Clone() {
      return new ID_121_CONTROL_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_121_CONTROL_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_121_CONTROL_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_121_CONTROL_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_23_GUIDE_DATA_REP : pb::IMessage<ID_23_GUIDE_DATA_REP> {
    private static readonly pb::MessageParser<ID_23_GUIDE_DATA_REP> _parser = new pb::MessageParser<ID_23_GUIDE_DATA_REP>(() => new ID_23_GUIDE_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_23_GUIDE_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_23_GUIDE_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_23_GUIDE_DATA_REP(ID_23_GUIDE_DATA_REP other) : this() {
      startStopSpd_ = other.startStopSpd_;
      maxSpeed_ = other.maxSpeed_;
      accelTime_ = other.accelTime_;
      sCurveRate_ = other.sCurveRate_;
      normalSpd_ = other.normalSpd_;
      manualHSpd_ = other.manualHSpd_;
      manualLSpd_ = other.manualLSpd_;
      lFLockPos_ = other.lFLockPos_;
      lBLockPos_ = other.lBLockPos_;
      rFLockPos_ = other.rFLockPos_;
      rBLockPos_ = other.rBLockPos_;
      changeStabilityTime_ = other.changeStabilityTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_23_GUIDE_DATA_REP Clone() {
      return new ID_23_GUIDE_DATA_REP(this);
    }

    /// <summary>Field number for the "StartStopSpd" field.</summary>
    public const int StartStopSpdFieldNumber = 1;
    private uint startStopSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartStopSpd {
      get { return startStopSpd_; }
      set {
        startStopSpd_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 2;
    private uint maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AccelTime" field.</summary>
    public const int AccelTimeFieldNumber = 3;
    private uint accelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccelTime {
      get { return accelTime_; }
      set {
        accelTime_ = value;
      }
    }

    /// <summary>Field number for the "SCurveRate" field.</summary>
    public const int SCurveRateFieldNumber = 4;
    private int sCurveRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SCurveRate {
      get { return sCurveRate_; }
      set {
        sCurveRate_ = value;
      }
    }

    /// <summary>Field number for the "NormalSpd" field.</summary>
    public const int NormalSpdFieldNumber = 5;
    private uint normalSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NormalSpd {
      get { return normalSpd_; }
      set {
        normalSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualHSpd" field.</summary>
    public const int ManualHSpdFieldNumber = 6;
    private uint manualHSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualHSpd {
      get { return manualHSpd_; }
      set {
        manualHSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualLSpd" field.</summary>
    public const int ManualLSpdFieldNumber = 7;
    private uint manualLSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualLSpd {
      get { return manualLSpd_; }
      set {
        manualLSpd_ = value;
      }
    }

    /// <summary>Field number for the "LFLockPos" field.</summary>
    public const int LFLockPosFieldNumber = 8;
    private uint lFLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LFLockPos {
      get { return lFLockPos_; }
      set {
        lFLockPos_ = value;
      }
    }

    /// <summary>Field number for the "LBLockPos" field.</summary>
    public const int LBLockPosFieldNumber = 9;
    private uint lBLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LBLockPos {
      get { return lBLockPos_; }
      set {
        lBLockPos_ = value;
      }
    }

    /// <summary>Field number for the "RFLockPos" field.</summary>
    public const int RFLockPosFieldNumber = 10;
    private uint rFLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RFLockPos {
      get { return rFLockPos_; }
      set {
        rFLockPos_ = value;
      }
    }

    /// <summary>Field number for the "RBLockPos" field.</summary>
    public const int RBLockPosFieldNumber = 11;
    private uint rBLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RBLockPos {
      get { return rBLockPos_; }
      set {
        rBLockPos_ = value;
      }
    }

    /// <summary>Field number for the "ChangeStabilityTime" field.</summary>
    public const int ChangeStabilityTimeFieldNumber = 12;
    private uint changeStabilityTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChangeStabilityTime {
      get { return changeStabilityTime_; }
      set {
        changeStabilityTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_23_GUIDE_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_23_GUIDE_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartStopSpd != other.StartStopSpd) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      if (AccelTime != other.AccelTime) return false;
      if (SCurveRate != other.SCurveRate) return false;
      if (NormalSpd != other.NormalSpd) return false;
      if (ManualHSpd != other.ManualHSpd) return false;
      if (ManualLSpd != other.ManualLSpd) return false;
      if (LFLockPos != other.LFLockPos) return false;
      if (LBLockPos != other.LBLockPos) return false;
      if (RFLockPos != other.RFLockPos) return false;
      if (RBLockPos != other.RBLockPos) return false;
      if (ChangeStabilityTime != other.ChangeStabilityTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartStopSpd != 0) hash ^= StartStopSpd.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      if (AccelTime != 0) hash ^= AccelTime.GetHashCode();
      if (SCurveRate != 0) hash ^= SCurveRate.GetHashCode();
      if (NormalSpd != 0) hash ^= NormalSpd.GetHashCode();
      if (ManualHSpd != 0) hash ^= ManualHSpd.GetHashCode();
      if (ManualLSpd != 0) hash ^= ManualLSpd.GetHashCode();
      if (LFLockPos != 0) hash ^= LFLockPos.GetHashCode();
      if (LBLockPos != 0) hash ^= LBLockPos.GetHashCode();
      if (RFLockPos != 0) hash ^= RFLockPos.GetHashCode();
      if (RBLockPos != 0) hash ^= RBLockPos.GetHashCode();
      if (ChangeStabilityTime != 0) hash ^= ChangeStabilityTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartStopSpd != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxSpeed);
      }
      if (AccelTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AccelTime);
      }
      if (SCurveRate != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SCurveRate);
      }
      if (NormalSpd != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NormalSpd);
      }
      if (ManualHSpd != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ManualLSpd);
      }
      if (LFLockPos != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(LFLockPos);
      }
      if (LBLockPos != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LBLockPos);
      }
      if (RFLockPos != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RFLockPos);
      }
      if (RBLockPos != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RBLockPos);
      }
      if (ChangeStabilityTime != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ChangeStabilityTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartStopSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeed);
      }
      if (AccelTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccelTime);
      }
      if (SCurveRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SCurveRate);
      }
      if (NormalSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NormalSpd);
      }
      if (ManualHSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualLSpd);
      }
      if (LFLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LFLockPos);
      }
      if (LBLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LBLockPos);
      }
      if (RFLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RFLockPos);
      }
      if (RBLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RBLockPos);
      }
      if (ChangeStabilityTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChangeStabilityTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_23_GUIDE_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.StartStopSpd != 0) {
        StartStopSpd = other.StartStopSpd;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.AccelTime != 0) {
        AccelTime = other.AccelTime;
      }
      if (other.SCurveRate != 0) {
        SCurveRate = other.SCurveRate;
      }
      if (other.NormalSpd != 0) {
        NormalSpd = other.NormalSpd;
      }
      if (other.ManualHSpd != 0) {
        ManualHSpd = other.ManualHSpd;
      }
      if (other.ManualLSpd != 0) {
        ManualLSpd = other.ManualLSpd;
      }
      if (other.LFLockPos != 0) {
        LFLockPos = other.LFLockPos;
      }
      if (other.LBLockPos != 0) {
        LBLockPos = other.LBLockPos;
      }
      if (other.RFLockPos != 0) {
        RFLockPos = other.RFLockPos;
      }
      if (other.RBLockPos != 0) {
        RBLockPos = other.RBLockPos;
      }
      if (other.ChangeStabilityTime != 0) {
        ChangeStabilityTime = other.ChangeStabilityTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartStopSpd = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxSpeed = input.ReadUInt32();
            break;
          }
          case 24: {
            AccelTime = input.ReadUInt32();
            break;
          }
          case 32: {
            SCurveRate = input.ReadInt32();
            break;
          }
          case 40: {
            NormalSpd = input.ReadUInt32();
            break;
          }
          case 48: {
            ManualHSpd = input.ReadUInt32();
            break;
          }
          case 56: {
            ManualLSpd = input.ReadUInt32();
            break;
          }
          case 64: {
            LFLockPos = input.ReadUInt32();
            break;
          }
          case 72: {
            LBLockPos = input.ReadUInt32();
            break;
          }
          case 80: {
            RFLockPos = input.ReadUInt32();
            break;
          }
          case 88: {
            RBLockPos = input.ReadUInt32();
            break;
          }
          case 96: {
            ChangeStabilityTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_123_GUIDE_DATA_RESPONSE : pb::IMessage<ID_123_GUIDE_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE> _parser = new pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE>(() => new ID_123_GUIDE_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_123_GUIDE_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_123_GUIDE_DATA_RESPONSE(ID_123_GUIDE_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_123_GUIDE_DATA_RESPONSE Clone() {
      return new ID_123_GUIDE_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_123_GUIDE_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_123_GUIDE_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_123_GUIDE_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_61_INDIVIDUAL_UPLOAD_REQ : pb::IMessage<ID_61_INDIVIDUAL_UPLOAD_REQ> {
    private static readonly pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ> _parser = new pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ>(() => new ID_61_INDIVIDUAL_UPLOAD_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_61_INDIVIDUAL_UPLOAD_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_61_INDIVIDUAL_UPLOAD_REQ(ID_61_INDIVIDUAL_UPLOAD_REQ other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_61_INDIVIDUAL_UPLOAD_REQ Clone() {
      return new ID_61_INDIVIDUAL_UPLOAD_REQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_61_INDIVIDUAL_UPLOAD_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_61_INDIVIDUAL_UPLOAD_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_61_INDIVIDUAL_UPLOAD_REQ other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ID_161_INDIVIDUAL_UPLOAD_RESPONSE : pb::IMessage<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> {
    private static readonly pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> _parser = new pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE>(() => new ID_161_INDIVIDUAL_UPLOAD_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_161_INDIVIDUAL_UPLOAD_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_161_INDIVIDUAL_UPLOAD_RESPONSE(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) : this() {
      offsetGuideFL_ = other.offsetGuideFL_;
      offsetGuideRL_ = other.offsetGuideRL_;
      offsetGuideFR_ = other.offsetGuideFR_;
      offsetGuideRR_ = other.offsetGuideRR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_161_INDIVIDUAL_UPLOAD_RESPONSE Clone() {
      return new ID_161_INDIVIDUAL_UPLOAD_RESPONSE(this);
    }

    /// <summary>Field number for the "OffsetGuideFL" field.</summary>
    public const int OffsetGuideFLFieldNumber = 1;
    private uint offsetGuideFL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFL {
      get { return offsetGuideFL_; }
      set {
        offsetGuideFL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRL" field.</summary>
    public const int OffsetGuideRLFieldNumber = 2;
    private uint offsetGuideRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRL {
      get { return offsetGuideRL_; }
      set {
        offsetGuideRL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideFR" field.</summary>
    public const int OffsetGuideFRFieldNumber = 3;
    private uint offsetGuideFR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFR {
      get { return offsetGuideFR_; }
      set {
        offsetGuideFR_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRR" field.</summary>
    public const int OffsetGuideRRFieldNumber = 4;
    private uint offsetGuideRR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRR {
      get { return offsetGuideRR_; }
      set {
        offsetGuideRR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_161_INDIVIDUAL_UPLOAD_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetGuideFL != other.OffsetGuideFL) return false;
      if (OffsetGuideRL != other.OffsetGuideRL) return false;
      if (OffsetGuideFR != other.OffsetGuideFR) return false;
      if (OffsetGuideRR != other.OffsetGuideRR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
      if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
      if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
      if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetGuideFL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetGuideRR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetGuideFL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.OffsetGuideFL != 0) {
        OffsetGuideFL = other.OffsetGuideFL;
      }
      if (other.OffsetGuideRL != 0) {
        OffsetGuideRL = other.OffsetGuideRL;
      }
      if (other.OffsetGuideFR != 0) {
        OffsetGuideFR = other.OffsetGuideFR;
      }
      if (other.OffsetGuideRR != 0) {
        OffsetGuideRR = other.OffsetGuideRR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetGuideFL = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetGuideRL = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetGuideFR = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetGuideRR = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_162_GUIDE_DATA_UPLOAD_REP : pb::IMessage<ID_162_GUIDE_DATA_UPLOAD_REP> {
    private static readonly pb::MessageParser<ID_162_GUIDE_DATA_UPLOAD_REP> _parser = new pb::MessageParser<ID_162_GUIDE_DATA_UPLOAD_REP>(() => new ID_162_GUIDE_DATA_UPLOAD_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_162_GUIDE_DATA_UPLOAD_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_162_GUIDE_DATA_UPLOAD_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_162_GUIDE_DATA_UPLOAD_REP(ID_162_GUIDE_DATA_UPLOAD_REP other) : this() {
      offsetGuideFL_ = other.offsetGuideFL_;
      offsetGuideRL_ = other.offsetGuideRL_;
      offsetGuideFR_ = other.offsetGuideFR_;
      offsetGuideRR_ = other.offsetGuideRR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_162_GUIDE_DATA_UPLOAD_REP Clone() {
      return new ID_162_GUIDE_DATA_UPLOAD_REP(this);
    }

    /// <summary>Field number for the "OffsetGuideFL" field.</summary>
    public const int OffsetGuideFLFieldNumber = 1;
    private uint offsetGuideFL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFL {
      get { return offsetGuideFL_; }
      set {
        offsetGuideFL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRL" field.</summary>
    public const int OffsetGuideRLFieldNumber = 2;
    private uint offsetGuideRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRL {
      get { return offsetGuideRL_; }
      set {
        offsetGuideRL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideFR" field.</summary>
    public const int OffsetGuideFRFieldNumber = 3;
    private uint offsetGuideFR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFR {
      get { return offsetGuideFR_; }
      set {
        offsetGuideFR_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRR" field.</summary>
    public const int OffsetGuideRRFieldNumber = 4;
    private uint offsetGuideRR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRR {
      get { return offsetGuideRR_; }
      set {
        offsetGuideRR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_162_GUIDE_DATA_UPLOAD_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_162_GUIDE_DATA_UPLOAD_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetGuideFL != other.OffsetGuideFL) return false;
      if (OffsetGuideRL != other.OffsetGuideRL) return false;
      if (OffsetGuideFR != other.OffsetGuideFR) return false;
      if (OffsetGuideRR != other.OffsetGuideRR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
      if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
      if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
      if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetGuideFL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetGuideRR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetGuideFL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_162_GUIDE_DATA_UPLOAD_REP other) {
      if (other == null) {
        return;
      }
      if (other.OffsetGuideFL != 0) {
        OffsetGuideFL = other.OffsetGuideFL;
      }
      if (other.OffsetGuideRL != 0) {
        OffsetGuideRL = other.OffsetGuideRL;
      }
      if (other.OffsetGuideFR != 0) {
        OffsetGuideFR = other.OffsetGuideFR;
      }
      if (other.OffsetGuideRR != 0) {
        OffsetGuideRR = other.OffsetGuideRR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetGuideFL = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetGuideRL = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetGuideFR = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetGuideRR = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_62_GUID_DATA_UPLOAD_RESPONSE : pb::IMessage<ID_62_GUID_DATA_UPLOAD_RESPONSE> {
    private static readonly pb::MessageParser<ID_62_GUID_DATA_UPLOAD_RESPONSE> _parser = new pb::MessageParser<ID_62_GUID_DATA_UPLOAD_RESPONSE>(() => new ID_62_GUID_DATA_UPLOAD_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_62_GUID_DATA_UPLOAD_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_62_GUID_DATA_UPLOAD_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_62_GUID_DATA_UPLOAD_RESPONSE(ID_62_GUID_DATA_UPLOAD_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_62_GUID_DATA_UPLOAD_RESPONSE Clone() {
      return new ID_62_GUID_DATA_UPLOAD_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_62_GUID_DATA_UPLOAD_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_62_GUID_DATA_UPLOAD_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_62_GUID_DATA_UPLOAD_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_63_INDIVIDUAL_CHANGE_REQ : pb::IMessage<ID_63_INDIVIDUAL_CHANGE_REQ> {
    private static readonly pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ> _parser = new pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ>(() => new ID_63_INDIVIDUAL_CHANGE_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_63_INDIVIDUAL_CHANGE_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_63_INDIVIDUAL_CHANGE_REQ(ID_63_INDIVIDUAL_CHANGE_REQ other) : this() {
      offsetGuideFL_ = other.offsetGuideFL_;
      offsetGuideRL_ = other.offsetGuideRL_;
      offsetGuideFR_ = other.offsetGuideFR_;
      offsetGuideRR_ = other.offsetGuideRR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_63_INDIVIDUAL_CHANGE_REQ Clone() {
      return new ID_63_INDIVIDUAL_CHANGE_REQ(this);
    }

    /// <summary>Field number for the "OffsetGuideFL" field.</summary>
    public const int OffsetGuideFLFieldNumber = 1;
    private uint offsetGuideFL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFL {
      get { return offsetGuideFL_; }
      set {
        offsetGuideFL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRL" field.</summary>
    public const int OffsetGuideRLFieldNumber = 2;
    private uint offsetGuideRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRL {
      get { return offsetGuideRL_; }
      set {
        offsetGuideRL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideFR" field.</summary>
    public const int OffsetGuideFRFieldNumber = 3;
    private uint offsetGuideFR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFR {
      get { return offsetGuideFR_; }
      set {
        offsetGuideFR_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRR" field.</summary>
    public const int OffsetGuideRRFieldNumber = 4;
    private uint offsetGuideRR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRR {
      get { return offsetGuideRR_; }
      set {
        offsetGuideRR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_63_INDIVIDUAL_CHANGE_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_63_INDIVIDUAL_CHANGE_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetGuideFL != other.OffsetGuideFL) return false;
      if (OffsetGuideRL != other.OffsetGuideRL) return false;
      if (OffsetGuideFR != other.OffsetGuideFR) return false;
      if (OffsetGuideRR != other.OffsetGuideRR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
      if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
      if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
      if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetGuideFL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetGuideRR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetGuideFL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_63_INDIVIDUAL_CHANGE_REQ other) {
      if (other == null) {
        return;
      }
      if (other.OffsetGuideFL != 0) {
        OffsetGuideFL = other.OffsetGuideFL;
      }
      if (other.OffsetGuideRL != 0) {
        OffsetGuideRL = other.OffsetGuideRL;
      }
      if (other.OffsetGuideFR != 0) {
        OffsetGuideFR = other.OffsetGuideFR;
      }
      if (other.OffsetGuideRR != 0) {
        OffsetGuideRR = other.OffsetGuideRR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetGuideFL = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetGuideRL = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetGuideFR = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetGuideRR = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_163_INDIVIDUAL_CHANGE_RESPONSE : pb::IMessage<ID_163_INDIVIDUAL_CHANGE_RESPONSE> {
    private static readonly pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE>(() => new ID_163_INDIVIDUAL_CHANGE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_163_INDIVIDUAL_CHANGE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_163_INDIVIDUAL_CHANGE_RESPONSE(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_163_INDIVIDUAL_CHANGE_RESPONSE Clone() {
      return new ID_163_INDIVIDUAL_CHANGE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_163_INDIVIDUAL_CHANGE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_31_TRANS_REQUEST : pb::IMessage<ID_31_TRANS_REQUEST> {
    private static readonly pb::MessageParser<ID_31_TRANS_REQUEST> _parser = new pb::MessageParser<ID_31_TRANS_REQUEST>(() => new ID_31_TRANS_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_31_TRANS_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_31_TRANS_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_31_TRANS_REQUEST(ID_31_TRANS_REQUEST other) : this() {
      cmdID_ = other.cmdID_;
      actType_ = other.actType_;
      loadAdr_ = other.loadAdr_;
      toAdr_ = other.toAdr_;
      loadPortID_ = other.loadPortID_;
      unloadPortID_ = other.unloadPortID_;
      secDistance_ = other.secDistance_;
      bOXID_ = other.bOXID_;
      lOTID_ = other.lOTID_;
      guideSectionsStartToLoad_ = other.guideSectionsStartToLoad_.Clone();
      guideAddressStartToLoad_ = other.guideAddressStartToLoad_.Clone();
      guideSectionsToDestination_ = other.guideSectionsToDestination_.Clone();
      guideAddressToDestination_ = other.guideAddressToDestination_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_31_TRANS_REQUEST Clone() {
      return new ID_31_TRANS_REQUEST(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActType" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ActiveType actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ActiveType ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "LoadAdr" field.</summary>
    public const int LoadAdrFieldNumber = 3;
    private string loadAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadAdr {
      get { return loadAdr_; }
      set {
        loadAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 4;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPortID" field.</summary>
    public const int LoadPortIDFieldNumber = 5;
    private string loadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPortID {
      get { return loadPortID_; }
      set {
        loadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnloadPortID" field.</summary>
    public const int UnloadPortIDFieldNumber = 6;
    private string unloadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnloadPortID {
      get { return unloadPortID_; }
      set {
        unloadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 7;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "BOX_ID" field.</summary>
    public const int BOXIDFieldNumber = 8;
    private string bOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BOXID {
      get { return bOXID_; }
      set {
        bOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT_ID" field.</summary>
    public const int LOTIDFieldNumber = 10;
    private string lOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOTID {
      get { return lOTID_; }
      set {
        lOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Guide_Sections_StartToLoad" field.</summary>
    public const int GuideSectionsStartToLoadFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_guideSectionsStartToLoad_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> guideSectionsStartToLoad_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideSectionsStartToLoad {
      get { return guideSectionsStartToLoad_; }
    }

    /// <summary>Field number for the "Guide_Address_StartToLoad" field.</summary>
    public const int GuideAddressStartToLoadFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_guideAddressStartToLoad_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> guideAddressStartToLoad_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideAddressStartToLoad {
      get { return guideAddressStartToLoad_; }
    }

    /// <summary>Field number for the "Guide_Sections_ToDestination" field.</summary>
    public const int GuideSectionsToDestinationFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_guideSectionsToDestination_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> guideSectionsToDestination_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideSectionsToDestination {
      get { return guideSectionsToDestination_; }
    }

    /// <summary>Field number for the "Guide_Address_ToDestination" field.</summary>
    public const int GuideAddressToDestinationFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_guideAddressToDestination_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> guideAddressToDestination_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideAddressToDestination {
      get { return guideAddressToDestination_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_31_TRANS_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_31_TRANS_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (ActType != other.ActType) return false;
      if (LoadAdr != other.LoadAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      if (LoadPortID != other.LoadPortID) return false;
      if (UnloadPortID != other.UnloadPortID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (BOXID != other.BOXID) return false;
      if (LOTID != other.LOTID) return false;
      if(!guideSectionsStartToLoad_.Equals(other.guideSectionsStartToLoad_)) return false;
      if(!guideAddressStartToLoad_.Equals(other.guideAddressStartToLoad_)) return false;
      if(!guideSectionsToDestination_.Equals(other.guideSectionsToDestination_)) return false;
      if(!guideAddressToDestination_.Equals(other.guideAddressToDestination_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (LoadAdr.Length != 0) hash ^= LoadAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      if (LoadPortID.Length != 0) hash ^= LoadPortID.GetHashCode();
      if (UnloadPortID.Length != 0) hash ^= UnloadPortID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (BOXID.Length != 0) hash ^= BOXID.GetHashCode();
      if (LOTID.Length != 0) hash ^= LOTID.GetHashCode();
      hash ^= guideSectionsStartToLoad_.GetHashCode();
      hash ^= guideAddressStartToLoad_.GetHashCode();
      hash ^= guideSectionsToDestination_.GetHashCode();
      hash ^= guideAddressToDestination_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
      if (LoadAdr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LoadAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ToAdr);
      }
      if (LoadPortID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UnloadPortID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SecDistance);
      }
      if (BOXID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BOXID);
      }
      if (LOTID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LOTID);
      }
      guideSectionsStartToLoad_.WriteTo(output, _repeated_guideSectionsStartToLoad_codec);
      guideAddressStartToLoad_.WriteTo(output, _repeated_guideAddressStartToLoad_codec);
      guideSectionsToDestination_.WriteTo(output, _repeated_guideSectionsToDestination_codec);
      guideAddressToDestination_.WriteTo(output, _repeated_guideAddressToDestination_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (LoadAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadAdr);
      }
      if (ToAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      if (LoadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnloadPortID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (BOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BOXID);
      }
      if (LOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOTID);
      }
      size += guideSectionsStartToLoad_.CalculateSize(_repeated_guideSectionsStartToLoad_codec);
      size += guideAddressStartToLoad_.CalculateSize(_repeated_guideAddressStartToLoad_codec);
      size += guideSectionsToDestination_.CalculateSize(_repeated_guideSectionsToDestination_codec);
      size += guideAddressToDestination_.CalculateSize(_repeated_guideAddressToDestination_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_31_TRANS_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.LoadAdr.Length != 0) {
        LoadAdr = other.LoadAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
      if (other.LoadPortID.Length != 0) {
        LoadPortID = other.LoadPortID;
      }
      if (other.UnloadPortID.Length != 0) {
        UnloadPortID = other.UnloadPortID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.BOXID.Length != 0) {
        BOXID = other.BOXID;
      }
      if (other.LOTID.Length != 0) {
        LOTID = other.LOTID;
      }
      guideSectionsStartToLoad_.Add(other.guideSectionsStartToLoad_);
      guideAddressStartToLoad_.Add(other.guideAddressStartToLoad_);
      guideSectionsToDestination_.Add(other.guideSectionsToDestination_);
      guideAddressToDestination_.Add(other.guideAddressToDestination_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            actType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ActiveType) input.ReadEnum();
            break;
          }
          case 26: {
            LoadAdr = input.ReadString();
            break;
          }
          case 34: {
            ToAdr = input.ReadString();
            break;
          }
          case 42: {
            LoadPortID = input.ReadString();
            break;
          }
          case 50: {
            UnloadPortID = input.ReadString();
            break;
          }
          case 56: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 66: {
            BOXID = input.ReadString();
            break;
          }
          case 82: {
            LOTID = input.ReadString();
            break;
          }
          case 90: {
            guideSectionsStartToLoad_.AddEntriesFrom(input, _repeated_guideSectionsStartToLoad_codec);
            break;
          }
          case 98: {
            guideAddressStartToLoad_.AddEntriesFrom(input, _repeated_guideAddressStartToLoad_codec);
            break;
          }
          case 106: {
            guideSectionsToDestination_.AddEntriesFrom(input, _repeated_guideSectionsToDestination_codec);
            break;
          }
          case 114: {
            guideAddressToDestination_.AddEntriesFrom(input, _repeated_guideAddressToDestination_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_131_TRANS_RESPONSE : pb::IMessage<ID_131_TRANS_RESPONSE> {
    private static readonly pb::MessageParser<ID_131_TRANS_RESPONSE> _parser = new pb::MessageParser<ID_131_TRANS_RESPONSE>(() => new ID_131_TRANS_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_131_TRANS_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_131_TRANS_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_131_TRANS_RESPONSE(ID_131_TRANS_RESPONSE other) : this() {
      cmdID_ = other.cmdID_;
      actType_ = other.actType_;
      replyCode_ = other.replyCode_;
      ngReason_ = other.ngReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_131_TRANS_RESPONSE Clone() {
      return new ID_131_TRANS_RESPONSE(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActType" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ActiveType actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ActiveType ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 3;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    /// <summary>Field number for the "NgReason" field.</summary>
    public const int NgReasonFieldNumber = 4;
    private string ngReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NgReason {
      get { return ngReason_; }
      set {
        ngReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_131_TRANS_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_131_TRANS_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (ActType != other.ActType) return false;
      if (ReplyCode != other.ReplyCode) return false;
      if (NgReason != other.NgReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      if (NgReason.Length != 0) hash ^= NgReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReplyCode);
      }
      if (NgReason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NgReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      if (NgReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NgReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_131_TRANS_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
      if (other.NgReason.Length != 0) {
        NgReason = other.NgReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            actType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ActiveType) input.ReadEnum();
            break;
          }
          case 24: {
            ReplyCode = input.ReadInt32();
            break;
          }
          case 34: {
            NgReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_132_TRANS_COMPLETE_REPORT : pb::IMessage<ID_132_TRANS_COMPLETE_REPORT> {
    private static readonly pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT>(() => new ID_132_TRANS_COMPLETE_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_132_TRANS_COMPLETE_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_132_TRANS_COMPLETE_REPORT(ID_132_TRANS_COMPLETE_REPORT other) : this() {
      cmdID_ = other.cmdID_;
      bOXID_ = other.bOXID_;
      cSTID_ = other.cSTID_;
      lOTID_ = other.lOTID_;
      cmpStatus_ = other.cmpStatus_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      secDistance_ = other.secDistance_;
      cmdDistance_ = other.cmdDistance_;
      hasBox_ = other.hasBox_;
      carBoxID_ = other.carBoxID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_132_TRANS_COMPLETE_REPORT Clone() {
      return new ID_132_TRANS_COMPLETE_REPORT(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BOX_ID" field.</summary>
    public const int BOXIDFieldNumber = 2;
    private string bOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BOXID {
      get { return bOXID_; }
      set {
        bOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 3;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT_ID" field.</summary>
    public const int LOTIDFieldNumber = 4;
    private string lOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOTID {
      get { return lOTID_; }
      set {
        lOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmpStatus" field.</summary>
    public const int CmpStatusFieldNumber = 5;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CompleteStatus cmpStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CompleteStatus CmpStatus {
      get { return cmpStatus_; }
      set {
        cmpStatus_ = value;
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 6;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 7;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 8;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Cmd_Distance" field.</summary>
    public const int CmdDistanceFieldNumber = 9;
    private int cmdDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CmdDistance {
      get { return cmdDistance_; }
      set {
        cmdDistance_ = value;
      }
    }

    /// <summary>Field number for the "HasBox" field.</summary>
    public const int HasBoxFieldNumber = 10;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus hasBox_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus HasBox {
      get { return hasBox_; }
      set {
        hasBox_ = value;
      }
    }

    /// <summary>Field number for the "CarBoxID" field.</summary>
    public const int CarBoxIDFieldNumber = 11;
    private string carBoxID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarBoxID {
      get { return carBoxID_; }
      set {
        carBoxID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_132_TRANS_COMPLETE_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_132_TRANS_COMPLETE_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (BOXID != other.BOXID) return false;
      if (CSTID != other.CSTID) return false;
      if (LOTID != other.LOTID) return false;
      if (CmpStatus != other.CmpStatus) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (CmdDistance != other.CmdDistance) return false;
      if (HasBox != other.HasBox) return false;
      if (CarBoxID != other.CarBoxID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (BOXID.Length != 0) hash ^= BOXID.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (LOTID.Length != 0) hash ^= LOTID.GetHashCode();
      if (CmpStatus != 0) hash ^= CmpStatus.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (CmdDistance != 0) hash ^= CmdDistance.GetHashCode();
      if (HasBox != 0) hash ^= HasBox.GetHashCode();
      if (CarBoxID.Length != 0) hash ^= CarBoxID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (BOXID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BOXID);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CSTID);
      }
      if (LOTID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LOTID);
      }
      if (CmpStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CmpStatus);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CurrentSecID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SecDistance);
      }
      if (CmdDistance != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CmdDistance);
      }
      if (HasBox != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) HasBox);
      }
      if (CarBoxID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CarBoxID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (BOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BOXID);
      }
      if (CSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (LOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOTID);
      }
      if (CmpStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CmpStatus);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (CmdDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CmdDistance);
      }
      if (HasBox != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HasBox);
      }
      if (CarBoxID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarBoxID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_132_TRANS_COMPLETE_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.BOXID.Length != 0) {
        BOXID = other.BOXID;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.LOTID.Length != 0) {
        LOTID = other.LOTID;
      }
      if (other.CmpStatus != 0) {
        CmpStatus = other.CmpStatus;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.CmdDistance != 0) {
        CmdDistance = other.CmdDistance;
      }
      if (other.HasBox != 0) {
        HasBox = other.HasBox;
      }
      if (other.CarBoxID.Length != 0) {
        CarBoxID = other.CarBoxID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 18: {
            BOXID = input.ReadString();
            break;
          }
          case 26: {
            CSTID = input.ReadString();
            break;
          }
          case 34: {
            LOTID = input.ReadString();
            break;
          }
          case 40: {
            cmpStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CompleteStatus) input.ReadEnum();
            break;
          }
          case 50: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 58: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 64: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 72: {
            CmdDistance = input.ReadInt32();
            break;
          }
          case 80: {
            hasBox_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 90: {
            CarBoxID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_32_TRANS_COMPLETE_RESPONSE : pb::IMessage<ID_32_TRANS_COMPLETE_RESPONSE> {
    private static readonly pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE>(() => new ID_32_TRANS_COMPLETE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_32_TRANS_COMPLETE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_32_TRANS_COMPLETE_RESPONSE(ID_32_TRANS_COMPLETE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_32_TRANS_COMPLETE_RESPONSE Clone() {
      return new ID_32_TRANS_COMPLETE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_32_TRANS_COMPLETE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_32_TRANS_COMPLETE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_32_TRANS_COMPLETE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST : pb::IMessage<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST> {
    private static readonly pb::MessageParser<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST> _parser = new pb::MessageParser<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST>(() => new ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST(ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST other) : this() {
      controlType_ = other.controlType_;
      cancelSecID_ = other.cancelSecID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST Clone() {
      return new ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST(this);
    }

    /// <summary>Field number for the "ControlType" field.</summary>
    public const int ControlTypeFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ControlType controlType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ControlType ControlType {
      get { return controlType_; }
      set {
        controlType_ = value;
      }
    }

    /// <summary>Field number for the "CancelSecID" field.</summary>
    public const int CancelSecIDFieldNumber = 2;
    private string cancelSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CancelSecID {
      get { return cancelSecID_; }
      set {
        cancelSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControlType != other.ControlType) return false;
      if (CancelSecID != other.CancelSecID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ControlType != 0) hash ^= ControlType.GetHashCode();
      if (CancelSecID.Length != 0) hash ^= CancelSecID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ControlType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ControlType);
      }
      if (CancelSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CancelSecID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ControlType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ControlType);
      }
      if (CancelSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CancelSecID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.ControlType != 0) {
        ControlType = other.ControlType;
      }
      if (other.CancelSecID.Length != 0) {
        CancelSecID = other.CancelSecID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            controlType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ControlType) input.ReadEnum();
            break;
          }
          case 18: {
            CancelSecID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE : pb::IMessage<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE> {
    private static readonly pb::MessageParser<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE> _parser = new pb::MessageParser<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE>(() => new ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE(ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE other) : this() {
      controlType_ = other.controlType_;
      cancelSecID_ = other.cancelSecID_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE Clone() {
      return new ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE(this);
    }

    /// <summary>Field number for the "ControlType" field.</summary>
    public const int ControlTypeFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ControlType controlType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ControlType ControlType {
      get { return controlType_; }
      set {
        controlType_ = value;
      }
    }

    /// <summary>Field number for the "CancelSecID" field.</summary>
    public const int CancelSecIDFieldNumber = 2;
    private string cancelSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CancelSecID {
      get { return cancelSecID_; }
      set {
        cancelSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 3;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControlType != other.ControlType) return false;
      if (CancelSecID != other.CancelSecID) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ControlType != 0) hash ^= ControlType.GetHashCode();
      if (CancelSecID.Length != 0) hash ^= CancelSecID.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ControlType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ControlType);
      }
      if (CancelSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CancelSecID);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ControlType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ControlType);
      }
      if (CancelSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CancelSecID);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ControlType != 0) {
        ControlType = other.ControlType;
      }
      if (other.CancelSecID.Length != 0) {
        CancelSecID = other.CancelSecID;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            controlType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ControlType) input.ReadEnum();
            break;
          }
          case 18: {
            CancelSecID = input.ReadString();
            break;
          }
          case 24: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_134_TRANS_EVENT_REP : pb::IMessage<ID_134_TRANS_EVENT_REP> {
    private static readonly pb::MessageParser<ID_134_TRANS_EVENT_REP> _parser = new pb::MessageParser<ID_134_TRANS_EVENT_REP>(() => new ID_134_TRANS_EVENT_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_134_TRANS_EVENT_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_134_TRANS_EVENT_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_134_TRANS_EVENT_REP(ID_134_TRANS_EVENT_REP other) : this() {
      eventType_ = other.eventType_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      leftGuideLockStatus_ = other.leftGuideLockStatus_;
      rightGuideLockStatus_ = other.rightGuideLockStatus_;
      secDistance_ = other.secDistance_;
      speed_ = other.speed_;
      angle_ = other.angle_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_134_TRANS_EVENT_REP Clone() {
      return new ID_134_TRANS_EVENT_REP(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 2;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 3;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LeftGuideLockStatus" field.</summary>
    public const int LeftGuideLockStatusFieldNumber = 5;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhGuideStatus leftGuideLockStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhGuideStatus LeftGuideLockStatus {
      get { return leftGuideLockStatus_; }
      set {
        leftGuideLockStatus_ = value;
      }
    }

    /// <summary>Field number for the "RightGuideLockStatus" field.</summary>
    public const int RightGuideLockStatusFieldNumber = 6;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhGuideStatus rightGuideLockStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhGuideStatus RightGuideLockStatus {
      get { return rightGuideLockStatus_; }
      set {
        rightGuideLockStatus_ = value;
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 7;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 8;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 9;
    private double angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 10;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 11;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_134_TRANS_EVENT_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_134_TRANS_EVENT_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (LeftGuideLockStatus != other.LeftGuideLockStatus) return false;
      if (RightGuideLockStatus != other.RightGuideLockStatus) return false;
      if (SecDistance != other.SecDistance) return false;
      if (Speed != other.Speed) return false;
      if (Angle != other.Angle) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (LeftGuideLockStatus != 0) hash ^= LeftGuideLockStatus.GetHashCode();
      if (RightGuideLockStatus != 0) hash ^= RightGuideLockStatus.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      if (Angle != 0D) hash ^= Angle.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrentSecID);
      }
      if (LeftGuideLockStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LeftGuideLockStatus);
      }
      if (RightGuideLockStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RightGuideLockStatus);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SecDistance);
      }
      if (Speed != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Speed);
      }
      if (Angle != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Angle);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(YAxis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (LeftGuideLockStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LeftGuideLockStatus);
      }
      if (RightGuideLockStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RightGuideLockStatus);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (Speed != 0D) {
        size += 1 + 8;
      }
      if (Angle != 0D) {
        size += 1 + 8;
      }
      if (XAxis != 0D) {
        size += 1 + 8;
      }
      if (YAxis != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_134_TRANS_EVENT_REP other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.LeftGuideLockStatus != 0) {
        LeftGuideLockStatus = other.LeftGuideLockStatus;
      }
      if (other.RightGuideLockStatus != 0) {
        RightGuideLockStatus = other.RightGuideLockStatus;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.EventType) input.ReadEnum();
            break;
          }
          case 18: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 26: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 40: {
            leftGuideLockStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhGuideStatus) input.ReadEnum();
            break;
          }
          case 48: {
            rightGuideLockStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhGuideStatus) input.ReadEnum();
            break;
          }
          case 56: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 65: {
            Speed = input.ReadDouble();
            break;
          }
          case 73: {
            Angle = input.ReadDouble();
            break;
          }
          case 81: {
            XAxis = input.ReadDouble();
            break;
          }
          case 89: {
            YAxis = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_35_CARRIER_ID_RENAME_REQUEST : pb::IMessage<ID_35_CARRIER_ID_RENAME_REQUEST> {
    private static readonly pb::MessageParser<ID_35_CARRIER_ID_RENAME_REQUEST> _parser = new pb::MessageParser<ID_35_CARRIER_ID_RENAME_REQUEST>(() => new ID_35_CARRIER_ID_RENAME_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_35_CARRIER_ID_RENAME_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_35_CARRIER_ID_RENAME_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_35_CARRIER_ID_RENAME_REQUEST(ID_35_CARRIER_ID_RENAME_REQUEST other) : this() {
      oLDBOXID_ = other.oLDBOXID_;
      nEWBOXID_ = other.nEWBOXID_;
      oLDLOTID_ = other.oLDLOTID_;
      nEWLOTID_ = other.nEWLOTID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_35_CARRIER_ID_RENAME_REQUEST Clone() {
      return new ID_35_CARRIER_ID_RENAME_REQUEST(this);
    }

    /// <summary>Field number for the "OLD_BOX_ID" field.</summary>
    public const int OLDBOXIDFieldNumber = 1;
    private string oLDBOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OLDBOXID {
      get { return oLDBOXID_; }
      set {
        oLDBOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NEW_BOX_ID" field.</summary>
    public const int NEWBOXIDFieldNumber = 2;
    private string nEWBOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NEWBOXID {
      get { return nEWBOXID_; }
      set {
        nEWBOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OLD_LOT_ID" field.</summary>
    public const int OLDLOTIDFieldNumber = 5;
    private string oLDLOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OLDLOTID {
      get { return oLDLOTID_; }
      set {
        oLDLOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NEW_LOT_ID" field.</summary>
    public const int NEWLOTIDFieldNumber = 6;
    private string nEWLOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NEWLOTID {
      get { return nEWLOTID_; }
      set {
        nEWLOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_35_CARRIER_ID_RENAME_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_35_CARRIER_ID_RENAME_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OLDBOXID != other.OLDBOXID) return false;
      if (NEWBOXID != other.NEWBOXID) return false;
      if (OLDLOTID != other.OLDLOTID) return false;
      if (NEWLOTID != other.NEWLOTID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OLDBOXID.Length != 0) hash ^= OLDBOXID.GetHashCode();
      if (NEWBOXID.Length != 0) hash ^= NEWBOXID.GetHashCode();
      if (OLDLOTID.Length != 0) hash ^= OLDLOTID.GetHashCode();
      if (NEWLOTID.Length != 0) hash ^= NEWLOTID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OLDBOXID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OLDBOXID);
      }
      if (NEWBOXID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NEWBOXID);
      }
      if (OLDLOTID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OLDLOTID);
      }
      if (NEWLOTID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NEWLOTID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OLDBOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OLDBOXID);
      }
      if (NEWBOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NEWBOXID);
      }
      if (OLDLOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OLDLOTID);
      }
      if (NEWLOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NEWLOTID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_35_CARRIER_ID_RENAME_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.OLDBOXID.Length != 0) {
        OLDBOXID = other.OLDBOXID;
      }
      if (other.NEWBOXID.Length != 0) {
        NEWBOXID = other.NEWBOXID;
      }
      if (other.OLDLOTID.Length != 0) {
        OLDLOTID = other.OLDLOTID;
      }
      if (other.NEWLOTID.Length != 0) {
        NEWLOTID = other.NEWLOTID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OLDBOXID = input.ReadString();
            break;
          }
          case 18: {
            NEWBOXID = input.ReadString();
            break;
          }
          case 42: {
            OLDLOTID = input.ReadString();
            break;
          }
          case 50: {
            NEWLOTID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_135_CARRIER_ID_RENAME_RESPONSE : pb::IMessage<ID_135_CARRIER_ID_RENAME_RESPONSE> {
    private static readonly pb::MessageParser<ID_135_CARRIER_ID_RENAME_RESPONSE> _parser = new pb::MessageParser<ID_135_CARRIER_ID_RENAME_RESPONSE>(() => new ID_135_CARRIER_ID_RENAME_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_135_CARRIER_ID_RENAME_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_135_CARRIER_ID_RENAME_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_135_CARRIER_ID_RENAME_RESPONSE(ID_135_CARRIER_ID_RENAME_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_135_CARRIER_ID_RENAME_RESPONSE Clone() {
      return new ID_135_CARRIER_ID_RENAME_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_135_CARRIER_ID_RENAME_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_135_CARRIER_ID_RENAME_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_135_CARRIER_ID_RENAME_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReserveInfo : pb::IMessage<ReserveInfo> {
    private static readonly pb::MessageParser<ReserveInfo> _parser = new pb::MessageParser<ReserveInfo>(() => new ReserveInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveInfo(ReserveInfo other) : this() {
      reserveSectionID_ = other.reserveSectionID_;
      driveDirction_ = other.driveDirction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveInfo Clone() {
      return new ReserveInfo(this);
    }

    /// <summary>Field number for the "Reserve_Section_ID" field.</summary>
    public const int ReserveSectionIDFieldNumber = 1;
    private string reserveSectionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReserveSectionID {
      get { return reserveSectionID_; }
      set {
        reserveSectionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DriveDirction" field.</summary>
    public const int DriveDirctionFieldNumber = 2;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction driveDirction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction DriveDirction {
      get { return driveDirction_; }
      set {
        driveDirction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReserveSectionID != other.ReserveSectionID) return false;
      if (DriveDirction != other.DriveDirction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReserveSectionID.Length != 0) hash ^= ReserveSectionID.GetHashCode();
      if (DriveDirction != 0) hash ^= DriveDirction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReserveSectionID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReserveSectionID);
      }
      if (DriveDirction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DriveDirction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReserveSectionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReserveSectionID);
      }
      if (DriveDirction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DriveDirction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveInfo other) {
      if (other == null) {
        return;
      }
      if (other.ReserveSectionID.Length != 0) {
        ReserveSectionID = other.ReserveSectionID;
      }
      if (other.DriveDirction != 0) {
        DriveDirction = other.DriveDirction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReserveSectionID = input.ReadString();
            break;
          }
          case 16: {
            driveDirction_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_136_TRANS_EVENT_REP : pb::IMessage<ID_136_TRANS_EVENT_REP> {
    private static readonly pb::MessageParser<ID_136_TRANS_EVENT_REP> _parser = new pb::MessageParser<ID_136_TRANS_EVENT_REP>(() => new ID_136_TRANS_EVENT_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_136_TRANS_EVENT_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_136_TRANS_EVENT_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_136_TRANS_EVENT_REP(ID_136_TRANS_EVENT_REP other) : this() {
      eventType_ = other.eventType_;
      reserveInfos_ = other.reserveInfos_.Clone();
      requestBlockID_ = other.requestBlockID_;
      requestHIDID_ = other.requestHIDID_;
      bOXID_ = other.bOXID_;
      lOTID_ = other.lOTID_;
      releaseBlockAdrID_ = other.releaseBlockAdrID_;
      releaseHIDAdrID_ = other.releaseHIDAdrID_;
      loadPortID_ = other.loadPortID_;
      unloadPortID_ = other.unloadPortID_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      secDistance_ = other.secDistance_;
      bCRReadResult_ = other.bCRReadResult_;
      cmdID_ = other.cmdID_;
      location_ = other.location_;
      isNeedAvoid_ = other.isNeedAvoid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_136_TRANS_EVENT_REP Clone() {
      return new ID_136_TRANS_EVENT_REP(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(18, global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "Request_Block_ID" field.</summary>
    public const int RequestBlockIDFieldNumber = 3;
    private string requestBlockID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestBlockID {
      get { return requestBlockID_; }
      set {
        requestBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Request_HID_ID" field.</summary>
    public const int RequestHIDIDFieldNumber = 4;
    private string requestHIDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestHIDID {
      get { return requestHIDID_; }
      set {
        requestHIDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BOX_ID" field.</summary>
    public const int BOXIDFieldNumber = 5;
    private string bOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BOXID {
      get { return bOXID_; }
      set {
        bOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT_ID" field.</summary>
    public const int LOTIDFieldNumber = 7;
    private string lOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOTID {
      get { return lOTID_; }
      set {
        lOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Release_Block_AdrID" field.</summary>
    public const int ReleaseBlockAdrIDFieldNumber = 8;
    private string releaseBlockAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReleaseBlockAdrID {
      get { return releaseBlockAdrID_; }
      set {
        releaseBlockAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Release_HID_AdrID" field.</summary>
    public const int ReleaseHIDAdrIDFieldNumber = 9;
    private string releaseHIDAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReleaseHIDAdrID {
      get { return releaseHIDAdrID_; }
      set {
        releaseHIDAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPortID" field.</summary>
    public const int LoadPortIDFieldNumber = 10;
    private string loadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPortID {
      get { return loadPortID_; }
      set {
        loadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnloadPortID" field.</summary>
    public const int UnloadPortIDFieldNumber = 11;
    private string unloadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnloadPortID {
      get { return unloadPortID_; }
      set {
        unloadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 12;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 13;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 14;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "BCRReadResult" field.</summary>
    public const int BCRReadResultFieldNumber = 15;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.BCRReadResult bCRReadResult_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.BCRReadResult BCRReadResult {
      get { return bCRReadResult_; }
      set {
        bCRReadResult_ = value;
      }
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 16;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Location" field.</summary>
    public const int LocationFieldNumber = 17;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.AGVLocation location_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.AGVLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "IsNeedAvoid" field.</summary>
    public const int IsNeedAvoidFieldNumber = 18;
    private bool isNeedAvoid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNeedAvoid {
      get { return isNeedAvoid_; }
      set {
        isNeedAvoid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_136_TRANS_EVENT_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_136_TRANS_EVENT_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (RequestBlockID != other.RequestBlockID) return false;
      if (RequestHIDID != other.RequestHIDID) return false;
      if (BOXID != other.BOXID) return false;
      if (LOTID != other.LOTID) return false;
      if (ReleaseBlockAdrID != other.ReleaseBlockAdrID) return false;
      if (ReleaseHIDAdrID != other.ReleaseHIDAdrID) return false;
      if (LoadPortID != other.LoadPortID) return false;
      if (UnloadPortID != other.UnloadPortID) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (BCRReadResult != other.BCRReadResult) return false;
      if (CmdID != other.CmdID) return false;
      if (Location != other.Location) return false;
      if (IsNeedAvoid != other.IsNeedAvoid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (RequestBlockID.Length != 0) hash ^= RequestBlockID.GetHashCode();
      if (RequestHIDID.Length != 0) hash ^= RequestHIDID.GetHashCode();
      if (BOXID.Length != 0) hash ^= BOXID.GetHashCode();
      if (LOTID.Length != 0) hash ^= LOTID.GetHashCode();
      if (ReleaseBlockAdrID.Length != 0) hash ^= ReleaseBlockAdrID.GetHashCode();
      if (ReleaseHIDAdrID.Length != 0) hash ^= ReleaseHIDAdrID.GetHashCode();
      if (LoadPortID.Length != 0) hash ^= LoadPortID.GetHashCode();
      if (UnloadPortID.Length != 0) hash ^= UnloadPortID.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (BCRReadResult != 0) hash ^= BCRReadResult.GetHashCode();
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (Location != 0) hash ^= Location.GetHashCode();
      if (IsNeedAvoid != false) hash ^= IsNeedAvoid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (RequestBlockID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RequestBlockID);
      }
      if (RequestHIDID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequestHIDID);
      }
      if (BOXID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BOXID);
      }
      if (LOTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LOTID);
      }
      if (ReleaseBlockAdrID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ReleaseBlockAdrID);
      }
      if (ReleaseHIDAdrID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ReleaseHIDAdrID);
      }
      if (LoadPortID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UnloadPortID);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CurrentSecID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(SecDistance);
      }
      if (BCRReadResult != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) BCRReadResult);
      }
      if (CmdID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CmdID);
      }
      if (Location != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Location);
      }
      if (IsNeedAvoid != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsNeedAvoid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (RequestBlockID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestBlockID);
      }
      if (RequestHIDID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestHIDID);
      }
      if (BOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BOXID);
      }
      if (LOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOTID);
      }
      if (ReleaseBlockAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleaseBlockAdrID);
      }
      if (ReleaseHIDAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleaseHIDAdrID);
      }
      if (LoadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnloadPortID);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (BCRReadResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BCRReadResult);
      }
      if (CmdID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (Location != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Location);
      }
      if (IsNeedAvoid != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_136_TRANS_EVENT_REP other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.RequestBlockID.Length != 0) {
        RequestBlockID = other.RequestBlockID;
      }
      if (other.RequestHIDID.Length != 0) {
        RequestHIDID = other.RequestHIDID;
      }
      if (other.BOXID.Length != 0) {
        BOXID = other.BOXID;
      }
      if (other.LOTID.Length != 0) {
        LOTID = other.LOTID;
      }
      if (other.ReleaseBlockAdrID.Length != 0) {
        ReleaseBlockAdrID = other.ReleaseBlockAdrID;
      }
      if (other.ReleaseHIDAdrID.Length != 0) {
        ReleaseHIDAdrID = other.ReleaseHIDAdrID;
      }
      if (other.LoadPortID.Length != 0) {
        LoadPortID = other.LoadPortID;
      }
      if (other.UnloadPortID.Length != 0) {
        UnloadPortID = other.UnloadPortID;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.BCRReadResult != 0) {
        BCRReadResult = other.BCRReadResult;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.Location != 0) {
        Location = other.Location;
      }
      if (other.IsNeedAvoid != false) {
        IsNeedAvoid = other.IsNeedAvoid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.EventType) input.ReadEnum();
            break;
          }
          case 18: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 26: {
            RequestBlockID = input.ReadString();
            break;
          }
          case 34: {
            RequestHIDID = input.ReadString();
            break;
          }
          case 42: {
            BOXID = input.ReadString();
            break;
          }
          case 58: {
            LOTID = input.ReadString();
            break;
          }
          case 66: {
            ReleaseBlockAdrID = input.ReadString();
            break;
          }
          case 74: {
            ReleaseHIDAdrID = input.ReadString();
            break;
          }
          case 82: {
            LoadPortID = input.ReadString();
            break;
          }
          case 90: {
            UnloadPortID = input.ReadString();
            break;
          }
          case 98: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 106: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 112: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 120: {
            bCRReadResult_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.BCRReadResult) input.ReadEnum();
            break;
          }
          case 130: {
            CmdID = input.ReadString();
            break;
          }
          case 136: {
            location_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.AGVLocation) input.ReadEnum();
            break;
          }
          case 144: {
            IsNeedAvoid = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_36_TRANS_EVENT_RESPONSE : pb::IMessage<ID_36_TRANS_EVENT_RESPONSE> {
    private static readonly pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE> _parser = new pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE>(() => new ID_36_TRANS_EVENT_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_36_TRANS_EVENT_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_36_TRANS_EVENT_RESPONSE(ID_36_TRANS_EVENT_RESPONSE other) : this() {
      isBlockPass_ = other.isBlockPass_;
      isReserveSuccess_ = other.isReserveSuccess_;
      reserveInfos_ = other.reserveInfos_.Clone();
      isHIDPass_ = other.isHIDPass_;
      renameBOXID_ = other.renameBOXID_;
      renameLOTID_ = other.renameLOTID_;
      replyActiveType_ = other.replyActiveType_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_36_TRANS_EVENT_RESPONSE Clone() {
      return new ID_36_TRANS_EVENT_RESPONSE(this);
    }

    /// <summary>Field number for the "Is_Block_Pass" field.</summary>
    public const int IsBlockPassFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.PassType isBlockPass_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.PassType IsBlockPass {
      get { return isBlockPass_; }
      set {
        isBlockPass_ = value;
      }
    }

    /// <summary>Field number for the "Is_Reserve_Success" field.</summary>
    public const int IsReserveSuccessFieldNumber = 2;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveResult isReserveSuccess_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveResult IsReserveSuccess {
      get { return isReserveSuccess_; }
      set {
        isReserveSuccess_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(26, global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "Is_HID_Pass" field.</summary>
    public const int IsHIDPassFieldNumber = 4;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.PassType isHIDPass_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.PassType IsHIDPass {
      get { return isHIDPass_; }
      set {
        isHIDPass_ = value;
      }
    }

    /// <summary>Field number for the "RenameBOXID" field.</summary>
    public const int RenameBOXIDFieldNumber = 5;
    private string renameBOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RenameBOXID {
      get { return renameBOXID_; }
      set {
        renameBOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RenameLOTID" field.</summary>
    public const int RenameLOTIDFieldNumber = 7;
    private string renameLOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RenameLOTID {
      get { return renameLOTID_; }
      set {
        renameLOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReplyActiveType" field.</summary>
    public const int ReplyActiveTypeFieldNumber = 8;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType replyActiveType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType ReplyActiveType {
      get { return replyActiveType_; }
      set {
        replyActiveType_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 9;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_36_TRANS_EVENT_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_36_TRANS_EVENT_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBlockPass != other.IsBlockPass) return false;
      if (IsReserveSuccess != other.IsReserveSuccess) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (IsHIDPass != other.IsHIDPass) return false;
      if (RenameBOXID != other.RenameBOXID) return false;
      if (RenameLOTID != other.RenameLOTID) return false;
      if (ReplyActiveType != other.ReplyActiveType) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsBlockPass != 0) hash ^= IsBlockPass.GetHashCode();
      if (IsReserveSuccess != 0) hash ^= IsReserveSuccess.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (IsHIDPass != 0) hash ^= IsHIDPass.GetHashCode();
      if (RenameBOXID.Length != 0) hash ^= RenameBOXID.GetHashCode();
      if (RenameLOTID.Length != 0) hash ^= RenameLOTID.GetHashCode();
      if (ReplyActiveType != 0) hash ^= ReplyActiveType.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBlockPass != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IsBlockPass);
      }
      if (IsReserveSuccess != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) IsReserveSuccess);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (IsHIDPass != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) IsHIDPass);
      }
      if (RenameBOXID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RenameBOXID);
      }
      if (RenameLOTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RenameLOTID);
      }
      if (ReplyActiveType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ReplyActiveType);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBlockPass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsBlockPass);
      }
      if (IsReserveSuccess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsReserveSuccess);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (IsHIDPass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsHIDPass);
      }
      if (RenameBOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenameBOXID);
      }
      if (RenameLOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenameLOTID);
      }
      if (ReplyActiveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReplyActiveType);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_36_TRANS_EVENT_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.IsBlockPass != 0) {
        IsBlockPass = other.IsBlockPass;
      }
      if (other.IsReserveSuccess != 0) {
        IsReserveSuccess = other.IsReserveSuccess;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.IsHIDPass != 0) {
        IsHIDPass = other.IsHIDPass;
      }
      if (other.RenameBOXID.Length != 0) {
        RenameBOXID = other.RenameBOXID;
      }
      if (other.RenameLOTID.Length != 0) {
        RenameLOTID = other.RenameLOTID;
      }
      if (other.ReplyActiveType != 0) {
        ReplyActiveType = other.ReplyActiveType;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            isBlockPass_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.PassType) input.ReadEnum();
            break;
          }
          case 16: {
            isReserveSuccess_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveResult) input.ReadEnum();
            break;
          }
          case 26: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 32: {
            isHIDPass_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.PassType) input.ReadEnum();
            break;
          }
          case 42: {
            RenameBOXID = input.ReadString();
            break;
          }
          case 58: {
            RenameLOTID = input.ReadString();
            break;
          }
          case 64: {
            replyActiveType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType) input.ReadEnum();
            break;
          }
          case 72: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_37_TRANS_CANCEL_REQUEST : pb::IMessage<ID_37_TRANS_CANCEL_REQUEST> {
    private static readonly pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST> _parser = new pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST>(() => new ID_37_TRANS_CANCEL_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_37_TRANS_CANCEL_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_37_TRANS_CANCEL_REQUEST(ID_37_TRANS_CANCEL_REQUEST other) : this() {
      cmdID_ = other.cmdID_;
      actType_ = other.actType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_37_TRANS_CANCEL_REQUEST Clone() {
      return new ID_37_TRANS_CANCEL_REQUEST(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActType" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_37_TRANS_CANCEL_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_37_TRANS_CANCEL_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (ActType != other.ActType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_37_TRANS_CANCEL_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            actType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_137_TRANS_CANCEL_RESPONSE : pb::IMessage<ID_137_TRANS_CANCEL_RESPONSE> {
    private static readonly pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE> _parser = new pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE>(() => new ID_137_TRANS_CANCEL_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_137_TRANS_CANCEL_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_137_TRANS_CANCEL_RESPONSE(ID_137_TRANS_CANCEL_RESPONSE other) : this() {
      cmdID_ = other.cmdID_;
      actType_ = other.actType_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_137_TRANS_CANCEL_RESPONSE Clone() {
      return new ID_137_TRANS_CANCEL_RESPONSE(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActType" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 3;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_137_TRANS_CANCEL_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_137_TRANS_CANCEL_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (ActType != other.ActType) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_137_TRANS_CANCEL_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            actType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CMDCancelType) input.ReadEnum();
            break;
          }
          case 24: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FromToAdr : pb::IMessage<FromToAdr> {
    private static readonly pb::MessageParser<FromToAdr> _parser = new pb::MessageParser<FromToAdr>(() => new FromToAdr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromToAdr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromToAdr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromToAdr(FromToAdr other) : this() {
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromToAdr Clone() {
      return new FromToAdr(this);
    }

    /// <summary>Field number for the "From" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "To" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromToAdr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromToAdr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromToAdr other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuideInfo : pb::IMessage<GuideInfo> {
    private static readonly pb::MessageParser<GuideInfo> _parser = new pb::MessageParser<GuideInfo>(() => new GuideInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfo(GuideInfo other) : this() {
      FromTo = other.fromTo_ != null ? other.FromTo.Clone() : null;
      guideSections_ = other.guideSections_.Clone();
      guideAddresses_ = other.guideAddresses_.Clone();
      distance_ = other.distance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfo Clone() {
      return new GuideInfo(this);
    }

    /// <summary>Field number for the "FromTo" field.</summary>
    public const int FromToFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr fromTo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr FromTo {
      get { return fromTo_; }
      set {
        fromTo_ = value;
      }
    }

    /// <summary>Field number for the "GuideSections" field.</summary>
    public const int GuideSectionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_guideSections_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> guideSections_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideSections {
      get { return guideSections_; }
    }

    /// <summary>Field number for the "GuideAddresses" field.</summary>
    public const int GuideAddressesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_guideAddresses_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> guideAddresses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideAddresses {
      get { return guideAddresses_; }
    }

    /// <summary>Field number for the "Distance" field.</summary>
    public const int DistanceFieldNumber = 4;
    private uint distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FromTo, other.FromTo)) return false;
      if(!guideSections_.Equals(other.guideSections_)) return false;
      if(!guideAddresses_.Equals(other.guideAddresses_)) return false;
      if (Distance != other.Distance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fromTo_ != null) hash ^= FromTo.GetHashCode();
      hash ^= guideSections_.GetHashCode();
      hash ^= guideAddresses_.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fromTo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FromTo);
      }
      guideSections_.WriteTo(output, _repeated_guideSections_codec);
      guideAddresses_.WriteTo(output, _repeated_guideAddresses_codec);
      if (Distance != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Distance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fromTo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromTo);
      }
      size += guideSections_.CalculateSize(_repeated_guideSections_codec);
      size += guideAddresses_.CalculateSize(_repeated_guideAddresses_codec);
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Distance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideInfo other) {
      if (other == null) {
        return;
      }
      if (other.fromTo_ != null) {
        if (fromTo_ == null) {
          fromTo_ = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr();
        }
        FromTo.MergeFrom(other.FromTo);
      }
      guideSections_.Add(other.guideSections_);
      guideAddresses_.Add(other.guideAddresses_);
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (fromTo_ == null) {
              fromTo_ = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr();
            }
            input.ReadMessage(fromTo_);
            break;
          }
          case 18: {
            guideSections_.AddEntriesFrom(input, _repeated_guideSections_codec);
            break;
          }
          case 26: {
            guideAddresses_.AddEntriesFrom(input, _repeated_guideAddresses_codec);
            break;
          }
          case 32: {
            Distance = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_138_GUIDE_INFO_REQUEST : pb::IMessage<ID_138_GUIDE_INFO_REQUEST> {
    private static readonly pb::MessageParser<ID_138_GUIDE_INFO_REQUEST> _parser = new pb::MessageParser<ID_138_GUIDE_INFO_REQUEST>(() => new ID_138_GUIDE_INFO_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_138_GUIDE_INFO_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_138_GUIDE_INFO_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_138_GUIDE_INFO_REQUEST(ID_138_GUIDE_INFO_REQUEST other) : this() {
      fromToAdrList_ = other.fromToAdrList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_138_GUIDE_INFO_REQUEST Clone() {
      return new ID_138_GUIDE_INFO_REQUEST(this);
    }

    /// <summary>Field number for the "FromToAdrList" field.</summary>
    public const int FromToAdrListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr> _repeated_fromToAdrList_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr> fromToAdrList_ = new pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.FromToAdr> FromToAdrList {
      get { return fromToAdrList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_138_GUIDE_INFO_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_138_GUIDE_INFO_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fromToAdrList_.Equals(other.fromToAdrList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fromToAdrList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fromToAdrList_.WriteTo(output, _repeated_fromToAdrList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fromToAdrList_.CalculateSize(_repeated_fromToAdrList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_138_GUIDE_INFO_REQUEST other) {
      if (other == null) {
        return;
      }
      fromToAdrList_.Add(other.fromToAdrList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fromToAdrList_.AddEntriesFrom(input, _repeated_fromToAdrList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_38_GUIDE_INFO_RESPONSE : pb::IMessage<ID_38_GUIDE_INFO_RESPONSE> {
    private static readonly pb::MessageParser<ID_38_GUIDE_INFO_RESPONSE> _parser = new pb::MessageParser<ID_38_GUIDE_INFO_RESPONSE>(() => new ID_38_GUIDE_INFO_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_38_GUIDE_INFO_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_38_GUIDE_INFO_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_38_GUIDE_INFO_RESPONSE(ID_38_GUIDE_INFO_RESPONSE other) : this() {
      guideInfoList_ = other.guideInfoList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_38_GUIDE_INFO_RESPONSE Clone() {
      return new ID_38_GUIDE_INFO_RESPONSE(this);
    }

    /// <summary>Field number for the "GuideInfoList" field.</summary>
    public const int GuideInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.AKA.ProtocolFormat.RGVMessage.GuideInfo> _repeated_guideInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.AKA.ProtocolFormat.RGVMessage.GuideInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.GuideInfo> guideInfoList_ = new pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.GuideInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.GuideInfo> GuideInfoList {
      get { return guideInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_38_GUIDE_INFO_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_38_GUIDE_INFO_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!guideInfoList_.Equals(other.guideInfoList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= guideInfoList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guideInfoList_.WriteTo(output, _repeated_guideInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guideInfoList_.CalculateSize(_repeated_guideInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_38_GUIDE_INFO_RESPONSE other) {
      if (other == null) {
        return;
      }
      guideInfoList_.Add(other.guideInfoList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            guideInfoList_.AddEntriesFrom(input, _repeated_guideInfoList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_39_PAUSE_REQUEST : pb::IMessage<ID_39_PAUSE_REQUEST> {
    private static readonly pb::MessageParser<ID_39_PAUSE_REQUEST> _parser = new pb::MessageParser<ID_39_PAUSE_REQUEST>(() => new ID_39_PAUSE_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_39_PAUSE_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_39_PAUSE_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_39_PAUSE_REQUEST(ID_39_PAUSE_REQUEST other) : this() {
      eventType_ = other.eventType_;
      pauseType_ = other.pauseType_;
      reserveInfos_ = other.reserveInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_39_PAUSE_REQUEST Clone() {
      return new ID_39_PAUSE_REQUEST(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseEvent eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseEvent EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "PauseType" field.</summary>
    public const int PauseTypeFieldNumber = 2;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseType pauseType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseType PauseType {
      get { return pauseType_; }
      set {
        pauseType_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(26, global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_39_PAUSE_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_39_PAUSE_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (PauseType != other.PauseType) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (PauseType != 0) hash ^= PauseType.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (PauseType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PauseType);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (PauseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseType);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_39_PAUSE_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.PauseType != 0) {
        PauseType = other.PauseType;
      }
      reserveInfos_.Add(other.reserveInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseEvent) input.ReadEnum();
            break;
          }
          case 16: {
            pauseType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseType) input.ReadEnum();
            break;
          }
          case 26: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_139_PAUSE_RESPONSE : pb::IMessage<ID_139_PAUSE_RESPONSE> {
    private static readonly pb::MessageParser<ID_139_PAUSE_RESPONSE> _parser = new pb::MessageParser<ID_139_PAUSE_RESPONSE>(() => new ID_139_PAUSE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_139_PAUSE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_139_PAUSE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_139_PAUSE_RESPONSE(ID_139_PAUSE_RESPONSE other) : this() {
      eventType_ = other.eventType_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_139_PAUSE_RESPONSE Clone() {
      return new ID_139_PAUSE_RESPONSE(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseEvent eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseEvent EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 2;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_139_PAUSE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_139_PAUSE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_139_PAUSE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.PauseEvent) input.ReadEnum();
            break;
          }
          case 16: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_41_MODE_CHANGE_REQ : pb::IMessage<ID_41_MODE_CHANGE_REQ> {
    private static readonly pb::MessageParser<ID_41_MODE_CHANGE_REQ> _parser = new pb::MessageParser<ID_41_MODE_CHANGE_REQ>(() => new ID_41_MODE_CHANGE_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_41_MODE_CHANGE_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_41_MODE_CHANGE_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_41_MODE_CHANGE_REQ(ID_41_MODE_CHANGE_REQ other) : this() {
      operatingVHMode_ = other.operatingVHMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_41_MODE_CHANGE_REQ Clone() {
      return new ID_41_MODE_CHANGE_REQ(this);
    }

    /// <summary>Field number for the "OperatingVHMode" field.</summary>
    public const int OperatingVHModeFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.OperatingVHMode operatingVHMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.OperatingVHMode OperatingVHMode {
      get { return operatingVHMode_; }
      set {
        operatingVHMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_41_MODE_CHANGE_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_41_MODE_CHANGE_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperatingVHMode != other.OperatingVHMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperatingVHMode != 0) hash ^= OperatingVHMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperatingVHMode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OperatingVHMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperatingVHMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperatingVHMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_41_MODE_CHANGE_REQ other) {
      if (other == null) {
        return;
      }
      if (other.OperatingVHMode != 0) {
        OperatingVHMode = other.OperatingVHMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operatingVHMode_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.OperatingVHMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_141_MODE_CHANGE_RESPONSE : pb::IMessage<ID_141_MODE_CHANGE_RESPONSE> {
    private static readonly pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE>(() => new ID_141_MODE_CHANGE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_141_MODE_CHANGE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_141_MODE_CHANGE_RESPONSE(ID_141_MODE_CHANGE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_141_MODE_CHANGE_RESPONSE Clone() {
      return new ID_141_MODE_CHANGE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_141_MODE_CHANGE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_141_MODE_CHANGE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_141_MODE_CHANGE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_43_STATUS_REQUEST : pb::IMessage<ID_43_STATUS_REQUEST> {
    private static readonly pb::MessageParser<ID_43_STATUS_REQUEST> _parser = new pb::MessageParser<ID_43_STATUS_REQUEST>(() => new ID_43_STATUS_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_43_STATUS_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_43_STATUS_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_43_STATUS_REQUEST(ID_43_STATUS_REQUEST other) : this() {
      systemTime_ = other.systemTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_43_STATUS_REQUEST Clone() {
      return new ID_43_STATUS_REQUEST(this);
    }

    /// <summary>Field number for the "SystemTime" field.</summary>
    public const int SystemTimeFieldNumber = 1;
    private string systemTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SystemTime {
      get { return systemTime_; }
      set {
        systemTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_43_STATUS_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_43_STATUS_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SystemTime != other.SystemTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SystemTime.Length != 0) hash ^= SystemTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SystemTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SystemTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SystemTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_43_STATUS_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.SystemTime.Length != 0) {
        SystemTime = other.SystemTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SystemTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_143_STATUS_RESPONSE : pb::IMessage<ID_143_STATUS_RESPONSE> {
    private static readonly pb::MessageParser<ID_143_STATUS_RESPONSE> _parser = new pb::MessageParser<ID_143_STATUS_RESPONSE>(() => new ID_143_STATUS_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_143_STATUS_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_143_STATUS_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_143_STATUS_RESPONSE(ID_143_STATUS_RESPONSE other) : this() {
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      modeStatus_ = other.modeStatus_;
      actionStatus_ = other.actionStatus_;
      powerStatus_ = other.powerStatus_;
      obstacleStatus_ = other.obstacleStatus_;
      blockingStatus_ = other.blockingStatus_;
      hIDStatus_ = other.hIDStatus_;
      pauseStatus_ = other.pauseStatus_;
      errorStatus_ = other.errorStatus_;
      reserveStatus_ = other.reserveStatus_;
      secDistance_ = other.secDistance_;
      obstDistance_ = other.obstDistance_;
      obstVehicleID_ = other.obstVehicleID_;
      stoppedBlockID_ = other.stoppedBlockID_;
      stoppedHIDID_ = other.stoppedHIDID_;
      earthquakePauseTatus_ = other.earthquakePauseTatus_;
      safetyPauseStatus_ = other.safetyPauseStatus_;
      reserveInfos_ = other.reserveInfos_.Clone();
      drivingDirection_ = other.drivingDirection_;
      speed_ = other.speed_;
      angle_ = other.angle_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      cmdId1_ = other.cmdId1_;
      cmdState1_ = other.cmdState1_;
      cmdId2_ = other.cmdId2_;
      cmdState2_ = other.cmdState2_;
      cmdId3_ = other.cmdId3_;
      cmdState3_ = other.cmdState3_;
      cmdId4_ = other.cmdId4_;
      cmdState4_ = other.cmdState4_;
      hasBoxL_ = other.hasBoxL_;
      boxIdL_ = other.boxIdL_;
      hasBoxR_ = other.hasBoxR_;
      boxIdR_ = other.boxIdR_;
      shelfStatusL_ = other.shelfStatusL_;
      shelfStatusR_ = other.shelfStatusR_;
      currentExcuteCmdId_ = other.currentExcuteCmdId_;
      willPassGuideSection_ = other.willPassGuideSection_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_143_STATUS_RESPONSE Clone() {
      return new ID_143_STATUS_RESPONSE(this);
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 1;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 2;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModeStatus" field.</summary>
    public const int ModeStatusFieldNumber = 3;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHModeStatus modeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHModeStatus ModeStatus {
      get { return modeStatus_; }
      set {
        modeStatus_ = value;
      }
    }

    /// <summary>Field number for the "ActionStatus" field.</summary>
    public const int ActionStatusFieldNumber = 4;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHActionStatus actionStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHActionStatus ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    /// <summary>Field number for the "PowerStatus" field.</summary>
    public const int PowerStatusFieldNumber = 5;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhPowerStatus powerStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhPowerStatus PowerStatus {
      get { return powerStatus_; }
      set {
        powerStatus_ = value;
      }
    }

    /// <summary>Field number for the "ObstacleStatus" field.</summary>
    public const int ObstacleStatusFieldNumber = 6;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle obstacleStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle ObstacleStatus {
      get { return obstacleStatus_; }
      set {
        obstacleStatus_ = value;
      }
    }

    /// <summary>Field number for the "BlockingStatus" field.</summary>
    public const int BlockingStatusFieldNumber = 7;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle blockingStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle BlockingStatus {
      get { return blockingStatus_; }
      set {
        blockingStatus_ = value;
      }
    }

    /// <summary>Field number for the "HIDStatus" field.</summary>
    public const int HIDStatusFieldNumber = 8;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle hIDStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle HIDStatus {
      get { return hIDStatus_; }
      set {
        hIDStatus_ = value;
      }
    }

    /// <summary>Field number for the "PauseStatus" field.</summary>
    public const int PauseStatusFieldNumber = 9;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle pauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle PauseStatus {
      get { return pauseStatus_; }
      set {
        pauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ErrorStatus" field.</summary>
    public const int ErrorStatusFieldNumber = 10;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle errorStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle ErrorStatus {
      get { return errorStatus_; }
      set {
        errorStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveStatus" field.</summary>
    public const int ReserveStatusFieldNumber = 11;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle reserveStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle ReserveStatus {
      get { return reserveStatus_; }
      set {
        reserveStatus_ = value;
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 12;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Distance" field.</summary>
    public const int ObstDistanceFieldNumber = 13;
    private int obstDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstDistance {
      get { return obstDistance_; }
      set {
        obstDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Vehicle_ID" field.</summary>
    public const int ObstVehicleIDFieldNumber = 14;
    private string obstVehicleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstVehicleID {
      get { return obstVehicleID_; }
      set {
        obstVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Stopped_Block_ID_" field.</summary>
    public const int StoppedBlockIDFieldNumber = 15;
    private string stoppedBlockID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedBlockID {
      get { return stoppedBlockID_; }
      set {
        stoppedBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Stopped_HID_ID" field.</summary>
    public const int StoppedHIDIDFieldNumber = 16;
    private string stoppedHIDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedHIDID {
      get { return stoppedHIDID_; }
      set {
        stoppedHIDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Earthquake_Pause_tatus" field.</summary>
    public const int EarthquakePauseTatusFieldNumber = 17;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle earthquakePauseTatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle EarthquakePauseTatus {
      get { return earthquakePauseTatus_; }
      set {
        earthquakePauseTatus_ = value;
      }
    }

    /// <summary>Field number for the "Safety_Pause_Status" field.</summary>
    public const int SafetyPauseStatusFieldNumber = 18;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle safetyPauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle SafetyPauseStatus {
      get { return safetyPauseStatus_; }
      set {
        safetyPauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 19;
    private static readonly pb::FieldCodec<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(154, global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "DrivingDirection" field.</summary>
    public const int DrivingDirectionFieldNumber = 20;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction drivingDirection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction DrivingDirection {
      get { return drivingDirection_; }
      set {
        drivingDirection_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 21;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 22;
    private double angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 23;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 24;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "CmdId1" field.</summary>
    public const int CmdId1FieldNumber = 25;
    private string cmdId1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId1 {
      get { return cmdId1_; }
      set {
        cmdId1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmdState_1" field.</summary>
    public const int CmdState1FieldNumber = 26;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState cmdState1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState CmdState1 {
      get { return cmdState1_; }
      set {
        cmdState1_ = value;
      }
    }

    /// <summary>Field number for the "CmdId2" field.</summary>
    public const int CmdId2FieldNumber = 27;
    private string cmdId2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId2 {
      get { return cmdId2_; }
      set {
        cmdId2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmdState_2" field.</summary>
    public const int CmdState2FieldNumber = 28;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState cmdState2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState CmdState2 {
      get { return cmdState2_; }
      set {
        cmdState2_ = value;
      }
    }

    /// <summary>Field number for the "CmdId3" field.</summary>
    public const int CmdId3FieldNumber = 29;
    private string cmdId3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId3 {
      get { return cmdId3_; }
      set {
        cmdId3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmdState_3" field.</summary>
    public const int CmdState3FieldNumber = 30;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState cmdState3_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState CmdState3 {
      get { return cmdState3_; }
      set {
        cmdState3_ = value;
      }
    }

    /// <summary>Field number for the "CmdId4" field.</summary>
    public const int CmdId4FieldNumber = 31;
    private string cmdId4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId4 {
      get { return cmdId4_; }
      set {
        cmdId4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmdState_4" field.</summary>
    public const int CmdState4FieldNumber = 32;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState cmdState4_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState CmdState4 {
      get { return cmdState4_; }
      set {
        cmdState4_ = value;
      }
    }

    /// <summary>Field number for the "HasBox_L" field.</summary>
    public const int HasBoxLFieldNumber = 33;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus hasBoxL_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus HasBoxL {
      get { return hasBoxL_; }
      set {
        hasBoxL_ = value;
      }
    }

    /// <summary>Field number for the "BoxIdL" field.</summary>
    public const int BoxIdLFieldNumber = 34;
    private string boxIdL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxIdL {
      get { return boxIdL_; }
      set {
        boxIdL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasBox_R" field.</summary>
    public const int HasBoxRFieldNumber = 35;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus hasBoxR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus HasBoxR {
      get { return hasBoxR_; }
      set {
        hasBoxR_ = value;
      }
    }

    /// <summary>Field number for the "BoxIdR" field.</summary>
    public const int BoxIdRFieldNumber = 36;
    private string boxIdR_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxIdR {
      get { return boxIdR_; }
      set {
        boxIdR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShelfStatus_L" field.</summary>
    public const int ShelfStatusLFieldNumber = 37;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus shelfStatusL_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus ShelfStatusL {
      get { return shelfStatusL_; }
      set {
        shelfStatusL_ = value;
      }
    }

    /// <summary>Field number for the "ShelfStatus_R" field.</summary>
    public const int ShelfStatusRFieldNumber = 38;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus shelfStatusR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus ShelfStatusR {
      get { return shelfStatusR_; }
      set {
        shelfStatusR_ = value;
      }
    }

    /// <summary>Field number for the "CurrentExcuteCmdId" field.</summary>
    public const int CurrentExcuteCmdIdFieldNumber = 39;
    private string currentExcuteCmdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentExcuteCmdId {
      get { return currentExcuteCmdId_; }
      set {
        currentExcuteCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WillPassGuideSection" field.</summary>
    public const int WillPassGuideSectionFieldNumber = 40;
    private static readonly pb::FieldCodec<string> _repeated_willPassGuideSection_codec
        = pb::FieldCodec.ForString(322);
    private readonly pbc::RepeatedField<string> willPassGuideSection_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WillPassGuideSection {
      get { return willPassGuideSection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_143_STATUS_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_143_STATUS_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (ModeStatus != other.ModeStatus) return false;
      if (ActionStatus != other.ActionStatus) return false;
      if (PowerStatus != other.PowerStatus) return false;
      if (ObstacleStatus != other.ObstacleStatus) return false;
      if (BlockingStatus != other.BlockingStatus) return false;
      if (HIDStatus != other.HIDStatus) return false;
      if (PauseStatus != other.PauseStatus) return false;
      if (ErrorStatus != other.ErrorStatus) return false;
      if (ReserveStatus != other.ReserveStatus) return false;
      if (SecDistance != other.SecDistance) return false;
      if (ObstDistance != other.ObstDistance) return false;
      if (ObstVehicleID != other.ObstVehicleID) return false;
      if (StoppedBlockID != other.StoppedBlockID) return false;
      if (StoppedHIDID != other.StoppedHIDID) return false;
      if (EarthquakePauseTatus != other.EarthquakePauseTatus) return false;
      if (SafetyPauseStatus != other.SafetyPauseStatus) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (DrivingDirection != other.DrivingDirection) return false;
      if (Speed != other.Speed) return false;
      if (Angle != other.Angle) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      if (CmdId1 != other.CmdId1) return false;
      if (CmdState1 != other.CmdState1) return false;
      if (CmdId2 != other.CmdId2) return false;
      if (CmdState2 != other.CmdState2) return false;
      if (CmdId3 != other.CmdId3) return false;
      if (CmdState3 != other.CmdState3) return false;
      if (CmdId4 != other.CmdId4) return false;
      if (CmdState4 != other.CmdState4) return false;
      if (HasBoxL != other.HasBoxL) return false;
      if (BoxIdL != other.BoxIdL) return false;
      if (HasBoxR != other.HasBoxR) return false;
      if (BoxIdR != other.BoxIdR) return false;
      if (ShelfStatusL != other.ShelfStatusL) return false;
      if (ShelfStatusR != other.ShelfStatusR) return false;
      if (CurrentExcuteCmdId != other.CurrentExcuteCmdId) return false;
      if(!willPassGuideSection_.Equals(other.willPassGuideSection_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (ModeStatus != 0) hash ^= ModeStatus.GetHashCode();
      if (ActionStatus != 0) hash ^= ActionStatus.GetHashCode();
      if (PowerStatus != 0) hash ^= PowerStatus.GetHashCode();
      if (ObstacleStatus != 0) hash ^= ObstacleStatus.GetHashCode();
      if (BlockingStatus != 0) hash ^= BlockingStatus.GetHashCode();
      if (HIDStatus != 0) hash ^= HIDStatus.GetHashCode();
      if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
      if (ErrorStatus != 0) hash ^= ErrorStatus.GetHashCode();
      if (ReserveStatus != 0) hash ^= ReserveStatus.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (ObstDistance != 0) hash ^= ObstDistance.GetHashCode();
      if (ObstVehicleID.Length != 0) hash ^= ObstVehicleID.GetHashCode();
      if (StoppedBlockID.Length != 0) hash ^= StoppedBlockID.GetHashCode();
      if (StoppedHIDID.Length != 0) hash ^= StoppedHIDID.GetHashCode();
      if (EarthquakePauseTatus != 0) hash ^= EarthquakePauseTatus.GetHashCode();
      if (SafetyPauseStatus != 0) hash ^= SafetyPauseStatus.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (DrivingDirection != 0) hash ^= DrivingDirection.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Angle != 0D) hash ^= Angle.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      if (CmdId1.Length != 0) hash ^= CmdId1.GetHashCode();
      if (CmdState1 != 0) hash ^= CmdState1.GetHashCode();
      if (CmdId2.Length != 0) hash ^= CmdId2.GetHashCode();
      if (CmdState2 != 0) hash ^= CmdState2.GetHashCode();
      if (CmdId3.Length != 0) hash ^= CmdId3.GetHashCode();
      if (CmdState3 != 0) hash ^= CmdState3.GetHashCode();
      if (CmdId4.Length != 0) hash ^= CmdId4.GetHashCode();
      if (CmdState4 != 0) hash ^= CmdState4.GetHashCode();
      if (HasBoxL != 0) hash ^= HasBoxL.GetHashCode();
      if (BoxIdL.Length != 0) hash ^= BoxIdL.GetHashCode();
      if (HasBoxR != 0) hash ^= HasBoxR.GetHashCode();
      if (BoxIdR.Length != 0) hash ^= BoxIdR.GetHashCode();
      if (ShelfStatusL != 0) hash ^= ShelfStatusL.GetHashCode();
      if (ShelfStatusR != 0) hash ^= ShelfStatusR.GetHashCode();
      if (CurrentExcuteCmdId.Length != 0) hash ^= CurrentExcuteCmdId.GetHashCode();
      hash ^= willPassGuideSection_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentSecID);
      }
      if (ModeStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ObstacleStatus);
      }
      if (BlockingStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BlockingStatus);
      }
      if (HIDStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) HIDStatus);
      }
      if (PauseStatus != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ErrorStatus);
      }
      if (ReserveStatus != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ReserveStatus);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SecDistance);
      }
      if (ObstDistance != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ObstVehicleID);
      }
      if (StoppedBlockID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StoppedBlockID);
      }
      if (StoppedHIDID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(StoppedHIDID);
      }
      if (EarthquakePauseTatus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) SafetyPauseStatus);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (DrivingDirection != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) DrivingDirection);
      }
      if (Speed != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Speed);
      }
      if (Angle != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Angle);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(YAxis);
      }
      if (CmdId1.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CmdId1);
      }
      if (CmdState1 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) CmdState1);
      }
      if (CmdId2.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(CmdId2);
      }
      if (CmdState2 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) CmdState2);
      }
      if (CmdId3.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(CmdId3);
      }
      if (CmdState3 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) CmdState3);
      }
      if (CmdId4.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(CmdId4);
      }
      if (CmdState4 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) CmdState4);
      }
      if (HasBoxL != 0) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) HasBoxL);
      }
      if (BoxIdL.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(BoxIdL);
      }
      if (HasBoxR != 0) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) HasBoxR);
      }
      if (BoxIdR.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(BoxIdR);
      }
      if (ShelfStatusL != 0) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) ShelfStatusL);
      }
      if (ShelfStatusR != 0) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) ShelfStatusR);
      }
      if (CurrentExcuteCmdId.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(CurrentExcuteCmdId);
      }
      willPassGuideSection_.WriteTo(output, _repeated_willPassGuideSection_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (ModeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObstacleStatus);
      }
      if (BlockingStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockingStatus);
      }
      if (HIDStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HIDStatus);
      }
      if (PauseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorStatus);
      }
      if (ReserveStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReserveStatus);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (ObstDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstVehicleID);
      }
      if (StoppedBlockID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedBlockID);
      }
      if (StoppedHIDID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StoppedHIDID);
      }
      if (EarthquakePauseTatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SafetyPauseStatus);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (DrivingDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingDirection);
      }
      if (Speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Angle != 0D) {
        size += 2 + 8;
      }
      if (XAxis != 0D) {
        size += 2 + 8;
      }
      if (YAxis != 0D) {
        size += 2 + 8;
      }
      if (CmdId1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId1);
      }
      if (CmdState1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdState1);
      }
      if (CmdId2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId2);
      }
      if (CmdState2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdState2);
      }
      if (CmdId3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId3);
      }
      if (CmdState3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdState3);
      }
      if (CmdId4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId4);
      }
      if (CmdState4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdState4);
      }
      if (HasBoxL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasBoxL);
      }
      if (BoxIdL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BoxIdL);
      }
      if (HasBoxR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasBoxR);
      }
      if (BoxIdR.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BoxIdR);
      }
      if (ShelfStatusL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShelfStatusL);
      }
      if (ShelfStatusR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShelfStatusR);
      }
      if (CurrentExcuteCmdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrentExcuteCmdId);
      }
      size += willPassGuideSection_.CalculateSize(_repeated_willPassGuideSection_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_143_STATUS_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.ModeStatus != 0) {
        ModeStatus = other.ModeStatus;
      }
      if (other.ActionStatus != 0) {
        ActionStatus = other.ActionStatus;
      }
      if (other.PowerStatus != 0) {
        PowerStatus = other.PowerStatus;
      }
      if (other.ObstacleStatus != 0) {
        ObstacleStatus = other.ObstacleStatus;
      }
      if (other.BlockingStatus != 0) {
        BlockingStatus = other.BlockingStatus;
      }
      if (other.HIDStatus != 0) {
        HIDStatus = other.HIDStatus;
      }
      if (other.PauseStatus != 0) {
        PauseStatus = other.PauseStatus;
      }
      if (other.ErrorStatus != 0) {
        ErrorStatus = other.ErrorStatus;
      }
      if (other.ReserveStatus != 0) {
        ReserveStatus = other.ReserveStatus;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.ObstDistance != 0) {
        ObstDistance = other.ObstDistance;
      }
      if (other.ObstVehicleID.Length != 0) {
        ObstVehicleID = other.ObstVehicleID;
      }
      if (other.StoppedBlockID.Length != 0) {
        StoppedBlockID = other.StoppedBlockID;
      }
      if (other.StoppedHIDID.Length != 0) {
        StoppedHIDID = other.StoppedHIDID;
      }
      if (other.EarthquakePauseTatus != 0) {
        EarthquakePauseTatus = other.EarthquakePauseTatus;
      }
      if (other.SafetyPauseStatus != 0) {
        SafetyPauseStatus = other.SafetyPauseStatus;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.DrivingDirection != 0) {
        DrivingDirection = other.DrivingDirection;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
      if (other.CmdId1.Length != 0) {
        CmdId1 = other.CmdId1;
      }
      if (other.CmdState1 != 0) {
        CmdState1 = other.CmdState1;
      }
      if (other.CmdId2.Length != 0) {
        CmdId2 = other.CmdId2;
      }
      if (other.CmdState2 != 0) {
        CmdState2 = other.CmdState2;
      }
      if (other.CmdId3.Length != 0) {
        CmdId3 = other.CmdId3;
      }
      if (other.CmdState3 != 0) {
        CmdState3 = other.CmdState3;
      }
      if (other.CmdId4.Length != 0) {
        CmdId4 = other.CmdId4;
      }
      if (other.CmdState4 != 0) {
        CmdState4 = other.CmdState4;
      }
      if (other.HasBoxL != 0) {
        HasBoxL = other.HasBoxL;
      }
      if (other.BoxIdL.Length != 0) {
        BoxIdL = other.BoxIdL;
      }
      if (other.HasBoxR != 0) {
        HasBoxR = other.HasBoxR;
      }
      if (other.BoxIdR.Length != 0) {
        BoxIdR = other.BoxIdR;
      }
      if (other.ShelfStatusL != 0) {
        ShelfStatusL = other.ShelfStatusL;
      }
      if (other.ShelfStatusR != 0) {
        ShelfStatusR = other.ShelfStatusR;
      }
      if (other.CurrentExcuteCmdId.Length != 0) {
        CurrentExcuteCmdId = other.CurrentExcuteCmdId;
      }
      willPassGuideSection_.Add(other.willPassGuideSection_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 18: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 24: {
            modeStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHModeStatus) input.ReadEnum();
            break;
          }
          case 32: {
            actionStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHActionStatus) input.ReadEnum();
            break;
          }
          case 40: {
            powerStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhPowerStatus) input.ReadEnum();
            break;
          }
          case 48: {
            obstacleStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 56: {
            blockingStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 64: {
            hIDStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 72: {
            pauseStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 80: {
            errorStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 88: {
            reserveStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 96: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 104: {
            ObstDistance = input.ReadInt32();
            break;
          }
          case 114: {
            ObstVehicleID = input.ReadString();
            break;
          }
          case 122: {
            StoppedBlockID = input.ReadString();
            break;
          }
          case 130: {
            StoppedHIDID = input.ReadString();
            break;
          }
          case 136: {
            earthquakePauseTatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 144: {
            safetyPauseStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 154: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 160: {
            drivingDirection_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction) input.ReadEnum();
            break;
          }
          case 168: {
            Speed = input.ReadInt32();
            break;
          }
          case 177: {
            Angle = input.ReadDouble();
            break;
          }
          case 185: {
            XAxis = input.ReadDouble();
            break;
          }
          case 193: {
            YAxis = input.ReadDouble();
            break;
          }
          case 202: {
            CmdId1 = input.ReadString();
            break;
          }
          case 208: {
            cmdState1_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState) input.ReadEnum();
            break;
          }
          case 218: {
            CmdId2 = input.ReadString();
            break;
          }
          case 224: {
            cmdState2_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState) input.ReadEnum();
            break;
          }
          case 234: {
            CmdId3 = input.ReadString();
            break;
          }
          case 240: {
            cmdState3_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState) input.ReadEnum();
            break;
          }
          case 250: {
            CmdId4 = input.ReadString();
            break;
          }
          case 256: {
            cmdState4_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState) input.ReadEnum();
            break;
          }
          case 264: {
            hasBoxL_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 274: {
            BoxIdL = input.ReadString();
            break;
          }
          case 280: {
            hasBoxR_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 290: {
            BoxIdR = input.ReadString();
            break;
          }
          case 296: {
            shelfStatusL_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus) input.ReadEnum();
            break;
          }
          case 304: {
            shelfStatusR_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus) input.ReadEnum();
            break;
          }
          case 314: {
            CurrentExcuteCmdId = input.ReadString();
            break;
          }
          case 322: {
            willPassGuideSection_.AddEntriesFrom(input, _repeated_willPassGuideSection_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_144_STATUS_CHANGE_REP : pb::IMessage<ID_144_STATUS_CHANGE_REP> {
    private static readonly pb::MessageParser<ID_144_STATUS_CHANGE_REP> _parser = new pb::MessageParser<ID_144_STATUS_CHANGE_REP>(() => new ID_144_STATUS_CHANGE_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_144_STATUS_CHANGE_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_144_STATUS_CHANGE_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_144_STATUS_CHANGE_REP(ID_144_STATUS_CHANGE_REP other) : this() {
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      modeStatus_ = other.modeStatus_;
      actionStatus_ = other.actionStatus_;
      powerStatus_ = other.powerStatus_;
      obstacleStatus_ = other.obstacleStatus_;
      blockingStatus_ = other.blockingStatus_;
      hIDStatus_ = other.hIDStatus_;
      pauseStatus_ = other.pauseStatus_;
      errorStatus_ = other.errorStatus_;
      reserveStatus_ = other.reserveStatus_;
      secDistance_ = other.secDistance_;
      obstDistance_ = other.obstDistance_;
      obstVehicleID_ = other.obstVehicleID_;
      stoppedBlockID_ = other.stoppedBlockID_;
      stoppedHIDID_ = other.stoppedHIDID_;
      earthquakePauseTatus_ = other.earthquakePauseTatus_;
      safetyPauseStatus_ = other.safetyPauseStatus_;
      reserveInfos_ = other.reserveInfos_.Clone();
      drivingDirection_ = other.drivingDirection_;
      speed_ = other.speed_;
      angle_ = other.angle_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      cmdId1_ = other.cmdId1_;
      cmdState1_ = other.cmdState1_;
      cmdId2_ = other.cmdId2_;
      cmdState2_ = other.cmdState2_;
      cmdId3_ = other.cmdId3_;
      cmdState3_ = other.cmdState3_;
      cmdId4_ = other.cmdId4_;
      cmdState4_ = other.cmdState4_;
      hasBoxL_ = other.hasBoxL_;
      boxIdL_ = other.boxIdL_;
      hasBoxR_ = other.hasBoxR_;
      boxIdR_ = other.boxIdR_;
      shelfStatusL_ = other.shelfStatusL_;
      shelfStatusR_ = other.shelfStatusR_;
      currentExcuteCmdId_ = other.currentExcuteCmdId_;
      willPassGuideSection_ = other.willPassGuideSection_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_144_STATUS_CHANGE_REP Clone() {
      return new ID_144_STATUS_CHANGE_REP(this);
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 1;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 2;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModeStatus" field.</summary>
    public const int ModeStatusFieldNumber = 3;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHModeStatus modeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHModeStatus ModeStatus {
      get { return modeStatus_; }
      set {
        modeStatus_ = value;
      }
    }

    /// <summary>Field number for the "ActionStatus" field.</summary>
    public const int ActionStatusFieldNumber = 4;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHActionStatus actionStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHActionStatus ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    /// <summary>Field number for the "PowerStatus" field.</summary>
    public const int PowerStatusFieldNumber = 5;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhPowerStatus powerStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhPowerStatus PowerStatus {
      get { return powerStatus_; }
      set {
        powerStatus_ = value;
      }
    }

    /// <summary>Field number for the "ObstacleStatus" field.</summary>
    public const int ObstacleStatusFieldNumber = 6;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle obstacleStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle ObstacleStatus {
      get { return obstacleStatus_; }
      set {
        obstacleStatus_ = value;
      }
    }

    /// <summary>Field number for the "BlockingStatus" field.</summary>
    public const int BlockingStatusFieldNumber = 7;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle blockingStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle BlockingStatus {
      get { return blockingStatus_; }
      set {
        blockingStatus_ = value;
      }
    }

    /// <summary>Field number for the "HIDStatus" field.</summary>
    public const int HIDStatusFieldNumber = 8;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle hIDStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle HIDStatus {
      get { return hIDStatus_; }
      set {
        hIDStatus_ = value;
      }
    }

    /// <summary>Field number for the "PauseStatus" field.</summary>
    public const int PauseStatusFieldNumber = 9;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle pauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle PauseStatus {
      get { return pauseStatus_; }
      set {
        pauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ErrorStatus" field.</summary>
    public const int ErrorStatusFieldNumber = 10;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle errorStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle ErrorStatus {
      get { return errorStatus_; }
      set {
        errorStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveStatus" field.</summary>
    public const int ReserveStatusFieldNumber = 11;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle reserveStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle ReserveStatus {
      get { return reserveStatus_; }
      set {
        reserveStatus_ = value;
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 12;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Distance" field.</summary>
    public const int ObstDistanceFieldNumber = 13;
    private int obstDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstDistance {
      get { return obstDistance_; }
      set {
        obstDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Vehicle_ID" field.</summary>
    public const int ObstVehicleIDFieldNumber = 14;
    private string obstVehicleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstVehicleID {
      get { return obstVehicleID_; }
      set {
        obstVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Stopped_Block_ID_" field.</summary>
    public const int StoppedBlockIDFieldNumber = 15;
    private string stoppedBlockID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedBlockID {
      get { return stoppedBlockID_; }
      set {
        stoppedBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Stopped_HID_ID" field.</summary>
    public const int StoppedHIDIDFieldNumber = 16;
    private string stoppedHIDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedHIDID {
      get { return stoppedHIDID_; }
      set {
        stoppedHIDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Earthquake_Pause_tatus" field.</summary>
    public const int EarthquakePauseTatusFieldNumber = 17;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle earthquakePauseTatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle EarthquakePauseTatus {
      get { return earthquakePauseTatus_; }
      set {
        earthquakePauseTatus_ = value;
      }
    }

    /// <summary>Field number for the "Safety_Pause_Status" field.</summary>
    public const int SafetyPauseStatusFieldNumber = 18;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle safetyPauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle SafetyPauseStatus {
      get { return safetyPauseStatus_; }
      set {
        safetyPauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 19;
    private static readonly pb::FieldCodec<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(154, global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.AKA.ProtocolFormat.RGVMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "DrivingDirection" field.</summary>
    public const int DrivingDirectionFieldNumber = 20;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction drivingDirection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction DrivingDirection {
      get { return drivingDirection_; }
      set {
        drivingDirection_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 21;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 22;
    private double angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 23;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 24;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "CmdId1" field.</summary>
    public const int CmdId1FieldNumber = 25;
    private string cmdId1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId1 {
      get { return cmdId1_; }
      set {
        cmdId1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmdState_1" field.</summary>
    public const int CmdState1FieldNumber = 26;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState cmdState1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState CmdState1 {
      get { return cmdState1_; }
      set {
        cmdState1_ = value;
      }
    }

    /// <summary>Field number for the "CmdId2" field.</summary>
    public const int CmdId2FieldNumber = 27;
    private string cmdId2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId2 {
      get { return cmdId2_; }
      set {
        cmdId2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmdState_2" field.</summary>
    public const int CmdState2FieldNumber = 28;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState cmdState2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState CmdState2 {
      get { return cmdState2_; }
      set {
        cmdState2_ = value;
      }
    }

    /// <summary>Field number for the "CmdId3" field.</summary>
    public const int CmdId3FieldNumber = 29;
    private string cmdId3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId3 {
      get { return cmdId3_; }
      set {
        cmdId3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmdState_3" field.</summary>
    public const int CmdState3FieldNumber = 30;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState cmdState3_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState CmdState3 {
      get { return cmdState3_; }
      set {
        cmdState3_ = value;
      }
    }

    /// <summary>Field number for the "CmdId4" field.</summary>
    public const int CmdId4FieldNumber = 31;
    private string cmdId4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId4 {
      get { return cmdId4_; }
      set {
        cmdId4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmdState_4" field.</summary>
    public const int CmdState4FieldNumber = 32;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState cmdState4_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState CmdState4 {
      get { return cmdState4_; }
      set {
        cmdState4_ = value;
      }
    }

    /// <summary>Field number for the "HasBox_L" field.</summary>
    public const int HasBoxLFieldNumber = 33;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus hasBoxL_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus HasBoxL {
      get { return hasBoxL_; }
      set {
        hasBoxL_ = value;
      }
    }

    /// <summary>Field number for the "BoxIdL" field.</summary>
    public const int BoxIdLFieldNumber = 34;
    private string boxIdL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxIdL {
      get { return boxIdL_; }
      set {
        boxIdL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasBox_R" field.</summary>
    public const int HasBoxRFieldNumber = 35;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus hasBoxR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus HasBoxR {
      get { return hasBoxR_; }
      set {
        hasBoxR_ = value;
      }
    }

    /// <summary>Field number for the "BoxIdR" field.</summary>
    public const int BoxIdRFieldNumber = 36;
    private string boxIdR_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxIdR {
      get { return boxIdR_; }
      set {
        boxIdR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShelfStatus_L" field.</summary>
    public const int ShelfStatusLFieldNumber = 37;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus shelfStatusL_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus ShelfStatusL {
      get { return shelfStatusL_; }
      set {
        shelfStatusL_ = value;
      }
    }

    /// <summary>Field number for the "ShelfStatus_R" field.</summary>
    public const int ShelfStatusRFieldNumber = 38;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus shelfStatusR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus ShelfStatusR {
      get { return shelfStatusR_; }
      set {
        shelfStatusR_ = value;
      }
    }

    /// <summary>Field number for the "CurrentExcuteCmdId" field.</summary>
    public const int CurrentExcuteCmdIdFieldNumber = 39;
    private string currentExcuteCmdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentExcuteCmdId {
      get { return currentExcuteCmdId_; }
      set {
        currentExcuteCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WillPassGuideSection" field.</summary>
    public const int WillPassGuideSectionFieldNumber = 40;
    private static readonly pb::FieldCodec<string> _repeated_willPassGuideSection_codec
        = pb::FieldCodec.ForString(322);
    private readonly pbc::RepeatedField<string> willPassGuideSection_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WillPassGuideSection {
      get { return willPassGuideSection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_144_STATUS_CHANGE_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_144_STATUS_CHANGE_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (ModeStatus != other.ModeStatus) return false;
      if (ActionStatus != other.ActionStatus) return false;
      if (PowerStatus != other.PowerStatus) return false;
      if (ObstacleStatus != other.ObstacleStatus) return false;
      if (BlockingStatus != other.BlockingStatus) return false;
      if (HIDStatus != other.HIDStatus) return false;
      if (PauseStatus != other.PauseStatus) return false;
      if (ErrorStatus != other.ErrorStatus) return false;
      if (ReserveStatus != other.ReserveStatus) return false;
      if (SecDistance != other.SecDistance) return false;
      if (ObstDistance != other.ObstDistance) return false;
      if (ObstVehicleID != other.ObstVehicleID) return false;
      if (StoppedBlockID != other.StoppedBlockID) return false;
      if (StoppedHIDID != other.StoppedHIDID) return false;
      if (EarthquakePauseTatus != other.EarthquakePauseTatus) return false;
      if (SafetyPauseStatus != other.SafetyPauseStatus) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (DrivingDirection != other.DrivingDirection) return false;
      if (Speed != other.Speed) return false;
      if (Angle != other.Angle) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      if (CmdId1 != other.CmdId1) return false;
      if (CmdState1 != other.CmdState1) return false;
      if (CmdId2 != other.CmdId2) return false;
      if (CmdState2 != other.CmdState2) return false;
      if (CmdId3 != other.CmdId3) return false;
      if (CmdState3 != other.CmdState3) return false;
      if (CmdId4 != other.CmdId4) return false;
      if (CmdState4 != other.CmdState4) return false;
      if (HasBoxL != other.HasBoxL) return false;
      if (BoxIdL != other.BoxIdL) return false;
      if (HasBoxR != other.HasBoxR) return false;
      if (BoxIdR != other.BoxIdR) return false;
      if (ShelfStatusL != other.ShelfStatusL) return false;
      if (ShelfStatusR != other.ShelfStatusR) return false;
      if (CurrentExcuteCmdId != other.CurrentExcuteCmdId) return false;
      if(!willPassGuideSection_.Equals(other.willPassGuideSection_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (ModeStatus != 0) hash ^= ModeStatus.GetHashCode();
      if (ActionStatus != 0) hash ^= ActionStatus.GetHashCode();
      if (PowerStatus != 0) hash ^= PowerStatus.GetHashCode();
      if (ObstacleStatus != 0) hash ^= ObstacleStatus.GetHashCode();
      if (BlockingStatus != 0) hash ^= BlockingStatus.GetHashCode();
      if (HIDStatus != 0) hash ^= HIDStatus.GetHashCode();
      if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
      if (ErrorStatus != 0) hash ^= ErrorStatus.GetHashCode();
      if (ReserveStatus != 0) hash ^= ReserveStatus.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (ObstDistance != 0) hash ^= ObstDistance.GetHashCode();
      if (ObstVehicleID.Length != 0) hash ^= ObstVehicleID.GetHashCode();
      if (StoppedBlockID.Length != 0) hash ^= StoppedBlockID.GetHashCode();
      if (StoppedHIDID.Length != 0) hash ^= StoppedHIDID.GetHashCode();
      if (EarthquakePauseTatus != 0) hash ^= EarthquakePauseTatus.GetHashCode();
      if (SafetyPauseStatus != 0) hash ^= SafetyPauseStatus.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (DrivingDirection != 0) hash ^= DrivingDirection.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Angle != 0D) hash ^= Angle.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      if (CmdId1.Length != 0) hash ^= CmdId1.GetHashCode();
      if (CmdState1 != 0) hash ^= CmdState1.GetHashCode();
      if (CmdId2.Length != 0) hash ^= CmdId2.GetHashCode();
      if (CmdState2 != 0) hash ^= CmdState2.GetHashCode();
      if (CmdId3.Length != 0) hash ^= CmdId3.GetHashCode();
      if (CmdState3 != 0) hash ^= CmdState3.GetHashCode();
      if (CmdId4.Length != 0) hash ^= CmdId4.GetHashCode();
      if (CmdState4 != 0) hash ^= CmdState4.GetHashCode();
      if (HasBoxL != 0) hash ^= HasBoxL.GetHashCode();
      if (BoxIdL.Length != 0) hash ^= BoxIdL.GetHashCode();
      if (HasBoxR != 0) hash ^= HasBoxR.GetHashCode();
      if (BoxIdR.Length != 0) hash ^= BoxIdR.GetHashCode();
      if (ShelfStatusL != 0) hash ^= ShelfStatusL.GetHashCode();
      if (ShelfStatusR != 0) hash ^= ShelfStatusR.GetHashCode();
      if (CurrentExcuteCmdId.Length != 0) hash ^= CurrentExcuteCmdId.GetHashCode();
      hash ^= willPassGuideSection_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentSecID);
      }
      if (ModeStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ObstacleStatus);
      }
      if (BlockingStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BlockingStatus);
      }
      if (HIDStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) HIDStatus);
      }
      if (PauseStatus != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ErrorStatus);
      }
      if (ReserveStatus != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ReserveStatus);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SecDistance);
      }
      if (ObstDistance != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ObstVehicleID);
      }
      if (StoppedBlockID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StoppedBlockID);
      }
      if (StoppedHIDID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(StoppedHIDID);
      }
      if (EarthquakePauseTatus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) SafetyPauseStatus);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (DrivingDirection != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) DrivingDirection);
      }
      if (Speed != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Speed);
      }
      if (Angle != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Angle);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(YAxis);
      }
      if (CmdId1.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CmdId1);
      }
      if (CmdState1 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) CmdState1);
      }
      if (CmdId2.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(CmdId2);
      }
      if (CmdState2 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) CmdState2);
      }
      if (CmdId3.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(CmdId3);
      }
      if (CmdState3 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) CmdState3);
      }
      if (CmdId4.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(CmdId4);
      }
      if (CmdState4 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) CmdState4);
      }
      if (HasBoxL != 0) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) HasBoxL);
      }
      if (BoxIdL.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(BoxIdL);
      }
      if (HasBoxR != 0) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) HasBoxR);
      }
      if (BoxIdR.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(BoxIdR);
      }
      if (ShelfStatusL != 0) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) ShelfStatusL);
      }
      if (ShelfStatusR != 0) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) ShelfStatusR);
      }
      if (CurrentExcuteCmdId.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(CurrentExcuteCmdId);
      }
      willPassGuideSection_.WriteTo(output, _repeated_willPassGuideSection_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (ModeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObstacleStatus);
      }
      if (BlockingStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockingStatus);
      }
      if (HIDStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HIDStatus);
      }
      if (PauseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorStatus);
      }
      if (ReserveStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReserveStatus);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (ObstDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstVehicleID);
      }
      if (StoppedBlockID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedBlockID);
      }
      if (StoppedHIDID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StoppedHIDID);
      }
      if (EarthquakePauseTatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SafetyPauseStatus);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (DrivingDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingDirection);
      }
      if (Speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Angle != 0D) {
        size += 2 + 8;
      }
      if (XAxis != 0D) {
        size += 2 + 8;
      }
      if (YAxis != 0D) {
        size += 2 + 8;
      }
      if (CmdId1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId1);
      }
      if (CmdState1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdState1);
      }
      if (CmdId2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId2);
      }
      if (CmdState2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdState2);
      }
      if (CmdId3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId3);
      }
      if (CmdState3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdState3);
      }
      if (CmdId4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId4);
      }
      if (CmdState4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdState4);
      }
      if (HasBoxL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasBoxL);
      }
      if (BoxIdL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BoxIdL);
      }
      if (HasBoxR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasBoxR);
      }
      if (BoxIdR.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BoxIdR);
      }
      if (ShelfStatusL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShelfStatusL);
      }
      if (ShelfStatusR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShelfStatusR);
      }
      if (CurrentExcuteCmdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrentExcuteCmdId);
      }
      size += willPassGuideSection_.CalculateSize(_repeated_willPassGuideSection_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_144_STATUS_CHANGE_REP other) {
      if (other == null) {
        return;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.ModeStatus != 0) {
        ModeStatus = other.ModeStatus;
      }
      if (other.ActionStatus != 0) {
        ActionStatus = other.ActionStatus;
      }
      if (other.PowerStatus != 0) {
        PowerStatus = other.PowerStatus;
      }
      if (other.ObstacleStatus != 0) {
        ObstacleStatus = other.ObstacleStatus;
      }
      if (other.BlockingStatus != 0) {
        BlockingStatus = other.BlockingStatus;
      }
      if (other.HIDStatus != 0) {
        HIDStatus = other.HIDStatus;
      }
      if (other.PauseStatus != 0) {
        PauseStatus = other.PauseStatus;
      }
      if (other.ErrorStatus != 0) {
        ErrorStatus = other.ErrorStatus;
      }
      if (other.ReserveStatus != 0) {
        ReserveStatus = other.ReserveStatus;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.ObstDistance != 0) {
        ObstDistance = other.ObstDistance;
      }
      if (other.ObstVehicleID.Length != 0) {
        ObstVehicleID = other.ObstVehicleID;
      }
      if (other.StoppedBlockID.Length != 0) {
        StoppedBlockID = other.StoppedBlockID;
      }
      if (other.StoppedHIDID.Length != 0) {
        StoppedHIDID = other.StoppedHIDID;
      }
      if (other.EarthquakePauseTatus != 0) {
        EarthquakePauseTatus = other.EarthquakePauseTatus;
      }
      if (other.SafetyPauseStatus != 0) {
        SafetyPauseStatus = other.SafetyPauseStatus;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.DrivingDirection != 0) {
        DrivingDirection = other.DrivingDirection;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
      if (other.CmdId1.Length != 0) {
        CmdId1 = other.CmdId1;
      }
      if (other.CmdState1 != 0) {
        CmdState1 = other.CmdState1;
      }
      if (other.CmdId2.Length != 0) {
        CmdId2 = other.CmdId2;
      }
      if (other.CmdState2 != 0) {
        CmdState2 = other.CmdState2;
      }
      if (other.CmdId3.Length != 0) {
        CmdId3 = other.CmdId3;
      }
      if (other.CmdState3 != 0) {
        CmdState3 = other.CmdState3;
      }
      if (other.CmdId4.Length != 0) {
        CmdId4 = other.CmdId4;
      }
      if (other.CmdState4 != 0) {
        CmdState4 = other.CmdState4;
      }
      if (other.HasBoxL != 0) {
        HasBoxL = other.HasBoxL;
      }
      if (other.BoxIdL.Length != 0) {
        BoxIdL = other.BoxIdL;
      }
      if (other.HasBoxR != 0) {
        HasBoxR = other.HasBoxR;
      }
      if (other.BoxIdR.Length != 0) {
        BoxIdR = other.BoxIdR;
      }
      if (other.ShelfStatusL != 0) {
        ShelfStatusL = other.ShelfStatusL;
      }
      if (other.ShelfStatusR != 0) {
        ShelfStatusR = other.ShelfStatusR;
      }
      if (other.CurrentExcuteCmdId.Length != 0) {
        CurrentExcuteCmdId = other.CurrentExcuteCmdId;
      }
      willPassGuideSection_.Add(other.willPassGuideSection_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 18: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 24: {
            modeStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHModeStatus) input.ReadEnum();
            break;
          }
          case 32: {
            actionStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VHActionStatus) input.ReadEnum();
            break;
          }
          case 40: {
            powerStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhPowerStatus) input.ReadEnum();
            break;
          }
          case 48: {
            obstacleStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 56: {
            blockingStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 64: {
            hIDStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 72: {
            pauseStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 80: {
            errorStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 88: {
            reserveStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 96: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 104: {
            ObstDistance = input.ReadInt32();
            break;
          }
          case 114: {
            ObstVehicleID = input.ReadString();
            break;
          }
          case 122: {
            StoppedBlockID = input.ReadString();
            break;
          }
          case 130: {
            StoppedHIDID = input.ReadString();
            break;
          }
          case 136: {
            earthquakePauseTatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 144: {
            safetyPauseStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 154: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 160: {
            drivingDirection_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.DriveDirction) input.ReadEnum();
            break;
          }
          case 168: {
            Speed = input.ReadInt32();
            break;
          }
          case 177: {
            Angle = input.ReadDouble();
            break;
          }
          case 185: {
            XAxis = input.ReadDouble();
            break;
          }
          case 193: {
            YAxis = input.ReadDouble();
            break;
          }
          case 202: {
            CmdId1 = input.ReadString();
            break;
          }
          case 208: {
            cmdState1_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState) input.ReadEnum();
            break;
          }
          case 218: {
            CmdId2 = input.ReadString();
            break;
          }
          case 224: {
            cmdState2_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState) input.ReadEnum();
            break;
          }
          case 234: {
            CmdId3 = input.ReadString();
            break;
          }
          case 240: {
            cmdState3_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState) input.ReadEnum();
            break;
          }
          case 250: {
            CmdId4 = input.ReadString();
            break;
          }
          case 256: {
            cmdState4_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.CommandState) input.ReadEnum();
            break;
          }
          case 264: {
            hasBoxL_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 274: {
            BoxIdL = input.ReadString();
            break;
          }
          case 280: {
            hasBoxR_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 290: {
            BoxIdR = input.ReadString();
            break;
          }
          case 296: {
            shelfStatusL_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus) input.ReadEnum();
            break;
          }
          case 304: {
            shelfStatusR_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ShelfStatus) input.ReadEnum();
            break;
          }
          case 314: {
            CurrentExcuteCmdId = input.ReadString();
            break;
          }
          case 322: {
            willPassGuideSection_.AddEntriesFrom(input, _repeated_willPassGuideSection_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_44_STATUS_CHANGE_RESPONSE : pb::IMessage<ID_44_STATUS_CHANGE_RESPONSE> {
    private static readonly pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE>(() => new ID_44_STATUS_CHANGE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_44_STATUS_CHANGE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_44_STATUS_CHANGE_RESPONSE(ID_44_STATUS_CHANGE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_44_STATUS_CHANGE_RESPONSE Clone() {
      return new ID_44_STATUS_CHANGE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_44_STATUS_CHANGE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_44_STATUS_CHANGE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_44_STATUS_CHANGE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_45_POWER_OPE_REQ : pb::IMessage<ID_45_POWER_OPE_REQ> {
    private static readonly pb::MessageParser<ID_45_POWER_OPE_REQ> _parser = new pb::MessageParser<ID_45_POWER_OPE_REQ>(() => new ID_45_POWER_OPE_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_45_POWER_OPE_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_45_POWER_OPE_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_45_POWER_OPE_REQ(ID_45_POWER_OPE_REQ other) : this() {
      operatingPowerMode_ = other.operatingPowerMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_45_POWER_OPE_REQ Clone() {
      return new ID_45_POWER_OPE_REQ(this);
    }

    /// <summary>Field number for the "OperatingPowerMode" field.</summary>
    public const int OperatingPowerModeFieldNumber = 1;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.OperatingPowerMode operatingPowerMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.OperatingPowerMode OperatingPowerMode {
      get { return operatingPowerMode_; }
      set {
        operatingPowerMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_45_POWER_OPE_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_45_POWER_OPE_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperatingPowerMode != other.OperatingPowerMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperatingPowerMode != 0) hash ^= OperatingPowerMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperatingPowerMode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OperatingPowerMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperatingPowerMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperatingPowerMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_45_POWER_OPE_REQ other) {
      if (other == null) {
        return;
      }
      if (other.OperatingPowerMode != 0) {
        OperatingPowerMode = other.OperatingPowerMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operatingPowerMode_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.OperatingPowerMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_145_POWER_OPE_RESPONSE : pb::IMessage<ID_145_POWER_OPE_RESPONSE> {
    private static readonly pb::MessageParser<ID_145_POWER_OPE_RESPONSE> _parser = new pb::MessageParser<ID_145_POWER_OPE_RESPONSE>(() => new ID_145_POWER_OPE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_145_POWER_OPE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_145_POWER_OPE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_145_POWER_OPE_RESPONSE(ID_145_POWER_OPE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_145_POWER_OPE_RESPONSE Clone() {
      return new ID_145_POWER_OPE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_145_POWER_OPE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_145_POWER_OPE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_145_POWER_OPE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_51_AVOID_REQUEST : pb::IMessage<ID_51_AVOID_REQUEST> {
    private static readonly pb::MessageParser<ID_51_AVOID_REQUEST> _parser = new pb::MessageParser<ID_51_AVOID_REQUEST>(() => new ID_51_AVOID_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_51_AVOID_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_51_AVOID_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_51_AVOID_REQUEST(ID_51_AVOID_REQUEST other) : this() {
      destinationAdr_ = other.destinationAdr_;
      guideSections_ = other.guideSections_.Clone();
      guideAddresses_ = other.guideAddresses_.Clone();
      cmdID_ = other.cmdID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_51_AVOID_REQUEST Clone() {
      return new ID_51_AVOID_REQUEST(this);
    }

    /// <summary>Field number for the "DestinationAdr" field.</summary>
    public const int DestinationAdrFieldNumber = 1;
    private string destinationAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationAdr {
      get { return destinationAdr_; }
      set {
        destinationAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Guide_Sections" field.</summary>
    public const int GuideSectionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_guideSections_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> guideSections_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideSections {
      get { return guideSections_; }
    }

    /// <summary>Field number for the "Guide_Addresses" field.</summary>
    public const int GuideAddressesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_guideAddresses_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> guideAddresses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideAddresses {
      get { return guideAddresses_; }
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 4;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_51_AVOID_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_51_AVOID_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestinationAdr != other.DestinationAdr) return false;
      if(!guideSections_.Equals(other.guideSections_)) return false;
      if(!guideAddresses_.Equals(other.guideAddresses_)) return false;
      if (CmdID != other.CmdID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DestinationAdr.Length != 0) hash ^= DestinationAdr.GetHashCode();
      hash ^= guideSections_.GetHashCode();
      hash ^= guideAddresses_.GetHashCode();
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DestinationAdr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DestinationAdr);
      }
      guideSections_.WriteTo(output, _repeated_guideSections_codec);
      guideAddresses_.WriteTo(output, _repeated_guideAddresses_codec);
      if (CmdID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CmdID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DestinationAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationAdr);
      }
      size += guideSections_.CalculateSize(_repeated_guideSections_codec);
      size += guideAddresses_.CalculateSize(_repeated_guideAddresses_codec);
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_51_AVOID_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.DestinationAdr.Length != 0) {
        DestinationAdr = other.DestinationAdr;
      }
      guideSections_.Add(other.guideSections_);
      guideAddresses_.Add(other.guideAddresses_);
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DestinationAdr = input.ReadString();
            break;
          }
          case 18: {
            guideSections_.AddEntriesFrom(input, _repeated_guideSections_codec);
            break;
          }
          case 26: {
            guideAddresses_.AddEntriesFrom(input, _repeated_guideAddresses_codec);
            break;
          }
          case 34: {
            CmdID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_151_AVOID_RESPONSE : pb::IMessage<ID_151_AVOID_RESPONSE> {
    private static readonly pb::MessageParser<ID_151_AVOID_RESPONSE> _parser = new pb::MessageParser<ID_151_AVOID_RESPONSE>(() => new ID_151_AVOID_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_151_AVOID_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_151_AVOID_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_151_AVOID_RESPONSE(ID_151_AVOID_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
      ngReason_ = other.ngReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_151_AVOID_RESPONSE Clone() {
      return new ID_151_AVOID_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    /// <summary>Field number for the "NgReason" field.</summary>
    public const int NgReasonFieldNumber = 2;
    private string ngReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NgReason {
      get { return ngReason_; }
      set {
        ngReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_151_AVOID_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_151_AVOID_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      if (NgReason != other.NgReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      if (NgReason.Length != 0) hash ^= NgReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
      if (NgReason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NgReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      if (NgReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NgReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_151_AVOID_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
      if (other.NgReason.Length != 0) {
        NgReason = other.NgReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
          case 18: {
            NgReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_152_AVOID_COMPLETE_REPORT : pb::IMessage<ID_152_AVOID_COMPLETE_REPORT> {
    private static readonly pb::MessageParser<ID_152_AVOID_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_152_AVOID_COMPLETE_REPORT>(() => new ID_152_AVOID_COMPLETE_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_152_AVOID_COMPLETE_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_152_AVOID_COMPLETE_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_152_AVOID_COMPLETE_REPORT(ID_152_AVOID_COMPLETE_REPORT other) : this() {
      cmpStatus_ = other.cmpStatus_;
      cmdID_ = other.cmdID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_152_AVOID_COMPLETE_REPORT Clone() {
      return new ID_152_AVOID_COMPLETE_REPORT(this);
    }

    /// <summary>Field number for the "CmpStatus" field.</summary>
    public const int CmpStatusFieldNumber = 1;
    private int cmpStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CmpStatus {
      get { return cmpStatus_; }
      set {
        cmpStatus_ = value;
      }
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 2;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_152_AVOID_COMPLETE_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_152_AVOID_COMPLETE_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmpStatus != other.CmpStatus) return false;
      if (CmdID != other.CmdID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmpStatus != 0) hash ^= CmpStatus.GetHashCode();
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmpStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CmpStatus);
      }
      if (CmdID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CmdID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmpStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CmpStatus);
      }
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_152_AVOID_COMPLETE_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.CmpStatus != 0) {
        CmpStatus = other.CmpStatus;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CmpStatus = input.ReadInt32();
            break;
          }
          case 18: {
            CmdID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_52_AVOID_COMPLETE_RESPONSE : pb::IMessage<ID_52_AVOID_COMPLETE_RESPONSE> {
    private static readonly pb::MessageParser<ID_52_AVOID_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_52_AVOID_COMPLETE_RESPONSE>(() => new ID_52_AVOID_COMPLETE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_52_AVOID_COMPLETE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_52_AVOID_COMPLETE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_52_AVOID_COMPLETE_RESPONSE(ID_52_AVOID_COMPLETE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_52_AVOID_COMPLETE_RESPONSE Clone() {
      return new ID_52_AVOID_COMPLETE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_52_AVOID_COMPLETE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_52_AVOID_COMPLETE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_52_AVOID_COMPLETE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_71_RANGE_TEACHING_REQUEST : pb::IMessage<ID_71_RANGE_TEACHING_REQUEST> {
    private static readonly pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST> _parser = new pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST>(() => new ID_71_RANGE_TEACHING_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_71_RANGE_TEACHING_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_71_RANGE_TEACHING_REQUEST(ID_71_RANGE_TEACHING_REQUEST other) : this() {
      fromAdr_ = other.fromAdr_;
      toAdr_ = other.toAdr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_71_RANGE_TEACHING_REQUEST Clone() {
      return new ID_71_RANGE_TEACHING_REQUEST(this);
    }

    /// <summary>Field number for the "FromAdr" field.</summary>
    public const int FromAdrFieldNumber = 1;
    private string fromAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromAdr {
      get { return fromAdr_; }
      set {
        fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 2;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_71_RANGE_TEACHING_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_71_RANGE_TEACHING_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromAdr != other.FromAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromAdr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToAdr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
      }
      if (ToAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_71_RANGE_TEACHING_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.FromAdr.Length != 0) {
        FromAdr = other.FromAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FromAdr = input.ReadString();
            break;
          }
          case 18: {
            ToAdr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_171_RANGE_TEACHING_RESPONSE : pb::IMessage<ID_171_RANGE_TEACHING_RESPONSE> {
    private static readonly pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE> _parser = new pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE>(() => new ID_171_RANGE_TEACHING_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_171_RANGE_TEACHING_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_171_RANGE_TEACHING_RESPONSE(ID_171_RANGE_TEACHING_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_171_RANGE_TEACHING_RESPONSE Clone() {
      return new ID_171_RANGE_TEACHING_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_171_RANGE_TEACHING_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_171_RANGE_TEACHING_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_171_RANGE_TEACHING_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_172_RANGE_TEACHING_COMPLETE_REPORT : pb::IMessage<ID_172_RANGE_TEACHING_COMPLETE_REPORT> {
    private static readonly pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT>(() => new ID_172_RANGE_TEACHING_COMPLETE_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_172_RANGE_TEACHING_COMPLETE_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_172_RANGE_TEACHING_COMPLETE_REPORT(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) : this() {
      fromAdr_ = other.fromAdr_;
      toAdr_ = other.toAdr_;
      secDistance_ = other.secDistance_;
      completeCode_ = other.completeCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_172_RANGE_TEACHING_COMPLETE_REPORT Clone() {
      return new ID_172_RANGE_TEACHING_COMPLETE_REPORT(this);
    }

    /// <summary>Field number for the "FromAdr" field.</summary>
    public const int FromAdrFieldNumber = 1;
    private string fromAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromAdr {
      get { return fromAdr_; }
      set {
        fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 2;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 3;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Complete_Code" field.</summary>
    public const int CompleteCodeFieldNumber = 4;
    private int completeCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompleteCode {
      get { return completeCode_; }
      set {
        completeCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_172_RANGE_TEACHING_COMPLETE_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromAdr != other.FromAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      if (SecDistance != other.SecDistance) return false;
      if (CompleteCode != other.CompleteCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (CompleteCode != 0) hash ^= CompleteCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromAdr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToAdr);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SecDistance);
      }
      if (CompleteCode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CompleteCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
      }
      if (ToAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (CompleteCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.FromAdr.Length != 0) {
        FromAdr = other.FromAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.CompleteCode != 0) {
        CompleteCode = other.CompleteCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FromAdr = input.ReadString();
            break;
          }
          case 18: {
            ToAdr = input.ReadString();
            break;
          }
          case 24: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 32: {
            CompleteCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_72_RANGE_TEACHING_COMPLETE_RESPONSE : pb::IMessage<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> {
    private static readonly pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE>(() => new ID_72_RANGE_TEACHING_COMPLETE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE Clone() {
      return new ID_72_RANGE_TEACHING_COMPLETE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_72_RANGE_TEACHING_COMPLETE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_174_ADDRESS_TEACH_REPORT : pb::IMessage<ID_174_ADDRESS_TEACH_REPORT> {
    private static readonly pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT> _parser = new pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT>(() => new ID_174_ADDRESS_TEACH_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_174_ADDRESS_TEACH_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_174_ADDRESS_TEACH_REPORT(ID_174_ADDRESS_TEACH_REPORT other) : this() {
      addr_ = other.addr_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_174_ADDRESS_TEACH_REPORT Clone() {
      return new ID_174_ADDRESS_TEACH_REPORT(this);
    }

    /// <summary>Field number for the "Addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_174_ADDRESS_TEACH_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_174_ADDRESS_TEACH_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Addr != other.Addr) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Addr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Addr);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_174_ADDRESS_TEACH_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Addr = input.ReadString();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_74_ADDRESS_TEACH_RESPONSE : pb::IMessage<ID_74_ADDRESS_TEACH_RESPONSE> {
    private static readonly pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE> _parser = new pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE>(() => new ID_74_ADDRESS_TEACH_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_74_ADDRESS_TEACH_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_74_ADDRESS_TEACH_RESPONSE(ID_74_ADDRESS_TEACH_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_74_ADDRESS_TEACH_RESPONSE Clone() {
      return new ID_74_ADDRESS_TEACH_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_74_ADDRESS_TEACH_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_74_ADDRESS_TEACH_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_74_ADDRESS_TEACH_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_91_ALARM_RESET_REQUEST : pb::IMessage<ID_91_ALARM_RESET_REQUEST> {
    private static readonly pb::MessageParser<ID_91_ALARM_RESET_REQUEST> _parser = new pb::MessageParser<ID_91_ALARM_RESET_REQUEST>(() => new ID_91_ALARM_RESET_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_91_ALARM_RESET_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_91_ALARM_RESET_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_91_ALARM_RESET_REQUEST(ID_91_ALARM_RESET_REQUEST other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_91_ALARM_RESET_REQUEST Clone() {
      return new ID_91_ALARM_RESET_REQUEST(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_91_ALARM_RESET_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_91_ALARM_RESET_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_91_ALARM_RESET_REQUEST other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ID_191_ALARM_RESET_RESPONSE : pb::IMessage<ID_191_ALARM_RESET_RESPONSE> {
    private static readonly pb::MessageParser<ID_191_ALARM_RESET_RESPONSE> _parser = new pb::MessageParser<ID_191_ALARM_RESET_RESPONSE>(() => new ID_191_ALARM_RESET_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_191_ALARM_RESET_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_191_ALARM_RESET_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_191_ALARM_RESET_RESPONSE(ID_191_ALARM_RESET_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_191_ALARM_RESET_RESPONSE Clone() {
      return new ID_191_ALARM_RESET_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_191_ALARM_RESET_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_191_ALARM_RESET_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_191_ALARM_RESET_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_194_ALARM_REPORT : pb::IMessage<ID_194_ALARM_REPORT> {
    private static readonly pb::MessageParser<ID_194_ALARM_REPORT> _parser = new pb::MessageParser<ID_194_ALARM_REPORT>(() => new ID_194_ALARM_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_194_ALARM_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_194_ALARM_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_194_ALARM_REPORT(ID_194_ALARM_REPORT other) : this() {
      errCode_ = other.errCode_;
      errStatus_ = other.errStatus_;
      errDescription_ = other.errDescription_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_194_ALARM_REPORT Clone() {
      return new ID_194_ALARM_REPORT(this);
    }

    /// <summary>Field number for the "ErrCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private string errCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrCode {
      get { return errCode_; }
      set {
        errCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrStatus" field.</summary>
    public const int ErrStatusFieldNumber = 2;
    private global::com.mirle.AKA.ProtocolFormat.RGVMessage.ErrorStatus errStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ErrorStatus ErrStatus {
      get { return errStatus_; }
      set {
        errStatus_ = value;
      }
    }

    /// <summary>Field number for the "ErrDescription" field.</summary>
    public const int ErrDescriptionFieldNumber = 3;
    private string errDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrDescription {
      get { return errDescription_; }
      set {
        errDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_194_ALARM_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_194_ALARM_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      if (ErrStatus != other.ErrStatus) return false;
      if (ErrDescription != other.ErrDescription) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode.Length != 0) hash ^= ErrCode.GetHashCode();
      if (ErrStatus != 0) hash ^= ErrStatus.GetHashCode();
      if (ErrDescription.Length != 0) hash ^= ErrDescription.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrCode);
      }
      if (ErrStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrStatus);
      }
      if (ErrDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrDescription);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrCode);
      }
      if (ErrStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrStatus);
      }
      if (ErrDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrDescription);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_194_ALARM_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode.Length != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.ErrStatus != 0) {
        ErrStatus = other.ErrStatus;
      }
      if (other.ErrDescription.Length != 0) {
        ErrDescription = other.ErrDescription;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ErrCode = input.ReadString();
            break;
          }
          case 16: {
            errStatus_ = (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ErrorStatus) input.ReadEnum();
            break;
          }
          case 26: {
            ErrDescription = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_94_ALARM_RESPONSE : pb::IMessage<ID_94_ALARM_RESPONSE> {
    private static readonly pb::MessageParser<ID_94_ALARM_RESPONSE> _parser = new pb::MessageParser<ID_94_ALARM_RESPONSE>(() => new ID_94_ALARM_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_94_ALARM_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_94_ALARM_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_94_ALARM_RESPONSE(ID_94_ALARM_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_94_ALARM_RESPONSE Clone() {
      return new ID_94_ALARM_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_94_ALARM_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_94_ALARM_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_94_ALARM_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WrapperMessage : pb::IMessage<WrapperMessage> {
    private static readonly pb::MessageParser<WrapperMessage> _parser = new pb::MessageParser<WrapperMessage>(() => new WrapperMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WrapperMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage(WrapperMessage other) : this() {
      iD_ = other.iD_;
      seqNum_ = other.seqNum_;
      switch (other.MsgCase) {
        case MsgOneofCase.HostBasicInfoRep:
          HostBasicInfoRep = other.HostBasicInfoRep.Clone();
          break;
        case MsgOneofCase.HostBasicInfoResp:
          HostBasicInfoResp = other.HostBasicInfoResp.Clone();
          break;
        case MsgOneofCase.BasicInfoVersionRep:
          BasicInfoVersionRep = other.BasicInfoVersionRep.Clone();
          break;
        case MsgOneofCase.BasicInfoVersionResp:
          BasicInfoVersionResp = other.BasicInfoVersionResp.Clone();
          break;
        case MsgOneofCase.InitialEventRep:
          InitialEventRep = other.InitialEventRep.Clone();
          break;
        case MsgOneofCase.InitialEventResp:
          InitialEventResp = other.InitialEventResp.Clone();
          break;
        case MsgOneofCase.BasicInfoRep:
          BasicInfoRep = other.BasicInfoRep.Clone();
          break;
        case MsgOneofCase.BasicInfoResp:
          BasicInfoResp = other.BasicInfoResp.Clone();
          break;
        case MsgOneofCase.TavellingDataRep:
          TavellingDataRep = other.TavellingDataRep.Clone();
          break;
        case MsgOneofCase.TavellingDataResp:
          TavellingDataResp = other.TavellingDataResp.Clone();
          break;
        case MsgOneofCase.SectionDataRep:
          SectionDataRep = other.SectionDataRep.Clone();
          break;
        case MsgOneofCase.SectionDataResp:
          SectionDataResp = other.SectionDataResp.Clone();
          break;
        case MsgOneofCase.AddressDataRep:
          AddressDataRep = other.AddressDataRep.Clone();
          break;
        case MsgOneofCase.AddressDataResp:
          AddressDataResp = other.AddressDataResp.Clone();
          break;
        case MsgOneofCase.ScaleDataRep:
          ScaleDataRep = other.ScaleDataRep.Clone();
          break;
        case MsgOneofCase.ScaleDataResp:
          ScaleDataResp = other.ScaleDataResp.Clone();
          break;
        case MsgOneofCase.ControlDataRep:
          ControlDataRep = other.ControlDataRep.Clone();
          break;
        case MsgOneofCase.ControlDataResp:
          ControlDataResp = other.ControlDataResp.Clone();
          break;
        case MsgOneofCase.GuideDataRep:
          GuideDataRep = other.GuideDataRep.Clone();
          break;
        case MsgOneofCase.GuideDataResp:
          GuideDataResp = other.GuideDataResp.Clone();
          break;
        case MsgOneofCase.IndividualUploadReq:
          IndividualUploadReq = other.IndividualUploadReq.Clone();
          break;
        case MsgOneofCase.IndividualUploadResp:
          IndividualUploadResp = other.IndividualUploadResp.Clone();
          break;
        case MsgOneofCase.GUIDEDataUploadReq:
          GUIDEDataUploadReq = other.GUIDEDataUploadReq.Clone();
          break;
        case MsgOneofCase.GUIDEDataUploadResp:
          GUIDEDataUploadResp = other.GUIDEDataUploadResp.Clone();
          break;
        case MsgOneofCase.IndividualChangeReq:
          IndividualChangeReq = other.IndividualChangeReq.Clone();
          break;
        case MsgOneofCase.IndividualChangeResp:
          IndividualChangeResp = other.IndividualChangeResp.Clone();
          break;
        case MsgOneofCase.ModeChangeReq:
          ModeChangeReq = other.ModeChangeReq.Clone();
          break;
        case MsgOneofCase.ModeChangeResp:
          ModeChangeResp = other.ModeChangeResp.Clone();
          break;
        case MsgOneofCase.TransReq:
          TransReq = other.TransReq.Clone();
          break;
        case MsgOneofCase.TransResp:
          TransResp = other.TransResp.Clone();
          break;
        case MsgOneofCase.TranCmpRep:
          TranCmpRep = other.TranCmpRep.Clone();
          break;
        case MsgOneofCase.TranCmpResp:
          TranCmpResp = other.TranCmpResp.Clone();
          break;
        case MsgOneofCase.ControlZoneReq:
          ControlZoneReq = other.ControlZoneReq.Clone();
          break;
        case MsgOneofCase.ControlZoneResp:
          ControlZoneResp = other.ControlZoneResp.Clone();
          break;
        case MsgOneofCase.CARRIERIDRenameReq:
          CARRIERIDRenameReq = other.CARRIERIDRenameReq.Clone();
          break;
        case MsgOneofCase.CARRIERIDRenameResp:
          CARRIERIDRenameResp = other.CARRIERIDRenameResp.Clone();
          break;
        case MsgOneofCase.TransCancelReq:
          TransCancelReq = other.TransCancelReq.Clone();
          break;
        case MsgOneofCase.TransCancelResp:
          TransCancelResp = other.TransCancelResp.Clone();
          break;
        case MsgOneofCase.GuideInfoReq:
          GuideInfoReq = other.GuideInfoReq.Clone();
          break;
        case MsgOneofCase.GuideInfoResp:
          GuideInfoResp = other.GuideInfoResp.Clone();
          break;
        case MsgOneofCase.PauseReq:
          PauseReq = other.PauseReq.Clone();
          break;
        case MsgOneofCase.PauseResp:
          PauseResp = other.PauseResp.Clone();
          break;
        case MsgOneofCase.TransEventRep:
          TransEventRep = other.TransEventRep.Clone();
          break;
        case MsgOneofCase.ImpTransEventRep:
          ImpTransEventRep = other.ImpTransEventRep.Clone();
          break;
        case MsgOneofCase.ImpTransEventResp:
          ImpTransEventResp = other.ImpTransEventResp.Clone();
          break;
        case MsgOneofCase.StatusReq:
          StatusReq = other.StatusReq.Clone();
          break;
        case MsgOneofCase.StatusReqResp:
          StatusReqResp = other.StatusReqResp.Clone();
          break;
        case MsgOneofCase.StatueChangeRep:
          StatueChangeRep = other.StatueChangeRep.Clone();
          break;
        case MsgOneofCase.StatusChangeResp:
          StatusChangeResp = other.StatusChangeResp.Clone();
          break;
        case MsgOneofCase.PowerOpeReq:
          PowerOpeReq = other.PowerOpeReq.Clone();
          break;
        case MsgOneofCase.PowerOpeResp:
          PowerOpeResp = other.PowerOpeResp.Clone();
          break;
        case MsgOneofCase.AvoidReq:
          AvoidReq = other.AvoidReq.Clone();
          break;
        case MsgOneofCase.AvoidResp:
          AvoidResp = other.AvoidResp.Clone();
          break;
        case MsgOneofCase.AvoidCompleteRep:
          AvoidCompleteRep = other.AvoidCompleteRep.Clone();
          break;
        case MsgOneofCase.AvoidCompleteResp:
          AvoidCompleteResp = other.AvoidCompleteResp.Clone();
          break;
        case MsgOneofCase.RangeTeachingReq:
          RangeTeachingReq = other.RangeTeachingReq.Clone();
          break;
        case MsgOneofCase.RangeTeachingResp:
          RangeTeachingResp = other.RangeTeachingResp.Clone();
          break;
        case MsgOneofCase.RangeTeachingCmpRep:
          RangeTeachingCmpRep = other.RangeTeachingCmpRep.Clone();
          break;
        case MsgOneofCase.RangeTeachingCmpResp:
          RangeTeachingCmpResp = other.RangeTeachingCmpResp.Clone();
          break;
        case MsgOneofCase.AddressTeachRep:
          AddressTeachRep = other.AddressTeachRep.Clone();
          break;
        case MsgOneofCase.AddressTeachResp:
          AddressTeachResp = other.AddressTeachResp.Clone();
          break;
        case MsgOneofCase.AlarmResetReq:
          AlarmResetReq = other.AlarmResetReq.Clone();
          break;
        case MsgOneofCase.AlarmResetResp:
          AlarmResetResp = other.AlarmResetResp.Clone();
          break;
        case MsgOneofCase.AlarmRep:
          AlarmRep = other.AlarmRep.Clone();
          break;
        case MsgOneofCase.AlarmResp:
          AlarmResp = other.AlarmResp.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage Clone() {
      return new WrapperMessage(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1000;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "SeqNum" field.</summary>
    public const int SeqNumFieldNumber = 1001;
    private int seqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqNum {
      get { return seqNum_; }
      set {
        seqNum_ = value;
      }
    }

    /// <summary>Field number for the "Host_Basic_Info_Rep" field.</summary>
    public const int HostBasicInfoRepFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_1_HOST_BASIC_INFO_VERSION_REP HostBasicInfoRep {
      get { return msgCase_ == MsgOneofCase.HostBasicInfoRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_1_HOST_BASIC_INFO_VERSION_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.HostBasicInfoRep;
      }
    }

    /// <summary>Field number for the "Host_Basic_Info_Resp" field.</summary>
    public const int HostBasicInfoRespFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE HostBasicInfoResp {
      get { return msgCase_ == MsgOneofCase.HostBasicInfoResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.HostBasicInfoResp;
      }
    }

    /// <summary>Field number for the "Basic_Info_Version_Rep" field.</summary>
    public const int BasicInfoVersionRepFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_102_BASIC_INFO_VERSION_REP BasicInfoVersionRep {
      get { return msgCase_ == MsgOneofCase.BasicInfoVersionRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_102_BASIC_INFO_VERSION_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoVersionRep;
      }
    }

    /// <summary>Field number for the "Basic_Info_Version_Resp" field.</summary>
    public const int BasicInfoVersionRespFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_2_BASIC_INFO_VERSION_RESPONSE BasicInfoVersionResp {
      get { return msgCase_ == MsgOneofCase.BasicInfoVersionResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_2_BASIC_INFO_VERSION_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoVersionResp;
      }
    }

    /// <summary>Field number for the "Initial_Event_Rep" field.</summary>
    public const int InitialEventRepFieldNumber = 106;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_106_INITIAL_EVENT_REP InitialEventRep {
      get { return msgCase_ == MsgOneofCase.InitialEventRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_106_INITIAL_EVENT_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.InitialEventRep;
      }
    }

    /// <summary>Field number for the "Initial_Event_Resp" field.</summary>
    public const int InitialEventRespFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_6_INITIAL_EVENT_RESPONSE InitialEventResp {
      get { return msgCase_ == MsgOneofCase.InitialEventResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_6_INITIAL_EVENT_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.InitialEventResp;
      }
    }

    /// <summary>Field number for the "Basic_Info_Rep" field.</summary>
    public const int BasicInfoRepFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_11_BASIC_INFO_REP BasicInfoRep {
      get { return msgCase_ == MsgOneofCase.BasicInfoRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_11_BASIC_INFO_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoRep;
      }
    }

    /// <summary>Field number for the "Basic_Info_Resp" field.</summary>
    public const int BasicInfoRespFieldNumber = 111;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_111_BASIC_INFO_RESPONSE BasicInfoResp {
      get { return msgCase_ == MsgOneofCase.BasicInfoResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_111_BASIC_INFO_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoResp;
      }
    }

    /// <summary>Field number for the "Tavelling_Data_Rep" field.</summary>
    public const int TavellingDataRepFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_13_TAVELLING_DATA_REP TavellingDataRep {
      get { return msgCase_ == MsgOneofCase.TavellingDataRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_13_TAVELLING_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TavellingDataRep;
      }
    }

    /// <summary>Field number for the "Tavelling_Data_Resp" field.</summary>
    public const int TavellingDataRespFieldNumber = 113;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_113_TAVELLING_DATA_RESPONSE TavellingDataResp {
      get { return msgCase_ == MsgOneofCase.TavellingDataResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_113_TAVELLING_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TavellingDataResp;
      }
    }

    /// <summary>Field number for the "Section_Data_Rep" field.</summary>
    public const int SectionDataRepFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP SectionDataRep {
      get { return msgCase_ == MsgOneofCase.SectionDataRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SectionDataRep;
      }
    }

    /// <summary>Field number for the "Section_Data_Resp" field.</summary>
    public const int SectionDataRespFieldNumber = 115;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_115_SECTION_DATA_RESPONSE SectionDataResp {
      get { return msgCase_ == MsgOneofCase.SectionDataResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_115_SECTION_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SectionDataResp;
      }
    }

    /// <summary>Field number for the "Address_Data_Rep" field.</summary>
    public const int AddressDataRepFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP AddressDataRep {
      get { return msgCase_ == MsgOneofCase.AddressDataRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressDataRep;
      }
    }

    /// <summary>Field number for the "Address_Data_Resp" field.</summary>
    public const int AddressDataRespFieldNumber = 117;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_117_ADDRESS_DATA_RESPONSE AddressDataResp {
      get { return msgCase_ == MsgOneofCase.AddressDataResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_117_ADDRESS_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressDataResp;
      }
    }

    /// <summary>Field number for the "Scale_Data_Rep" field.</summary>
    public const int ScaleDataRepFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_19_SCALE_DATA_REP ScaleDataRep {
      get { return msgCase_ == MsgOneofCase.ScaleDataRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_19_SCALE_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ScaleDataRep;
      }
    }

    /// <summary>Field number for the "Scale_Data_Resp" field.</summary>
    public const int ScaleDataRespFieldNumber = 119;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_119_SCALE_DATA_RESPONSE ScaleDataResp {
      get { return msgCase_ == MsgOneofCase.ScaleDataResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_119_SCALE_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ScaleDataResp;
      }
    }

    /// <summary>Field number for the "Control_Data_Rep" field.</summary>
    public const int ControlDataRepFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_21_CONTROL_DATA_REP ControlDataRep {
      get { return msgCase_ == MsgOneofCase.ControlDataRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_21_CONTROL_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlDataRep;
      }
    }

    /// <summary>Field number for the "Control_Data_Resp" field.</summary>
    public const int ControlDataRespFieldNumber = 121;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_121_CONTROL_DATA_RESPONSE ControlDataResp {
      get { return msgCase_ == MsgOneofCase.ControlDataResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_121_CONTROL_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlDataResp;
      }
    }

    /// <summary>Field number for the "Guide_Data_Rep" field.</summary>
    public const int GuideDataRepFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_23_GUIDE_DATA_REP GuideDataRep {
      get { return msgCase_ == MsgOneofCase.GuideDataRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_23_GUIDE_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideDataRep;
      }
    }

    /// <summary>Field number for the "Guide_Data_Resp" field.</summary>
    public const int GuideDataRespFieldNumber = 123;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_123_GUIDE_DATA_RESPONSE GuideDataResp {
      get { return msgCase_ == MsgOneofCase.GuideDataResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_123_GUIDE_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideDataResp;
      }
    }

    /// <summary>Field number for the "Individual_Upload_Req" field.</summary>
    public const int IndividualUploadReqFieldNumber = 61;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_61_INDIVIDUAL_UPLOAD_REQ IndividualUploadReq {
      get { return msgCase_ == MsgOneofCase.IndividualUploadReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_61_INDIVIDUAL_UPLOAD_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualUploadReq;
      }
    }

    /// <summary>Field number for the "Individual_Upload_Resp" field.</summary>
    public const int IndividualUploadRespFieldNumber = 161;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE IndividualUploadResp {
      get { return msgCase_ == MsgOneofCase.IndividualUploadResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualUploadResp;
      }
    }

    /// <summary>Field number for the "GUIDE_Data_Upload_Req" field.</summary>
    public const int GUIDEDataUploadReqFieldNumber = 162;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_162_GUIDE_DATA_UPLOAD_REP GUIDEDataUploadReq {
      get { return msgCase_ == MsgOneofCase.GUIDEDataUploadReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_162_GUIDE_DATA_UPLOAD_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GUIDEDataUploadReq;
      }
    }

    /// <summary>Field number for the "GUIDE_Data_Upload_Resp" field.</summary>
    public const int GUIDEDataUploadRespFieldNumber = 62;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE GUIDEDataUploadResp {
      get { return msgCase_ == MsgOneofCase.GUIDEDataUploadResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GUIDEDataUploadResp;
      }
    }

    /// <summary>Field number for the "Individual_Change_Req" field.</summary>
    public const int IndividualChangeReqFieldNumber = 63;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_63_INDIVIDUAL_CHANGE_REQ IndividualChangeReq {
      get { return msgCase_ == MsgOneofCase.IndividualChangeReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_63_INDIVIDUAL_CHANGE_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualChangeReq;
      }
    }

    /// <summary>Field number for the "Individual_Change_Resp" field.</summary>
    public const int IndividualChangeRespFieldNumber = 163;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE IndividualChangeResp {
      get { return msgCase_ == MsgOneofCase.IndividualChangeResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualChangeResp;
      }
    }

    /// <summary>Field number for the "Mode_Change_Req" field.</summary>
    public const int ModeChangeReqFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_41_MODE_CHANGE_REQ ModeChangeReq {
      get { return msgCase_ == MsgOneofCase.ModeChangeReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_41_MODE_CHANGE_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ModeChangeReq;
      }
    }

    /// <summary>Field number for the "Mode_Change_Resp" field.</summary>
    public const int ModeChangeRespFieldNumber = 141;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_141_MODE_CHANGE_RESPONSE ModeChangeResp {
      get { return msgCase_ == MsgOneofCase.ModeChangeResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_141_MODE_CHANGE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ModeChangeResp;
      }
    }

    /// <summary>Field number for the "Trans_Req" field.</summary>
    public const int TransReqFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_31_TRANS_REQUEST TransReq {
      get { return msgCase_ == MsgOneofCase.TransReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_31_TRANS_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransReq;
      }
    }

    /// <summary>Field number for the "Trans_Resp" field.</summary>
    public const int TransRespFieldNumber = 131;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_131_TRANS_RESPONSE TransResp {
      get { return msgCase_ == MsgOneofCase.TransResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_131_TRANS_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransResp;
      }
    }

    /// <summary>Field number for the "Tran_Cmp_Rep" field.</summary>
    public const int TranCmpRepFieldNumber = 132;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_132_TRANS_COMPLETE_REPORT TranCmpRep {
      get { return msgCase_ == MsgOneofCase.TranCmpRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_132_TRANS_COMPLETE_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TranCmpRep;
      }
    }

    /// <summary>Field number for the "Tran_Cmp_Resp" field.</summary>
    public const int TranCmpRespFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_32_TRANS_COMPLETE_RESPONSE TranCmpResp {
      get { return msgCase_ == MsgOneofCase.TranCmpResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_32_TRANS_COMPLETE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TranCmpResp;
      }
    }

    /// <summary>Field number for the "Control_Zone_Req" field.</summary>
    public const int ControlZoneReqFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST ControlZoneReq {
      get { return msgCase_ == MsgOneofCase.ControlZoneReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlZoneReq;
      }
    }

    /// <summary>Field number for the "Control_Zone_Resp" field.</summary>
    public const int ControlZoneRespFieldNumber = 133;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE ControlZoneResp {
      get { return msgCase_ == MsgOneofCase.ControlZoneResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlZoneResp;
      }
    }

    /// <summary>Field number for the "CARRIER_ID_Rename_Req" field.</summary>
    public const int CARRIERIDRenameReqFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_35_CARRIER_ID_RENAME_REQUEST CARRIERIDRenameReq {
      get { return msgCase_ == MsgOneofCase.CARRIERIDRenameReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_35_CARRIER_ID_RENAME_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CARRIERIDRenameReq;
      }
    }

    /// <summary>Field number for the "CARRIER_ID_Rename_Resp" field.</summary>
    public const int CARRIERIDRenameRespFieldNumber = 135;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_135_CARRIER_ID_RENAME_RESPONSE CARRIERIDRenameResp {
      get { return msgCase_ == MsgOneofCase.CARRIERIDRenameResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_135_CARRIER_ID_RENAME_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CARRIERIDRenameResp;
      }
    }

    /// <summary>Field number for the "Trans_Cancel_Req" field.</summary>
    public const int TransCancelReqFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_37_TRANS_CANCEL_REQUEST TransCancelReq {
      get { return msgCase_ == MsgOneofCase.TransCancelReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_37_TRANS_CANCEL_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelReq;
      }
    }

    /// <summary>Field number for the "Trans_Cancel_Resp" field.</summary>
    public const int TransCancelRespFieldNumber = 137;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_137_TRANS_CANCEL_RESPONSE TransCancelResp {
      get { return msgCase_ == MsgOneofCase.TransCancelResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_137_TRANS_CANCEL_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelResp;
      }
    }

    /// <summary>Field number for the "Guide_Info_Req" field.</summary>
    public const int GuideInfoReqFieldNumber = 138;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_138_GUIDE_INFO_REQUEST GuideInfoReq {
      get { return msgCase_ == MsgOneofCase.GuideInfoReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_138_GUIDE_INFO_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideInfoReq;
      }
    }

    /// <summary>Field number for the "Guide_Info_Resp" field.</summary>
    public const int GuideInfoRespFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_38_GUIDE_INFO_RESPONSE GuideInfoResp {
      get { return msgCase_ == MsgOneofCase.GuideInfoResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_38_GUIDE_INFO_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideInfoResp;
      }
    }

    /// <summary>Field number for the "Pause_Req" field.</summary>
    public const int PauseReqFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_39_PAUSE_REQUEST PauseReq {
      get { return msgCase_ == MsgOneofCase.PauseReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_39_PAUSE_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PauseReq;
      }
    }

    /// <summary>Field number for the "Pause_Resp" field.</summary>
    public const int PauseRespFieldNumber = 139;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_139_PAUSE_RESPONSE PauseResp {
      get { return msgCase_ == MsgOneofCase.PauseResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_139_PAUSE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PauseResp;
      }
    }

    /// <summary>Field number for the "Trans_Event_Rep" field.</summary>
    public const int TransEventRepFieldNumber = 134;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_134_TRANS_EVENT_REP TransEventRep {
      get { return msgCase_ == MsgOneofCase.TransEventRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_134_TRANS_EVENT_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransEventRep;
      }
    }

    /// <summary>Field number for the "Imp_Trans_Event_Rep" field.</summary>
    public const int ImpTransEventRepFieldNumber = 136;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_136_TRANS_EVENT_REP ImpTransEventRep {
      get { return msgCase_ == MsgOneofCase.ImpTransEventRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_136_TRANS_EVENT_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ImpTransEventRep;
      }
    }

    /// <summary>Field number for the "Imp_Trans_Event_Resp" field.</summary>
    public const int ImpTransEventRespFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_36_TRANS_EVENT_RESPONSE ImpTransEventResp {
      get { return msgCase_ == MsgOneofCase.ImpTransEventResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_36_TRANS_EVENT_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ImpTransEventResp;
      }
    }

    /// <summary>Field number for the "Status_Req" field.</summary>
    public const int StatusReqFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_43_STATUS_REQUEST StatusReq {
      get { return msgCase_ == MsgOneofCase.StatusReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_43_STATUS_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusReq;
      }
    }

    /// <summary>Field number for the "Status_Req_Resp" field.</summary>
    public const int StatusReqRespFieldNumber = 143;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_143_STATUS_RESPONSE StatusReqResp {
      get { return msgCase_ == MsgOneofCase.StatusReqResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_143_STATUS_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusReqResp;
      }
    }

    /// <summary>Field number for the "Statue_Change_Rep" field.</summary>
    public const int StatueChangeRepFieldNumber = 144;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_144_STATUS_CHANGE_REP StatueChangeRep {
      get { return msgCase_ == MsgOneofCase.StatueChangeRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_144_STATUS_CHANGE_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatueChangeRep;
      }
    }

    /// <summary>Field number for the "Status_Change_Resp" field.</summary>
    public const int StatusChangeRespFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_44_STATUS_CHANGE_RESPONSE StatusChangeResp {
      get { return msgCase_ == MsgOneofCase.StatusChangeResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_44_STATUS_CHANGE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusChangeResp;
      }
    }

    /// <summary>Field number for the "Power_Ope_Req" field.</summary>
    public const int PowerOpeReqFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_45_POWER_OPE_REQ PowerOpeReq {
      get { return msgCase_ == MsgOneofCase.PowerOpeReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_45_POWER_OPE_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PowerOpeReq;
      }
    }

    /// <summary>Field number for the "Power_Ope_Resp" field.</summary>
    public const int PowerOpeRespFieldNumber = 145;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_145_POWER_OPE_RESPONSE PowerOpeResp {
      get { return msgCase_ == MsgOneofCase.PowerOpeResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_145_POWER_OPE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PowerOpeResp;
      }
    }

    /// <summary>Field number for the "Avoid_Req" field.</summary>
    public const int AvoidReqFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_51_AVOID_REQUEST AvoidReq {
      get { return msgCase_ == MsgOneofCase.AvoidReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_51_AVOID_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidReq;
      }
    }

    /// <summary>Field number for the "Avoid_Resp" field.</summary>
    public const int AvoidRespFieldNumber = 151;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_151_AVOID_RESPONSE AvoidResp {
      get { return msgCase_ == MsgOneofCase.AvoidResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_151_AVOID_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidResp;
      }
    }

    /// <summary>Field number for the "Avoid_Complete_Rep" field.</summary>
    public const int AvoidCompleteRepFieldNumber = 152;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_152_AVOID_COMPLETE_REPORT AvoidCompleteRep {
      get { return msgCase_ == MsgOneofCase.AvoidCompleteRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_152_AVOID_COMPLETE_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidCompleteRep;
      }
    }

    /// <summary>Field number for the "Avoid_Complete_Resp" field.</summary>
    public const int AvoidCompleteRespFieldNumber = 52;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_52_AVOID_COMPLETE_RESPONSE AvoidCompleteResp {
      get { return msgCase_ == MsgOneofCase.AvoidCompleteResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_52_AVOID_COMPLETE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidCompleteResp;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Req" field.</summary>
    public const int RangeTeachingReqFieldNumber = 71;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_71_RANGE_TEACHING_REQUEST RangeTeachingReq {
      get { return msgCase_ == MsgOneofCase.RangeTeachingReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_71_RANGE_TEACHING_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingReq;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Resp" field.</summary>
    public const int RangeTeachingRespFieldNumber = 171;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_171_RANGE_TEACHING_RESPONSE RangeTeachingResp {
      get { return msgCase_ == MsgOneofCase.RangeTeachingResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_171_RANGE_TEACHING_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingResp;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Cmp_Rep" field.</summary>
    public const int RangeTeachingCmpRepFieldNumber = 172;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT RangeTeachingCmpRep {
      get { return msgCase_ == MsgOneofCase.RangeTeachingCmpRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingCmpRep;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Cmp_Resp" field.</summary>
    public const int RangeTeachingCmpRespFieldNumber = 72;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE RangeTeachingCmpResp {
      get { return msgCase_ == MsgOneofCase.RangeTeachingCmpResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingCmpResp;
      }
    }

    /// <summary>Field number for the "Address_Teach_Rep" field.</summary>
    public const int AddressTeachRepFieldNumber = 174;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_174_ADDRESS_TEACH_REPORT AddressTeachRep {
      get { return msgCase_ == MsgOneofCase.AddressTeachRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_174_ADDRESS_TEACH_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressTeachRep;
      }
    }

    /// <summary>Field number for the "Address_Teach_Resp" field.</summary>
    public const int AddressTeachRespFieldNumber = 74;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_74_ADDRESS_TEACH_RESPONSE AddressTeachResp {
      get { return msgCase_ == MsgOneofCase.AddressTeachResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_74_ADDRESS_TEACH_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressTeachResp;
      }
    }

    /// <summary>Field number for the "Alarm_Reset_Req" field.</summary>
    public const int AlarmResetReqFieldNumber = 91;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_91_ALARM_RESET_REQUEST AlarmResetReq {
      get { return msgCase_ == MsgOneofCase.AlarmResetReq ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_91_ALARM_RESET_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResetReq;
      }
    }

    /// <summary>Field number for the "Alarm_Reset_Resp" field.</summary>
    public const int AlarmResetRespFieldNumber = 191;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_191_ALARM_RESET_RESPONSE AlarmResetResp {
      get { return msgCase_ == MsgOneofCase.AlarmResetResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_191_ALARM_RESET_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResetResp;
      }
    }

    /// <summary>Field number for the "Alarm_Rep" field.</summary>
    public const int AlarmRepFieldNumber = 194;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_194_ALARM_REPORT AlarmRep {
      get { return msgCase_ == MsgOneofCase.AlarmRep ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_194_ALARM_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmRep;
      }
    }

    /// <summary>Field number for the "Alarm_Resp" field.</summary>
    public const int AlarmRespFieldNumber = 94;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_94_ALARM_RESPONSE AlarmResp {
      get { return msgCase_ == MsgOneofCase.AlarmResp ? (global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_94_ALARM_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResp;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      HostBasicInfoRep = 1,
      HostBasicInfoResp = 101,
      BasicInfoVersionRep = 102,
      BasicInfoVersionResp = 2,
      InitialEventRep = 106,
      InitialEventResp = 6,
      BasicInfoRep = 11,
      BasicInfoResp = 111,
      TavellingDataRep = 13,
      TavellingDataResp = 113,
      SectionDataRep = 15,
      SectionDataResp = 115,
      AddressDataRep = 17,
      AddressDataResp = 117,
      ScaleDataRep = 19,
      ScaleDataResp = 119,
      ControlDataRep = 21,
      ControlDataResp = 121,
      GuideDataRep = 23,
      GuideDataResp = 123,
      IndividualUploadReq = 61,
      IndividualUploadResp = 161,
      GUIDEDataUploadReq = 162,
      GUIDEDataUploadResp = 62,
      IndividualChangeReq = 63,
      IndividualChangeResp = 163,
      ModeChangeReq = 41,
      ModeChangeResp = 141,
      TransReq = 31,
      TransResp = 131,
      TranCmpRep = 132,
      TranCmpResp = 32,
      ControlZoneReq = 33,
      ControlZoneResp = 133,
      CARRIERIDRenameReq = 35,
      CARRIERIDRenameResp = 135,
      TransCancelReq = 37,
      TransCancelResp = 137,
      GuideInfoReq = 138,
      GuideInfoResp = 38,
      PauseReq = 39,
      PauseResp = 139,
      TransEventRep = 134,
      ImpTransEventRep = 136,
      ImpTransEventResp = 36,
      StatusReq = 43,
      StatusReqResp = 143,
      StatueChangeRep = 144,
      StatusChangeResp = 44,
      PowerOpeReq = 45,
      PowerOpeResp = 145,
      AvoidReq = 51,
      AvoidResp = 151,
      AvoidCompleteRep = 152,
      AvoidCompleteResp = 52,
      RangeTeachingReq = 71,
      RangeTeachingResp = 171,
      RangeTeachingCmpRep = 172,
      RangeTeachingCmpResp = 72,
      AddressTeachRep = 174,
      AddressTeachResp = 74,
      AlarmResetReq = 91,
      AlarmResetResp = 191,
      AlarmRep = 194,
      AlarmResp = 94,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WrapperMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WrapperMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (SeqNum != other.SeqNum) return false;
      if (!object.Equals(HostBasicInfoRep, other.HostBasicInfoRep)) return false;
      if (!object.Equals(HostBasicInfoResp, other.HostBasicInfoResp)) return false;
      if (!object.Equals(BasicInfoVersionRep, other.BasicInfoVersionRep)) return false;
      if (!object.Equals(BasicInfoVersionResp, other.BasicInfoVersionResp)) return false;
      if (!object.Equals(InitialEventRep, other.InitialEventRep)) return false;
      if (!object.Equals(InitialEventResp, other.InitialEventResp)) return false;
      if (!object.Equals(BasicInfoRep, other.BasicInfoRep)) return false;
      if (!object.Equals(BasicInfoResp, other.BasicInfoResp)) return false;
      if (!object.Equals(TavellingDataRep, other.TavellingDataRep)) return false;
      if (!object.Equals(TavellingDataResp, other.TavellingDataResp)) return false;
      if (!object.Equals(SectionDataRep, other.SectionDataRep)) return false;
      if (!object.Equals(SectionDataResp, other.SectionDataResp)) return false;
      if (!object.Equals(AddressDataRep, other.AddressDataRep)) return false;
      if (!object.Equals(AddressDataResp, other.AddressDataResp)) return false;
      if (!object.Equals(ScaleDataRep, other.ScaleDataRep)) return false;
      if (!object.Equals(ScaleDataResp, other.ScaleDataResp)) return false;
      if (!object.Equals(ControlDataRep, other.ControlDataRep)) return false;
      if (!object.Equals(ControlDataResp, other.ControlDataResp)) return false;
      if (!object.Equals(GuideDataRep, other.GuideDataRep)) return false;
      if (!object.Equals(GuideDataResp, other.GuideDataResp)) return false;
      if (!object.Equals(IndividualUploadReq, other.IndividualUploadReq)) return false;
      if (!object.Equals(IndividualUploadResp, other.IndividualUploadResp)) return false;
      if (!object.Equals(GUIDEDataUploadReq, other.GUIDEDataUploadReq)) return false;
      if (!object.Equals(GUIDEDataUploadResp, other.GUIDEDataUploadResp)) return false;
      if (!object.Equals(IndividualChangeReq, other.IndividualChangeReq)) return false;
      if (!object.Equals(IndividualChangeResp, other.IndividualChangeResp)) return false;
      if (!object.Equals(ModeChangeReq, other.ModeChangeReq)) return false;
      if (!object.Equals(ModeChangeResp, other.ModeChangeResp)) return false;
      if (!object.Equals(TransReq, other.TransReq)) return false;
      if (!object.Equals(TransResp, other.TransResp)) return false;
      if (!object.Equals(TranCmpRep, other.TranCmpRep)) return false;
      if (!object.Equals(TranCmpResp, other.TranCmpResp)) return false;
      if (!object.Equals(ControlZoneReq, other.ControlZoneReq)) return false;
      if (!object.Equals(ControlZoneResp, other.ControlZoneResp)) return false;
      if (!object.Equals(CARRIERIDRenameReq, other.CARRIERIDRenameReq)) return false;
      if (!object.Equals(CARRIERIDRenameResp, other.CARRIERIDRenameResp)) return false;
      if (!object.Equals(TransCancelReq, other.TransCancelReq)) return false;
      if (!object.Equals(TransCancelResp, other.TransCancelResp)) return false;
      if (!object.Equals(GuideInfoReq, other.GuideInfoReq)) return false;
      if (!object.Equals(GuideInfoResp, other.GuideInfoResp)) return false;
      if (!object.Equals(PauseReq, other.PauseReq)) return false;
      if (!object.Equals(PauseResp, other.PauseResp)) return false;
      if (!object.Equals(TransEventRep, other.TransEventRep)) return false;
      if (!object.Equals(ImpTransEventRep, other.ImpTransEventRep)) return false;
      if (!object.Equals(ImpTransEventResp, other.ImpTransEventResp)) return false;
      if (!object.Equals(StatusReq, other.StatusReq)) return false;
      if (!object.Equals(StatusReqResp, other.StatusReqResp)) return false;
      if (!object.Equals(StatueChangeRep, other.StatueChangeRep)) return false;
      if (!object.Equals(StatusChangeResp, other.StatusChangeResp)) return false;
      if (!object.Equals(PowerOpeReq, other.PowerOpeReq)) return false;
      if (!object.Equals(PowerOpeResp, other.PowerOpeResp)) return false;
      if (!object.Equals(AvoidReq, other.AvoidReq)) return false;
      if (!object.Equals(AvoidResp, other.AvoidResp)) return false;
      if (!object.Equals(AvoidCompleteRep, other.AvoidCompleteRep)) return false;
      if (!object.Equals(AvoidCompleteResp, other.AvoidCompleteResp)) return false;
      if (!object.Equals(RangeTeachingReq, other.RangeTeachingReq)) return false;
      if (!object.Equals(RangeTeachingResp, other.RangeTeachingResp)) return false;
      if (!object.Equals(RangeTeachingCmpRep, other.RangeTeachingCmpRep)) return false;
      if (!object.Equals(RangeTeachingCmpResp, other.RangeTeachingCmpResp)) return false;
      if (!object.Equals(AddressTeachRep, other.AddressTeachRep)) return false;
      if (!object.Equals(AddressTeachResp, other.AddressTeachResp)) return false;
      if (!object.Equals(AlarmResetReq, other.AlarmResetReq)) return false;
      if (!object.Equals(AlarmResetResp, other.AlarmResetResp)) return false;
      if (!object.Equals(AlarmRep, other.AlarmRep)) return false;
      if (!object.Equals(AlarmResp, other.AlarmResp)) return false;
      if (MsgCase != other.MsgCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (SeqNum != 0) hash ^= SeqNum.GetHashCode();
      if (msgCase_ == MsgOneofCase.HostBasicInfoRep) hash ^= HostBasicInfoRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.HostBasicInfoResp) hash ^= HostBasicInfoResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) hash ^= BasicInfoVersionRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) hash ^= BasicInfoVersionResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.InitialEventRep) hash ^= InitialEventRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.InitialEventResp) hash ^= InitialEventResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoRep) hash ^= BasicInfoRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoResp) hash ^= BasicInfoResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TavellingDataRep) hash ^= TavellingDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.TavellingDataResp) hash ^= TavellingDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.SectionDataRep) hash ^= SectionDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.SectionDataResp) hash ^= SectionDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressDataRep) hash ^= AddressDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressDataResp) hash ^= AddressDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ScaleDataRep) hash ^= ScaleDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ScaleDataResp) hash ^= ScaleDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlDataRep) hash ^= ControlDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlDataResp) hash ^= ControlDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideDataRep) hash ^= GuideDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideDataResp) hash ^= GuideDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualUploadReq) hash ^= IndividualUploadReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualUploadResp) hash ^= IndividualUploadResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadReq) hash ^= GUIDEDataUploadReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadResp) hash ^= GUIDEDataUploadResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualChangeReq) hash ^= IndividualChangeReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualChangeResp) hash ^= IndividualChangeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ModeChangeReq) hash ^= ModeChangeReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.ModeChangeResp) hash ^= ModeChangeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransReq) hash ^= TransReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransResp) hash ^= TransResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TranCmpRep) hash ^= TranCmpRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.TranCmpResp) hash ^= TranCmpResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlZoneReq) hash ^= ControlZoneReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlZoneResp) hash ^= ControlZoneResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameReq) hash ^= CARRIERIDRenameReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameResp) hash ^= CARRIERIDRenameResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransCancelReq) hash ^= TransCancelReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransCancelResp) hash ^= TransCancelResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideInfoReq) hash ^= GuideInfoReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideInfoResp) hash ^= GuideInfoResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.PauseReq) hash ^= PauseReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.PauseResp) hash ^= PauseResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransEventRep) hash ^= TransEventRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ImpTransEventRep) hash ^= ImpTransEventRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ImpTransEventResp) hash ^= ImpTransEventResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatusReq) hash ^= StatusReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatusReqResp) hash ^= StatusReqResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatueChangeRep) hash ^= StatueChangeRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatusChangeResp) hash ^= StatusChangeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.PowerOpeReq) hash ^= PowerOpeReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.PowerOpeResp) hash ^= PowerOpeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidReq) hash ^= AvoidReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidResp) hash ^= AvoidResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidCompleteRep) hash ^= AvoidCompleteRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidCompleteResp) hash ^= AvoidCompleteResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingReq) hash ^= RangeTeachingReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingResp) hash ^= RangeTeachingResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) hash ^= RangeTeachingCmpRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) hash ^= RangeTeachingCmpResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressTeachRep) hash ^= AddressTeachRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressTeachResp) hash ^= AddressTeachResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmResetReq) hash ^= AlarmResetReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmResetResp) hash ^= AlarmResetResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmRep) hash ^= AlarmRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmResp) hash ^= AlarmResp.GetHashCode();
      hash ^= (int) msgCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.HostBasicInfoRep) {
        output.WriteRawTag(10);
        output.WriteMessage(HostBasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) {
        output.WriteRawTag(18);
        output.WriteMessage(BasicInfoVersionResp);
      }
      if (msgCase_ == MsgOneofCase.InitialEventResp) {
        output.WriteRawTag(50);
        output.WriteMessage(InitialEventResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoRep) {
        output.WriteRawTag(90);
        output.WriteMessage(BasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataRep) {
        output.WriteRawTag(106);
        output.WriteMessage(TavellingDataRep);
      }
      if (msgCase_ == MsgOneofCase.SectionDataRep) {
        output.WriteRawTag(122);
        output.WriteMessage(SectionDataRep);
      }
      if (msgCase_ == MsgOneofCase.AddressDataRep) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(AddressDataRep);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataRep) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ScaleDataRep);
      }
      if (msgCase_ == MsgOneofCase.ControlDataRep) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ControlDataRep);
      }
      if (msgCase_ == MsgOneofCase.GuideDataRep) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(GuideDataRep);
      }
      if (msgCase_ == MsgOneofCase.TransReq) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(TransReq);
      }
      if (msgCase_ == MsgOneofCase.TranCmpResp) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(TranCmpResp);
      }
      if (msgCase_ == MsgOneofCase.ControlZoneReq) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(ControlZoneReq);
      }
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameReq) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(CARRIERIDRenameReq);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventResp) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(ImpTransEventResp);
      }
      if (msgCase_ == MsgOneofCase.TransCancelReq) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(TransCancelReq);
      }
      if (msgCase_ == MsgOneofCase.GuideInfoResp) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(GuideInfoResp);
      }
      if (msgCase_ == MsgOneofCase.PauseReq) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(PauseReq);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeReq) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ModeChangeReq);
      }
      if (msgCase_ == MsgOneofCase.StatusReq) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(StatusReq);
      }
      if (msgCase_ == MsgOneofCase.StatusChangeResp) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(StatusChangeResp);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeReq) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(PowerOpeReq);
      }
      if (msgCase_ == MsgOneofCase.AvoidReq) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(AvoidReq);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteResp) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(AvoidCompleteResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadReq) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(IndividualUploadReq);
      }
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadResp) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(GUIDEDataUploadResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeReq) {
        output.WriteRawTag(250, 3);
        output.WriteMessage(IndividualChangeReq);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingReq) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(RangeTeachingReq);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) {
        output.WriteRawTag(194, 4);
        output.WriteMessage(RangeTeachingCmpResp);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachResp) {
        output.WriteRawTag(210, 4);
        output.WriteMessage(AddressTeachResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetReq) {
        output.WriteRawTag(218, 5);
        output.WriteMessage(AlarmResetReq);
      }
      if (msgCase_ == MsgOneofCase.AlarmResp) {
        output.WriteRawTag(242, 5);
        output.WriteMessage(AlarmResp);
      }
      if (msgCase_ == MsgOneofCase.HostBasicInfoResp) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(HostBasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(BasicInfoVersionRep);
      }
      if (msgCase_ == MsgOneofCase.InitialEventRep) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(InitialEventRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoResp) {
        output.WriteRawTag(250, 6);
        output.WriteMessage(BasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataResp) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(TavellingDataResp);
      }
      if (msgCase_ == MsgOneofCase.SectionDataResp) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(SectionDataResp);
      }
      if (msgCase_ == MsgOneofCase.AddressDataResp) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(AddressDataResp);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataResp) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(ScaleDataResp);
      }
      if (msgCase_ == MsgOneofCase.ControlDataResp) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(ControlDataResp);
      }
      if (msgCase_ == MsgOneofCase.GuideDataResp) {
        output.WriteRawTag(218, 7);
        output.WriteMessage(GuideDataResp);
      }
      if (msgCase_ == MsgOneofCase.TransResp) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(TransResp);
      }
      if (msgCase_ == MsgOneofCase.TranCmpRep) {
        output.WriteRawTag(162, 8);
        output.WriteMessage(TranCmpRep);
      }
      if (msgCase_ == MsgOneofCase.ControlZoneResp) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(ControlZoneResp);
      }
      if (msgCase_ == MsgOneofCase.TransEventRep) {
        output.WriteRawTag(178, 8);
        output.WriteMessage(TransEventRep);
      }
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameResp) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(CARRIERIDRenameResp);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventRep) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(ImpTransEventRep);
      }
      if (msgCase_ == MsgOneofCase.TransCancelResp) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(TransCancelResp);
      }
      if (msgCase_ == MsgOneofCase.GuideInfoReq) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(GuideInfoReq);
      }
      if (msgCase_ == MsgOneofCase.PauseResp) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(PauseResp);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeResp) {
        output.WriteRawTag(234, 8);
        output.WriteMessage(ModeChangeResp);
      }
      if (msgCase_ == MsgOneofCase.StatusReqResp) {
        output.WriteRawTag(250, 8);
        output.WriteMessage(StatusReqResp);
      }
      if (msgCase_ == MsgOneofCase.StatueChangeRep) {
        output.WriteRawTag(130, 9);
        output.WriteMessage(StatueChangeRep);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeResp) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(PowerOpeResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidResp) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(AvoidResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteRep) {
        output.WriteRawTag(194, 9);
        output.WriteMessage(AvoidCompleteRep);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadResp) {
        output.WriteRawTag(138, 10);
        output.WriteMessage(IndividualUploadResp);
      }
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadReq) {
        output.WriteRawTag(146, 10);
        output.WriteMessage(GUIDEDataUploadReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeResp) {
        output.WriteRawTag(154, 10);
        output.WriteMessage(IndividualChangeResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingResp) {
        output.WriteRawTag(218, 10);
        output.WriteMessage(RangeTeachingResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) {
        output.WriteRawTag(226, 10);
        output.WriteMessage(RangeTeachingCmpRep);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachRep) {
        output.WriteRawTag(242, 10);
        output.WriteMessage(AddressTeachRep);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetResp) {
        output.WriteRawTag(250, 11);
        output.WriteMessage(AlarmResetResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmRep) {
        output.WriteRawTag(146, 12);
        output.WriteMessage(AlarmRep);
      }
      if (ID != 0) {
        output.WriteRawTag(192, 62);
        output.WriteInt32(ID);
      }
      if (SeqNum != 0) {
        output.WriteRawTag(200, 62);
        output.WriteInt32(SeqNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (SeqNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeqNum);
      }
      if (msgCase_ == MsgOneofCase.HostBasicInfoRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HostBasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.HostBasicInfoResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HostBasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoVersionRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoVersionResp);
      }
      if (msgCase_ == MsgOneofCase.InitialEventRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InitialEventRep);
      }
      if (msgCase_ == MsgOneofCase.InitialEventResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialEventResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TavellingDataRep);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TavellingDataResp);
      }
      if (msgCase_ == MsgOneofCase.SectionDataRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SectionDataRep);
      }
      if (msgCase_ == MsgOneofCase.SectionDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SectionDataResp);
      }
      if (msgCase_ == MsgOneofCase.AddressDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressDataRep);
      }
      if (msgCase_ == MsgOneofCase.AddressDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressDataResp);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleDataRep);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleDataResp);
      }
      if (msgCase_ == MsgOneofCase.ControlDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlDataRep);
      }
      if (msgCase_ == MsgOneofCase.ControlDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlDataResp);
      }
      if (msgCase_ == MsgOneofCase.GuideDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideDataRep);
      }
      if (msgCase_ == MsgOneofCase.GuideDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideDataResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualUploadReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualUploadResp);
      }
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GUIDEDataUploadReq);
      }
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GUIDEDataUploadResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualChangeReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualChangeResp);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModeChangeReq);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModeChangeResp);
      }
      if (msgCase_ == MsgOneofCase.TransReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransReq);
      }
      if (msgCase_ == MsgOneofCase.TransResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransResp);
      }
      if (msgCase_ == MsgOneofCase.TranCmpRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TranCmpRep);
      }
      if (msgCase_ == MsgOneofCase.TranCmpResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TranCmpResp);
      }
      if (msgCase_ == MsgOneofCase.ControlZoneReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlZoneReq);
      }
      if (msgCase_ == MsgOneofCase.ControlZoneResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlZoneResp);
      }
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CARRIERIDRenameReq);
      }
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CARRIERIDRenameResp);
      }
      if (msgCase_ == MsgOneofCase.TransCancelReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelReq);
      }
      if (msgCase_ == MsgOneofCase.TransCancelResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelResp);
      }
      if (msgCase_ == MsgOneofCase.GuideInfoReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideInfoReq);
      }
      if (msgCase_ == MsgOneofCase.GuideInfoResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideInfoResp);
      }
      if (msgCase_ == MsgOneofCase.PauseReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseReq);
      }
      if (msgCase_ == MsgOneofCase.PauseResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseResp);
      }
      if (msgCase_ == MsgOneofCase.TransEventRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransEventRep);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpTransEventRep);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpTransEventResp);
      }
      if (msgCase_ == MsgOneofCase.StatusReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusReq);
      }
      if (msgCase_ == MsgOneofCase.StatusReqResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusReqResp);
      }
      if (msgCase_ == MsgOneofCase.StatueChangeRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatueChangeRep);
      }
      if (msgCase_ == MsgOneofCase.StatusChangeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusChangeResp);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerOpeReq);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerOpeResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidReq);
      }
      if (msgCase_ == MsgOneofCase.AvoidResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidCompleteRep);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidCompleteResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingReq);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingCmpRep);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingCmpResp);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressTeachRep);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressTeachResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResetReq);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResetResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmRep);
      }
      if (msgCase_ == MsgOneofCase.AlarmResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WrapperMessage other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.SeqNum != 0) {
        SeqNum = other.SeqNum;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.HostBasicInfoRep:
          HostBasicInfoRep = other.HostBasicInfoRep;
          break;
        case MsgOneofCase.HostBasicInfoResp:
          HostBasicInfoResp = other.HostBasicInfoResp;
          break;
        case MsgOneofCase.BasicInfoVersionRep:
          BasicInfoVersionRep = other.BasicInfoVersionRep;
          break;
        case MsgOneofCase.BasicInfoVersionResp:
          BasicInfoVersionResp = other.BasicInfoVersionResp;
          break;
        case MsgOneofCase.InitialEventRep:
          InitialEventRep = other.InitialEventRep;
          break;
        case MsgOneofCase.InitialEventResp:
          InitialEventResp = other.InitialEventResp;
          break;
        case MsgOneofCase.BasicInfoRep:
          BasicInfoRep = other.BasicInfoRep;
          break;
        case MsgOneofCase.BasicInfoResp:
          BasicInfoResp = other.BasicInfoResp;
          break;
        case MsgOneofCase.TavellingDataRep:
          TavellingDataRep = other.TavellingDataRep;
          break;
        case MsgOneofCase.TavellingDataResp:
          TavellingDataResp = other.TavellingDataResp;
          break;
        case MsgOneofCase.SectionDataRep:
          SectionDataRep = other.SectionDataRep;
          break;
        case MsgOneofCase.SectionDataResp:
          SectionDataResp = other.SectionDataResp;
          break;
        case MsgOneofCase.AddressDataRep:
          AddressDataRep = other.AddressDataRep;
          break;
        case MsgOneofCase.AddressDataResp:
          AddressDataResp = other.AddressDataResp;
          break;
        case MsgOneofCase.ScaleDataRep:
          ScaleDataRep = other.ScaleDataRep;
          break;
        case MsgOneofCase.ScaleDataResp:
          ScaleDataResp = other.ScaleDataResp;
          break;
        case MsgOneofCase.ControlDataRep:
          ControlDataRep = other.ControlDataRep;
          break;
        case MsgOneofCase.ControlDataResp:
          ControlDataResp = other.ControlDataResp;
          break;
        case MsgOneofCase.GuideDataRep:
          GuideDataRep = other.GuideDataRep;
          break;
        case MsgOneofCase.GuideDataResp:
          GuideDataResp = other.GuideDataResp;
          break;
        case MsgOneofCase.IndividualUploadReq:
          IndividualUploadReq = other.IndividualUploadReq;
          break;
        case MsgOneofCase.IndividualUploadResp:
          IndividualUploadResp = other.IndividualUploadResp;
          break;
        case MsgOneofCase.GUIDEDataUploadReq:
          GUIDEDataUploadReq = other.GUIDEDataUploadReq;
          break;
        case MsgOneofCase.GUIDEDataUploadResp:
          GUIDEDataUploadResp = other.GUIDEDataUploadResp;
          break;
        case MsgOneofCase.IndividualChangeReq:
          IndividualChangeReq = other.IndividualChangeReq;
          break;
        case MsgOneofCase.IndividualChangeResp:
          IndividualChangeResp = other.IndividualChangeResp;
          break;
        case MsgOneofCase.ModeChangeReq:
          ModeChangeReq = other.ModeChangeReq;
          break;
        case MsgOneofCase.ModeChangeResp:
          ModeChangeResp = other.ModeChangeResp;
          break;
        case MsgOneofCase.TransReq:
          TransReq = other.TransReq;
          break;
        case MsgOneofCase.TransResp:
          TransResp = other.TransResp;
          break;
        case MsgOneofCase.TranCmpRep:
          TranCmpRep = other.TranCmpRep;
          break;
        case MsgOneofCase.TranCmpResp:
          TranCmpResp = other.TranCmpResp;
          break;
        case MsgOneofCase.ControlZoneReq:
          ControlZoneReq = other.ControlZoneReq;
          break;
        case MsgOneofCase.ControlZoneResp:
          ControlZoneResp = other.ControlZoneResp;
          break;
        case MsgOneofCase.CARRIERIDRenameReq:
          CARRIERIDRenameReq = other.CARRIERIDRenameReq;
          break;
        case MsgOneofCase.CARRIERIDRenameResp:
          CARRIERIDRenameResp = other.CARRIERIDRenameResp;
          break;
        case MsgOneofCase.TransCancelReq:
          TransCancelReq = other.TransCancelReq;
          break;
        case MsgOneofCase.TransCancelResp:
          TransCancelResp = other.TransCancelResp;
          break;
        case MsgOneofCase.GuideInfoReq:
          GuideInfoReq = other.GuideInfoReq;
          break;
        case MsgOneofCase.GuideInfoResp:
          GuideInfoResp = other.GuideInfoResp;
          break;
        case MsgOneofCase.PauseReq:
          PauseReq = other.PauseReq;
          break;
        case MsgOneofCase.PauseResp:
          PauseResp = other.PauseResp;
          break;
        case MsgOneofCase.TransEventRep:
          TransEventRep = other.TransEventRep;
          break;
        case MsgOneofCase.ImpTransEventRep:
          ImpTransEventRep = other.ImpTransEventRep;
          break;
        case MsgOneofCase.ImpTransEventResp:
          ImpTransEventResp = other.ImpTransEventResp;
          break;
        case MsgOneofCase.StatusReq:
          StatusReq = other.StatusReq;
          break;
        case MsgOneofCase.StatusReqResp:
          StatusReqResp = other.StatusReqResp;
          break;
        case MsgOneofCase.StatueChangeRep:
          StatueChangeRep = other.StatueChangeRep;
          break;
        case MsgOneofCase.StatusChangeResp:
          StatusChangeResp = other.StatusChangeResp;
          break;
        case MsgOneofCase.PowerOpeReq:
          PowerOpeReq = other.PowerOpeReq;
          break;
        case MsgOneofCase.PowerOpeResp:
          PowerOpeResp = other.PowerOpeResp;
          break;
        case MsgOneofCase.AvoidReq:
          AvoidReq = other.AvoidReq;
          break;
        case MsgOneofCase.AvoidResp:
          AvoidResp = other.AvoidResp;
          break;
        case MsgOneofCase.AvoidCompleteRep:
          AvoidCompleteRep = other.AvoidCompleteRep;
          break;
        case MsgOneofCase.AvoidCompleteResp:
          AvoidCompleteResp = other.AvoidCompleteResp;
          break;
        case MsgOneofCase.RangeTeachingReq:
          RangeTeachingReq = other.RangeTeachingReq;
          break;
        case MsgOneofCase.RangeTeachingResp:
          RangeTeachingResp = other.RangeTeachingResp;
          break;
        case MsgOneofCase.RangeTeachingCmpRep:
          RangeTeachingCmpRep = other.RangeTeachingCmpRep;
          break;
        case MsgOneofCase.RangeTeachingCmpResp:
          RangeTeachingCmpResp = other.RangeTeachingCmpResp;
          break;
        case MsgOneofCase.AddressTeachRep:
          AddressTeachRep = other.AddressTeachRep;
          break;
        case MsgOneofCase.AddressTeachResp:
          AddressTeachResp = other.AddressTeachResp;
          break;
        case MsgOneofCase.AlarmResetReq:
          AlarmResetReq = other.AlarmResetReq;
          break;
        case MsgOneofCase.AlarmResetResp:
          AlarmResetResp = other.AlarmResetResp;
          break;
        case MsgOneofCase.AlarmRep:
          AlarmRep = other.AlarmRep;
          break;
        case MsgOneofCase.AlarmResp:
          AlarmResp = other.AlarmResp;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_1_HOST_BASIC_INFO_VERSION_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_1_HOST_BASIC_INFO_VERSION_REP();
            if (msgCase_ == MsgOneofCase.HostBasicInfoRep) {
              subBuilder.MergeFrom(HostBasicInfoRep);
            }
            input.ReadMessage(subBuilder);
            HostBasicInfoRep = subBuilder;
            break;
          }
          case 18: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_2_BASIC_INFO_VERSION_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_2_BASIC_INFO_VERSION_RESPONSE();
            if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) {
              subBuilder.MergeFrom(BasicInfoVersionResp);
            }
            input.ReadMessage(subBuilder);
            BasicInfoVersionResp = subBuilder;
            break;
          }
          case 50: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_6_INITIAL_EVENT_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_6_INITIAL_EVENT_RESPONSE();
            if (msgCase_ == MsgOneofCase.InitialEventResp) {
              subBuilder.MergeFrom(InitialEventResp);
            }
            input.ReadMessage(subBuilder);
            InitialEventResp = subBuilder;
            break;
          }
          case 90: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_11_BASIC_INFO_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_11_BASIC_INFO_REP();
            if (msgCase_ == MsgOneofCase.BasicInfoRep) {
              subBuilder.MergeFrom(BasicInfoRep);
            }
            input.ReadMessage(subBuilder);
            BasicInfoRep = subBuilder;
            break;
          }
          case 106: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_13_TAVELLING_DATA_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_13_TAVELLING_DATA_REP();
            if (msgCase_ == MsgOneofCase.TavellingDataRep) {
              subBuilder.MergeFrom(TavellingDataRep);
            }
            input.ReadMessage(subBuilder);
            TavellingDataRep = subBuilder;
            break;
          }
          case 122: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_15_SECTION_DATA_REP();
            if (msgCase_ == MsgOneofCase.SectionDataRep) {
              subBuilder.MergeFrom(SectionDataRep);
            }
            input.ReadMessage(subBuilder);
            SectionDataRep = subBuilder;
            break;
          }
          case 138: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_17_ADDRESS_DATA_REP();
            if (msgCase_ == MsgOneofCase.AddressDataRep) {
              subBuilder.MergeFrom(AddressDataRep);
            }
            input.ReadMessage(subBuilder);
            AddressDataRep = subBuilder;
            break;
          }
          case 154: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_19_SCALE_DATA_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_19_SCALE_DATA_REP();
            if (msgCase_ == MsgOneofCase.ScaleDataRep) {
              subBuilder.MergeFrom(ScaleDataRep);
            }
            input.ReadMessage(subBuilder);
            ScaleDataRep = subBuilder;
            break;
          }
          case 170: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_21_CONTROL_DATA_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_21_CONTROL_DATA_REP();
            if (msgCase_ == MsgOneofCase.ControlDataRep) {
              subBuilder.MergeFrom(ControlDataRep);
            }
            input.ReadMessage(subBuilder);
            ControlDataRep = subBuilder;
            break;
          }
          case 186: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_23_GUIDE_DATA_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_23_GUIDE_DATA_REP();
            if (msgCase_ == MsgOneofCase.GuideDataRep) {
              subBuilder.MergeFrom(GuideDataRep);
            }
            input.ReadMessage(subBuilder);
            GuideDataRep = subBuilder;
            break;
          }
          case 250: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_31_TRANS_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_31_TRANS_REQUEST();
            if (msgCase_ == MsgOneofCase.TransReq) {
              subBuilder.MergeFrom(TransReq);
            }
            input.ReadMessage(subBuilder);
            TransReq = subBuilder;
            break;
          }
          case 258: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_32_TRANS_COMPLETE_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_32_TRANS_COMPLETE_RESPONSE();
            if (msgCase_ == MsgOneofCase.TranCmpResp) {
              subBuilder.MergeFrom(TranCmpResp);
            }
            input.ReadMessage(subBuilder);
            TranCmpResp = subBuilder;
            break;
          }
          case 266: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST();
            if (msgCase_ == MsgOneofCase.ControlZoneReq) {
              subBuilder.MergeFrom(ControlZoneReq);
            }
            input.ReadMessage(subBuilder);
            ControlZoneReq = subBuilder;
            break;
          }
          case 282: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_35_CARRIER_ID_RENAME_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_35_CARRIER_ID_RENAME_REQUEST();
            if (msgCase_ == MsgOneofCase.CARRIERIDRenameReq) {
              subBuilder.MergeFrom(CARRIERIDRenameReq);
            }
            input.ReadMessage(subBuilder);
            CARRIERIDRenameReq = subBuilder;
            break;
          }
          case 290: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_36_TRANS_EVENT_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_36_TRANS_EVENT_RESPONSE();
            if (msgCase_ == MsgOneofCase.ImpTransEventResp) {
              subBuilder.MergeFrom(ImpTransEventResp);
            }
            input.ReadMessage(subBuilder);
            ImpTransEventResp = subBuilder;
            break;
          }
          case 298: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_37_TRANS_CANCEL_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_37_TRANS_CANCEL_REQUEST();
            if (msgCase_ == MsgOneofCase.TransCancelReq) {
              subBuilder.MergeFrom(TransCancelReq);
            }
            input.ReadMessage(subBuilder);
            TransCancelReq = subBuilder;
            break;
          }
          case 306: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_38_GUIDE_INFO_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_38_GUIDE_INFO_RESPONSE();
            if (msgCase_ == MsgOneofCase.GuideInfoResp) {
              subBuilder.MergeFrom(GuideInfoResp);
            }
            input.ReadMessage(subBuilder);
            GuideInfoResp = subBuilder;
            break;
          }
          case 314: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_39_PAUSE_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_39_PAUSE_REQUEST();
            if (msgCase_ == MsgOneofCase.PauseReq) {
              subBuilder.MergeFrom(PauseReq);
            }
            input.ReadMessage(subBuilder);
            PauseReq = subBuilder;
            break;
          }
          case 330: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_41_MODE_CHANGE_REQ subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_41_MODE_CHANGE_REQ();
            if (msgCase_ == MsgOneofCase.ModeChangeReq) {
              subBuilder.MergeFrom(ModeChangeReq);
            }
            input.ReadMessage(subBuilder);
            ModeChangeReq = subBuilder;
            break;
          }
          case 346: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_43_STATUS_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_43_STATUS_REQUEST();
            if (msgCase_ == MsgOneofCase.StatusReq) {
              subBuilder.MergeFrom(StatusReq);
            }
            input.ReadMessage(subBuilder);
            StatusReq = subBuilder;
            break;
          }
          case 354: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_44_STATUS_CHANGE_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_44_STATUS_CHANGE_RESPONSE();
            if (msgCase_ == MsgOneofCase.StatusChangeResp) {
              subBuilder.MergeFrom(StatusChangeResp);
            }
            input.ReadMessage(subBuilder);
            StatusChangeResp = subBuilder;
            break;
          }
          case 362: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_45_POWER_OPE_REQ subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_45_POWER_OPE_REQ();
            if (msgCase_ == MsgOneofCase.PowerOpeReq) {
              subBuilder.MergeFrom(PowerOpeReq);
            }
            input.ReadMessage(subBuilder);
            PowerOpeReq = subBuilder;
            break;
          }
          case 410: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_51_AVOID_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_51_AVOID_REQUEST();
            if (msgCase_ == MsgOneofCase.AvoidReq) {
              subBuilder.MergeFrom(AvoidReq);
            }
            input.ReadMessage(subBuilder);
            AvoidReq = subBuilder;
            break;
          }
          case 418: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_52_AVOID_COMPLETE_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_52_AVOID_COMPLETE_RESPONSE();
            if (msgCase_ == MsgOneofCase.AvoidCompleteResp) {
              subBuilder.MergeFrom(AvoidCompleteResp);
            }
            input.ReadMessage(subBuilder);
            AvoidCompleteResp = subBuilder;
            break;
          }
          case 490: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_61_INDIVIDUAL_UPLOAD_REQ subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_61_INDIVIDUAL_UPLOAD_REQ();
            if (msgCase_ == MsgOneofCase.IndividualUploadReq) {
              subBuilder.MergeFrom(IndividualUploadReq);
            }
            input.ReadMessage(subBuilder);
            IndividualUploadReq = subBuilder;
            break;
          }
          case 498: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE();
            if (msgCase_ == MsgOneofCase.GUIDEDataUploadResp) {
              subBuilder.MergeFrom(GUIDEDataUploadResp);
            }
            input.ReadMessage(subBuilder);
            GUIDEDataUploadResp = subBuilder;
            break;
          }
          case 506: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_63_INDIVIDUAL_CHANGE_REQ subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_63_INDIVIDUAL_CHANGE_REQ();
            if (msgCase_ == MsgOneofCase.IndividualChangeReq) {
              subBuilder.MergeFrom(IndividualChangeReq);
            }
            input.ReadMessage(subBuilder);
            IndividualChangeReq = subBuilder;
            break;
          }
          case 570: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_71_RANGE_TEACHING_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_71_RANGE_TEACHING_REQUEST();
            if (msgCase_ == MsgOneofCase.RangeTeachingReq) {
              subBuilder.MergeFrom(RangeTeachingReq);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingReq = subBuilder;
            break;
          }
          case 578: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE();
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) {
              subBuilder.MergeFrom(RangeTeachingCmpResp);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingCmpResp = subBuilder;
            break;
          }
          case 594: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_74_ADDRESS_TEACH_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_74_ADDRESS_TEACH_RESPONSE();
            if (msgCase_ == MsgOneofCase.AddressTeachResp) {
              subBuilder.MergeFrom(AddressTeachResp);
            }
            input.ReadMessage(subBuilder);
            AddressTeachResp = subBuilder;
            break;
          }
          case 730: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_91_ALARM_RESET_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_91_ALARM_RESET_REQUEST();
            if (msgCase_ == MsgOneofCase.AlarmResetReq) {
              subBuilder.MergeFrom(AlarmResetReq);
            }
            input.ReadMessage(subBuilder);
            AlarmResetReq = subBuilder;
            break;
          }
          case 754: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_94_ALARM_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_94_ALARM_RESPONSE();
            if (msgCase_ == MsgOneofCase.AlarmResp) {
              subBuilder.MergeFrom(AlarmResp);
            }
            input.ReadMessage(subBuilder);
            AlarmResp = subBuilder;
            break;
          }
          case 810: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE();
            if (msgCase_ == MsgOneofCase.HostBasicInfoResp) {
              subBuilder.MergeFrom(HostBasicInfoResp);
            }
            input.ReadMessage(subBuilder);
            HostBasicInfoResp = subBuilder;
            break;
          }
          case 818: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_102_BASIC_INFO_VERSION_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_102_BASIC_INFO_VERSION_REP();
            if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) {
              subBuilder.MergeFrom(BasicInfoVersionRep);
            }
            input.ReadMessage(subBuilder);
            BasicInfoVersionRep = subBuilder;
            break;
          }
          case 850: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_106_INITIAL_EVENT_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_106_INITIAL_EVENT_REP();
            if (msgCase_ == MsgOneofCase.InitialEventRep) {
              subBuilder.MergeFrom(InitialEventRep);
            }
            input.ReadMessage(subBuilder);
            InitialEventRep = subBuilder;
            break;
          }
          case 890: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_111_BASIC_INFO_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_111_BASIC_INFO_RESPONSE();
            if (msgCase_ == MsgOneofCase.BasicInfoResp) {
              subBuilder.MergeFrom(BasicInfoResp);
            }
            input.ReadMessage(subBuilder);
            BasicInfoResp = subBuilder;
            break;
          }
          case 906: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_113_TAVELLING_DATA_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_113_TAVELLING_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.TavellingDataResp) {
              subBuilder.MergeFrom(TavellingDataResp);
            }
            input.ReadMessage(subBuilder);
            TavellingDataResp = subBuilder;
            break;
          }
          case 922: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_115_SECTION_DATA_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_115_SECTION_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.SectionDataResp) {
              subBuilder.MergeFrom(SectionDataResp);
            }
            input.ReadMessage(subBuilder);
            SectionDataResp = subBuilder;
            break;
          }
          case 938: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_117_ADDRESS_DATA_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_117_ADDRESS_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.AddressDataResp) {
              subBuilder.MergeFrom(AddressDataResp);
            }
            input.ReadMessage(subBuilder);
            AddressDataResp = subBuilder;
            break;
          }
          case 954: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_119_SCALE_DATA_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_119_SCALE_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.ScaleDataResp) {
              subBuilder.MergeFrom(ScaleDataResp);
            }
            input.ReadMessage(subBuilder);
            ScaleDataResp = subBuilder;
            break;
          }
          case 970: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_121_CONTROL_DATA_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_121_CONTROL_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.ControlDataResp) {
              subBuilder.MergeFrom(ControlDataResp);
            }
            input.ReadMessage(subBuilder);
            ControlDataResp = subBuilder;
            break;
          }
          case 986: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_123_GUIDE_DATA_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_123_GUIDE_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.GuideDataResp) {
              subBuilder.MergeFrom(GuideDataResp);
            }
            input.ReadMessage(subBuilder);
            GuideDataResp = subBuilder;
            break;
          }
          case 1050: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_131_TRANS_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_131_TRANS_RESPONSE();
            if (msgCase_ == MsgOneofCase.TransResp) {
              subBuilder.MergeFrom(TransResp);
            }
            input.ReadMessage(subBuilder);
            TransResp = subBuilder;
            break;
          }
          case 1058: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_132_TRANS_COMPLETE_REPORT subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_132_TRANS_COMPLETE_REPORT();
            if (msgCase_ == MsgOneofCase.TranCmpRep) {
              subBuilder.MergeFrom(TranCmpRep);
            }
            input.ReadMessage(subBuilder);
            TranCmpRep = subBuilder;
            break;
          }
          case 1066: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE();
            if (msgCase_ == MsgOneofCase.ControlZoneResp) {
              subBuilder.MergeFrom(ControlZoneResp);
            }
            input.ReadMessage(subBuilder);
            ControlZoneResp = subBuilder;
            break;
          }
          case 1074: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_134_TRANS_EVENT_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_134_TRANS_EVENT_REP();
            if (msgCase_ == MsgOneofCase.TransEventRep) {
              subBuilder.MergeFrom(TransEventRep);
            }
            input.ReadMessage(subBuilder);
            TransEventRep = subBuilder;
            break;
          }
          case 1082: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_135_CARRIER_ID_RENAME_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_135_CARRIER_ID_RENAME_RESPONSE();
            if (msgCase_ == MsgOneofCase.CARRIERIDRenameResp) {
              subBuilder.MergeFrom(CARRIERIDRenameResp);
            }
            input.ReadMessage(subBuilder);
            CARRIERIDRenameResp = subBuilder;
            break;
          }
          case 1090: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_136_TRANS_EVENT_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_136_TRANS_EVENT_REP();
            if (msgCase_ == MsgOneofCase.ImpTransEventRep) {
              subBuilder.MergeFrom(ImpTransEventRep);
            }
            input.ReadMessage(subBuilder);
            ImpTransEventRep = subBuilder;
            break;
          }
          case 1098: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_137_TRANS_CANCEL_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_137_TRANS_CANCEL_RESPONSE();
            if (msgCase_ == MsgOneofCase.TransCancelResp) {
              subBuilder.MergeFrom(TransCancelResp);
            }
            input.ReadMessage(subBuilder);
            TransCancelResp = subBuilder;
            break;
          }
          case 1106: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_138_GUIDE_INFO_REQUEST subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_138_GUIDE_INFO_REQUEST();
            if (msgCase_ == MsgOneofCase.GuideInfoReq) {
              subBuilder.MergeFrom(GuideInfoReq);
            }
            input.ReadMessage(subBuilder);
            GuideInfoReq = subBuilder;
            break;
          }
          case 1114: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_139_PAUSE_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_139_PAUSE_RESPONSE();
            if (msgCase_ == MsgOneofCase.PauseResp) {
              subBuilder.MergeFrom(PauseResp);
            }
            input.ReadMessage(subBuilder);
            PauseResp = subBuilder;
            break;
          }
          case 1130: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_141_MODE_CHANGE_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_141_MODE_CHANGE_RESPONSE();
            if (msgCase_ == MsgOneofCase.ModeChangeResp) {
              subBuilder.MergeFrom(ModeChangeResp);
            }
            input.ReadMessage(subBuilder);
            ModeChangeResp = subBuilder;
            break;
          }
          case 1146: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_143_STATUS_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_143_STATUS_RESPONSE();
            if (msgCase_ == MsgOneofCase.StatusReqResp) {
              subBuilder.MergeFrom(StatusReqResp);
            }
            input.ReadMessage(subBuilder);
            StatusReqResp = subBuilder;
            break;
          }
          case 1154: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_144_STATUS_CHANGE_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_144_STATUS_CHANGE_REP();
            if (msgCase_ == MsgOneofCase.StatueChangeRep) {
              subBuilder.MergeFrom(StatueChangeRep);
            }
            input.ReadMessage(subBuilder);
            StatueChangeRep = subBuilder;
            break;
          }
          case 1162: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_145_POWER_OPE_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_145_POWER_OPE_RESPONSE();
            if (msgCase_ == MsgOneofCase.PowerOpeResp) {
              subBuilder.MergeFrom(PowerOpeResp);
            }
            input.ReadMessage(subBuilder);
            PowerOpeResp = subBuilder;
            break;
          }
          case 1210: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_151_AVOID_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_151_AVOID_RESPONSE();
            if (msgCase_ == MsgOneofCase.AvoidResp) {
              subBuilder.MergeFrom(AvoidResp);
            }
            input.ReadMessage(subBuilder);
            AvoidResp = subBuilder;
            break;
          }
          case 1218: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_152_AVOID_COMPLETE_REPORT subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_152_AVOID_COMPLETE_REPORT();
            if (msgCase_ == MsgOneofCase.AvoidCompleteRep) {
              subBuilder.MergeFrom(AvoidCompleteRep);
            }
            input.ReadMessage(subBuilder);
            AvoidCompleteRep = subBuilder;
            break;
          }
          case 1290: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE();
            if (msgCase_ == MsgOneofCase.IndividualUploadResp) {
              subBuilder.MergeFrom(IndividualUploadResp);
            }
            input.ReadMessage(subBuilder);
            IndividualUploadResp = subBuilder;
            break;
          }
          case 1298: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_162_GUIDE_DATA_UPLOAD_REP subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_162_GUIDE_DATA_UPLOAD_REP();
            if (msgCase_ == MsgOneofCase.GUIDEDataUploadReq) {
              subBuilder.MergeFrom(GUIDEDataUploadReq);
            }
            input.ReadMessage(subBuilder);
            GUIDEDataUploadReq = subBuilder;
            break;
          }
          case 1306: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE();
            if (msgCase_ == MsgOneofCase.IndividualChangeResp) {
              subBuilder.MergeFrom(IndividualChangeResp);
            }
            input.ReadMessage(subBuilder);
            IndividualChangeResp = subBuilder;
            break;
          }
          case 1370: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_171_RANGE_TEACHING_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_171_RANGE_TEACHING_RESPONSE();
            if (msgCase_ == MsgOneofCase.RangeTeachingResp) {
              subBuilder.MergeFrom(RangeTeachingResp);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingResp = subBuilder;
            break;
          }
          case 1378: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT();
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) {
              subBuilder.MergeFrom(RangeTeachingCmpRep);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingCmpRep = subBuilder;
            break;
          }
          case 1394: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_174_ADDRESS_TEACH_REPORT subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_174_ADDRESS_TEACH_REPORT();
            if (msgCase_ == MsgOneofCase.AddressTeachRep) {
              subBuilder.MergeFrom(AddressTeachRep);
            }
            input.ReadMessage(subBuilder);
            AddressTeachRep = subBuilder;
            break;
          }
          case 1530: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_191_ALARM_RESET_RESPONSE subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_191_ALARM_RESET_RESPONSE();
            if (msgCase_ == MsgOneofCase.AlarmResetResp) {
              subBuilder.MergeFrom(AlarmResetResp);
            }
            input.ReadMessage(subBuilder);
            AlarmResetResp = subBuilder;
            break;
          }
          case 1554: {
            global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_194_ALARM_REPORT subBuilder = new global::com.mirle.AKA.ProtocolFormat.RGVMessage.ID_194_ALARM_REPORT();
            if (msgCase_ == MsgOneofCase.AlarmRep) {
              subBuilder.MergeFrom(AlarmRep);
            }
            input.ReadMessage(subBuilder);
            AlarmRep = subBuilder;
            break;
          }
          case 8000: {
            ID = input.ReadInt32();
            break;
          }
          case 8008: {
            SeqNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SYSTEMPROCESS_INFO : pb::IMessage<SYSTEMPROCESS_INFO> {
    private static readonly pb::MessageParser<SYSTEMPROCESS_INFO> _parser = new pb::MessageParser<SYSTEMPROCESS_INFO>(() => new SYSTEMPROCESS_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SYSTEMPROCESS_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEMPROCESS_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEMPROCESS_INFO(SYSTEMPROCESS_INFO other) : this() {
      tIME_ = other.tIME_;
      sEQ_ = other.sEQ_;
      lOGLEVEL_ = other.lOGLEVEL_;
      cLASS_ = other.cLASS_;
      mETHOD_ = other.mETHOD_;
      dEVICE_ = other.dEVICE_;
      dATA_ = other.dATA_;
      vHID_ = other.vHID_;
      cRRID_ = other.cRRID_;
      tYPE_ = other.tYPE_;
      lOGID_ = other.lOGID_;
      tHREADID_ = other.tHREADID_;
      lOT_ = other.lOT_;
      lEVEL_ = other.lEVEL_;
      xID_ = other.xID_;
      tRXID_ = other.tRXID_;
      dETAILS_ = other.dETAILS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEMPROCESS_INFO Clone() {
      return new SYSTEMPROCESS_INFO(this);
    }

    /// <summary>Field number for the "TIME" field.</summary>
    public const int TIMEFieldNumber = 1;
    private string tIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TIME {
      get { return tIME_; }
      set {
        tIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEQ" field.</summary>
    public const int SEQFieldNumber = 2;
    private ulong sEQ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SEQ {
      get { return sEQ_; }
      set {
        sEQ_ = value;
      }
    }

    /// <summary>Field number for the "LOG_LEVEL" field.</summary>
    public const int LOGLEVELFieldNumber = 3;
    private string lOGLEVEL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOGLEVEL {
      get { return lOGLEVEL_; }
      set {
        lOGLEVEL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CLASS" field.</summary>
    public const int CLASSFieldNumber = 4;
    private string cLASS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CLASS {
      get { return cLASS_; }
      set {
        cLASS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "METHOD" field.</summary>
    public const int METHODFieldNumber = 5;
    private string mETHOD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string METHOD {
      get { return mETHOD_; }
      set {
        mETHOD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DEVICE" field.</summary>
    public const int DEVICEFieldNumber = 6;
    private string dEVICE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DEVICE {
      get { return dEVICE_; }
      set {
        dEVICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DATA" field.</summary>
    public const int DATAFieldNumber = 7;
    private string dATA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DATA {
      get { return dATA_; }
      set {
        dATA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VH_ID" field.</summary>
    public const int VHIDFieldNumber = 8;
    private string vHID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VHID {
      get { return vHID_; }
      set {
        vHID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CRR_ID" field.</summary>
    public const int CRRIDFieldNumber = 9;
    private string cRRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CRRID {
      get { return cRRID_; }
      set {
        cRRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TYPE" field.</summary>
    public const int TYPEFieldNumber = 10;
    private string tYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TYPE {
      get { return tYPE_; }
      set {
        tYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOG_ID" field.</summary>
    public const int LOGIDFieldNumber = 11;
    private string lOGID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOGID {
      get { return lOGID_; }
      set {
        lOGID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "THREAD_ID" field.</summary>
    public const int THREADIDFieldNumber = 12;
    private string tHREADID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string THREADID {
      get { return tHREADID_; }
      set {
        tHREADID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT" field.</summary>
    public const int LOTFieldNumber = 13;
    private string lOT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOT {
      get { return lOT_; }
      set {
        lOT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LEVEL" field.</summary>
    public const int LEVELFieldNumber = 14;
    private string lEVEL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LEVEL {
      get { return lEVEL_; }
      set {
        lEVEL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "XID" field.</summary>
    public const int XIDFieldNumber = 15;
    private string xID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XID {
      get { return xID_; }
      set {
        xID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRX_ID" field.</summary>
    public const int TRXIDFieldNumber = 16;
    private string tRXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRXID {
      get { return tRXID_; }
      set {
        tRXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DETAILS" field.</summary>
    public const int DETAILSFieldNumber = 17;
    private string dETAILS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DETAILS {
      get { return dETAILS_; }
      set {
        dETAILS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SYSTEMPROCESS_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SYSTEMPROCESS_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TIME != other.TIME) return false;
      if (SEQ != other.SEQ) return false;
      if (LOGLEVEL != other.LOGLEVEL) return false;
      if (CLASS != other.CLASS) return false;
      if (METHOD != other.METHOD) return false;
      if (DEVICE != other.DEVICE) return false;
      if (DATA != other.DATA) return false;
      if (VHID != other.VHID) return false;
      if (CRRID != other.CRRID) return false;
      if (TYPE != other.TYPE) return false;
      if (LOGID != other.LOGID) return false;
      if (THREADID != other.THREADID) return false;
      if (LOT != other.LOT) return false;
      if (LEVEL != other.LEVEL) return false;
      if (XID != other.XID) return false;
      if (TRXID != other.TRXID) return false;
      if (DETAILS != other.DETAILS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TIME.Length != 0) hash ^= TIME.GetHashCode();
      if (SEQ != 0UL) hash ^= SEQ.GetHashCode();
      if (LOGLEVEL.Length != 0) hash ^= LOGLEVEL.GetHashCode();
      if (CLASS.Length != 0) hash ^= CLASS.GetHashCode();
      if (METHOD.Length != 0) hash ^= METHOD.GetHashCode();
      if (DEVICE.Length != 0) hash ^= DEVICE.GetHashCode();
      if (DATA.Length != 0) hash ^= DATA.GetHashCode();
      if (VHID.Length != 0) hash ^= VHID.GetHashCode();
      if (CRRID.Length != 0) hash ^= CRRID.GetHashCode();
      if (TYPE.Length != 0) hash ^= TYPE.GetHashCode();
      if (LOGID.Length != 0) hash ^= LOGID.GetHashCode();
      if (THREADID.Length != 0) hash ^= THREADID.GetHashCode();
      if (LOT.Length != 0) hash ^= LOT.GetHashCode();
      if (LEVEL.Length != 0) hash ^= LEVEL.GetHashCode();
      if (XID.Length != 0) hash ^= XID.GetHashCode();
      if (TRXID.Length != 0) hash ^= TRXID.GetHashCode();
      if (DETAILS.Length != 0) hash ^= DETAILS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TIME.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TIME);
      }
      if (SEQ != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SEQ);
      }
      if (LOGLEVEL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LOGLEVEL);
      }
      if (CLASS.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CLASS);
      }
      if (METHOD.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(METHOD);
      }
      if (DEVICE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DEVICE);
      }
      if (DATA.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DATA);
      }
      if (VHID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VHID);
      }
      if (CRRID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CRRID);
      }
      if (TYPE.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TYPE);
      }
      if (LOGID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LOGID);
      }
      if (THREADID.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(THREADID);
      }
      if (LOT.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LOT);
      }
      if (LEVEL.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(LEVEL);
      }
      if (XID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(XID);
      }
      if (TRXID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(TRXID);
      }
      if (DETAILS.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(DETAILS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TIME);
      }
      if (SEQ != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SEQ);
      }
      if (LOGLEVEL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOGLEVEL);
      }
      if (CLASS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CLASS);
      }
      if (METHOD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(METHOD);
      }
      if (DEVICE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DEVICE);
      }
      if (DATA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DATA);
      }
      if (VHID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VHID);
      }
      if (CRRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CRRID);
      }
      if (TYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TYPE);
      }
      if (LOGID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOGID);
      }
      if (THREADID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(THREADID);
      }
      if (LOT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOT);
      }
      if (LEVEL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LEVEL);
      }
      if (XID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XID);
      }
      if (TRXID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TRXID);
      }
      if (DETAILS.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DETAILS);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SYSTEMPROCESS_INFO other) {
      if (other == null) {
        return;
      }
      if (other.TIME.Length != 0) {
        TIME = other.TIME;
      }
      if (other.SEQ != 0UL) {
        SEQ = other.SEQ;
      }
      if (other.LOGLEVEL.Length != 0) {
        LOGLEVEL = other.LOGLEVEL;
      }
      if (other.CLASS.Length != 0) {
        CLASS = other.CLASS;
      }
      if (other.METHOD.Length != 0) {
        METHOD = other.METHOD;
      }
      if (other.DEVICE.Length != 0) {
        DEVICE = other.DEVICE;
      }
      if (other.DATA.Length != 0) {
        DATA = other.DATA;
      }
      if (other.VHID.Length != 0) {
        VHID = other.VHID;
      }
      if (other.CRRID.Length != 0) {
        CRRID = other.CRRID;
      }
      if (other.TYPE.Length != 0) {
        TYPE = other.TYPE;
      }
      if (other.LOGID.Length != 0) {
        LOGID = other.LOGID;
      }
      if (other.THREADID.Length != 0) {
        THREADID = other.THREADID;
      }
      if (other.LOT.Length != 0) {
        LOT = other.LOT;
      }
      if (other.LEVEL.Length != 0) {
        LEVEL = other.LEVEL;
      }
      if (other.XID.Length != 0) {
        XID = other.XID;
      }
      if (other.TRXID.Length != 0) {
        TRXID = other.TRXID;
      }
      if (other.DETAILS.Length != 0) {
        DETAILS = other.DETAILS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TIME = input.ReadString();
            break;
          }
          case 16: {
            SEQ = input.ReadUInt64();
            break;
          }
          case 26: {
            LOGLEVEL = input.ReadString();
            break;
          }
          case 34: {
            CLASS = input.ReadString();
            break;
          }
          case 42: {
            METHOD = input.ReadString();
            break;
          }
          case 50: {
            DEVICE = input.ReadString();
            break;
          }
          case 58: {
            DATA = input.ReadString();
            break;
          }
          case 66: {
            VHID = input.ReadString();
            break;
          }
          case 74: {
            CRRID = input.ReadString();
            break;
          }
          case 82: {
            TYPE = input.ReadString();
            break;
          }
          case 90: {
            LOGID = input.ReadString();
            break;
          }
          case 98: {
            THREADID = input.ReadString();
            break;
          }
          case 106: {
            LOT = input.ReadString();
            break;
          }
          case 114: {
            LEVEL = input.ReadString();
            break;
          }
          case 122: {
            XID = input.ReadString();
            break;
          }
          case 130: {
            TRXID = input.ReadString();
            break;
          }
          case 138: {
            DETAILS = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HOSTLOG_INFO : pb::IMessage<HOSTLOG_INFO> {
    private static readonly pb::MessageParser<HOSTLOG_INFO> _parser = new pb::MessageParser<HOSTLOG_INFO>(() => new HOSTLOG_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HOSTLOG_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HOSTLOG_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HOSTLOG_INFO(HOSTLOG_INFO other) : this() {
      tIME_ = other.tIME_;
      eQID_ = other.eQID_;
      sENDRECEIVE_ = other.sENDRECEIVE_;
      sX_ = other.sX_;
      fY_ = other.fY_;
      dEVICE_ = other.dEVICE_;
      fUNNAME_ = other.fUNNAME_;
      mESSAGE_ = other.mESSAGE_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HOSTLOG_INFO Clone() {
      return new HOSTLOG_INFO(this);
    }

    /// <summary>Field number for the "TIME" field.</summary>
    public const int TIMEFieldNumber = 1;
    private string tIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TIME {
      get { return tIME_; }
      set {
        tIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQ_ID" field.</summary>
    public const int EQIDFieldNumber = 2;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEND_RECEIVE" field.</summary>
    public const int SENDRECEIVEFieldNumber = 3;
    private string sENDRECEIVE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SENDRECEIVE {
      get { return sENDRECEIVE_; }
      set {
        sENDRECEIVE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SX" field.</summary>
    public const int SXFieldNumber = 4;
    private string sX_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SX {
      get { return sX_; }
      set {
        sX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FY" field.</summary>
    public const int FYFieldNumber = 5;
    private string fY_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FY {
      get { return fY_; }
      set {
        fY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DEVICE" field.</summary>
    public const int DEVICEFieldNumber = 6;
    private string dEVICE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DEVICE {
      get { return dEVICE_; }
      set {
        dEVICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUN_NAME" field.</summary>
    public const int FUNNAMEFieldNumber = 7;
    private string fUNNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNNAME {
      get { return fUNNAME_; }
      set {
        fUNNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MESSAGE" field.</summary>
    public const int MESSAGEFieldNumber = 8;
    private string mESSAGE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MESSAGE {
      get { return mESSAGE_; }
      set {
        mESSAGE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HOSTLOG_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HOSTLOG_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TIME != other.TIME) return false;
      if (EQID != other.EQID) return false;
      if (SENDRECEIVE != other.SENDRECEIVE) return false;
      if (SX != other.SX) return false;
      if (FY != other.FY) return false;
      if (DEVICE != other.DEVICE) return false;
      if (FUNNAME != other.FUNNAME) return false;
      if (MESSAGE != other.MESSAGE) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TIME.Length != 0) hash ^= TIME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (SENDRECEIVE.Length != 0) hash ^= SENDRECEIVE.GetHashCode();
      if (SX.Length != 0) hash ^= SX.GetHashCode();
      if (FY.Length != 0) hash ^= FY.GetHashCode();
      if (DEVICE.Length != 0) hash ^= DEVICE.GetHashCode();
      if (FUNNAME.Length != 0) hash ^= FUNNAME.GetHashCode();
      if (MESSAGE.Length != 0) hash ^= MESSAGE.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TIME.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TIME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EQID);
      }
      if (SENDRECEIVE.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SENDRECEIVE);
      }
      if (SX.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SX);
      }
      if (FY.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FY);
      }
      if (DEVICE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DEVICE);
      }
      if (FUNNAME.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FUNNAME);
      }
      if (MESSAGE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MESSAGE);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TIME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (SENDRECEIVE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SENDRECEIVE);
      }
      if (SX.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SX);
      }
      if (FY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FY);
      }
      if (DEVICE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DEVICE);
      }
      if (FUNNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNNAME);
      }
      if (MESSAGE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MESSAGE);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HOSTLOG_INFO other) {
      if (other == null) {
        return;
      }
      if (other.TIME.Length != 0) {
        TIME = other.TIME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.SENDRECEIVE.Length != 0) {
        SENDRECEIVE = other.SENDRECEIVE;
      }
      if (other.SX.Length != 0) {
        SX = other.SX;
      }
      if (other.FY.Length != 0) {
        FY = other.FY;
      }
      if (other.DEVICE.Length != 0) {
        DEVICE = other.DEVICE;
      }
      if (other.FUNNAME.Length != 0) {
        FUNNAME = other.FUNNAME;
      }
      if (other.MESSAGE.Length != 0) {
        MESSAGE = other.MESSAGE;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TIME = input.ReadString();
            break;
          }
          case 18: {
            EQID = input.ReadString();
            break;
          }
          case 26: {
            SENDRECEIVE = input.ReadString();
            break;
          }
          case 34: {
            SX = input.ReadString();
            break;
          }
          case 42: {
            FY = input.ReadString();
            break;
          }
          case 50: {
            DEVICE = input.ReadString();
            break;
          }
          case 58: {
            FUNNAME = input.ReadString();
            break;
          }
          case 66: {
            MESSAGE = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EQLOG_INFO : pb::IMessage<EQLOG_INFO> {
    private static readonly pb::MessageParser<EQLOG_INFO> _parser = new pb::MessageParser<EQLOG_INFO>(() => new EQLOG_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EQLOG_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.AKA.ProtocolFormat.RGVMessage.RgvmessageReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EQLOG_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EQLOG_INFO(EQLOG_INFO other) : this() {
      tIME_ = other.tIME_;
      sENDRECEIVE_ = other.sENDRECEIVE_;
      fUNNAME_ = other.fUNNAME_;
      sEQNO_ = other.sEQNO_;
      vHID_ = other.vHID_;
      oHTCCMDID_ = other.oHTCCMDID_;
      aCTTYPE_ = other.aCTTYPE_;
      mCSCMDID_ = other.mCSCMDID_;
      eVENTTYPE_ = other.eVENTTYPE_;
      vHSTATUS_ = other.vHSTATUS_;
      mESSAGE_ = other.mESSAGE_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EQLOG_INFO Clone() {
      return new EQLOG_INFO(this);
    }

    /// <summary>Field number for the "TIME" field.</summary>
    public const int TIMEFieldNumber = 1;
    private string tIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TIME {
      get { return tIME_; }
      set {
        tIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEND_RECEIVE" field.</summary>
    public const int SENDRECEIVEFieldNumber = 2;
    private string sENDRECEIVE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SENDRECEIVE {
      get { return sENDRECEIVE_; }
      set {
        sENDRECEIVE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUN_NAME" field.</summary>
    public const int FUNNAMEFieldNumber = 3;
    private string fUNNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNNAME {
      get { return fUNNAME_; }
      set {
        fUNNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEQ_NO" field.</summary>
    public const int SEQNOFieldNumber = 4;
    private int sEQNO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SEQNO {
      get { return sEQNO_; }
      set {
        sEQNO_ = value;
      }
    }

    /// <summary>Field number for the "VH_ID" field.</summary>
    public const int VHIDFieldNumber = 5;
    private string vHID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VHID {
      get { return vHID_; }
      set {
        vHID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OHTC_CMD_ID" field.</summary>
    public const int OHTCCMDIDFieldNumber = 6;
    private string oHTCCMDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OHTCCMDID {
      get { return oHTCCMDID_; }
      set {
        oHTCCMDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ACT_TYPE" field.</summary>
    public const int ACTTYPEFieldNumber = 7;
    private string aCTTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ACTTYPE {
      get { return aCTTYPE_; }
      set {
        aCTTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MCS_CMD_ID" field.</summary>
    public const int MCSCMDIDFieldNumber = 8;
    private string mCSCMDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MCSCMDID {
      get { return mCSCMDID_; }
      set {
        mCSCMDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EVENT_TYPE" field.</summary>
    public const int EVENTTYPEFieldNumber = 9;
    private string eVENTTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EVENTTYPE {
      get { return eVENTTYPE_; }
      set {
        eVENTTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VH_STATUS" field.</summary>
    public const int VHSTATUSFieldNumber = 10;
    private string vHSTATUS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VHSTATUS {
      get { return vHSTATUS_; }
      set {
        vHSTATUS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MESSAGE" field.</summary>
    public const int MESSAGEFieldNumber = 11;
    private string mESSAGE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MESSAGE {
      get { return mESSAGE_; }
      set {
        mESSAGE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EQLOG_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EQLOG_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TIME != other.TIME) return false;
      if (SENDRECEIVE != other.SENDRECEIVE) return false;
      if (FUNNAME != other.FUNNAME) return false;
      if (SEQNO != other.SEQNO) return false;
      if (VHID != other.VHID) return false;
      if (OHTCCMDID != other.OHTCCMDID) return false;
      if (ACTTYPE != other.ACTTYPE) return false;
      if (MCSCMDID != other.MCSCMDID) return false;
      if (EVENTTYPE != other.EVENTTYPE) return false;
      if (VHSTATUS != other.VHSTATUS) return false;
      if (MESSAGE != other.MESSAGE) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TIME.Length != 0) hash ^= TIME.GetHashCode();
      if (SENDRECEIVE.Length != 0) hash ^= SENDRECEIVE.GetHashCode();
      if (FUNNAME.Length != 0) hash ^= FUNNAME.GetHashCode();
      if (SEQNO != 0) hash ^= SEQNO.GetHashCode();
      if (VHID.Length != 0) hash ^= VHID.GetHashCode();
      if (OHTCCMDID.Length != 0) hash ^= OHTCCMDID.GetHashCode();
      if (ACTTYPE.Length != 0) hash ^= ACTTYPE.GetHashCode();
      if (MCSCMDID.Length != 0) hash ^= MCSCMDID.GetHashCode();
      if (EVENTTYPE.Length != 0) hash ^= EVENTTYPE.GetHashCode();
      if (VHSTATUS.Length != 0) hash ^= VHSTATUS.GetHashCode();
      if (MESSAGE.Length != 0) hash ^= MESSAGE.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TIME.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TIME);
      }
      if (SENDRECEIVE.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SENDRECEIVE);
      }
      if (FUNNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNNAME);
      }
      if (SEQNO != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SEQNO);
      }
      if (VHID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VHID);
      }
      if (OHTCCMDID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OHTCCMDID);
      }
      if (ACTTYPE.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ACTTYPE);
      }
      if (MCSCMDID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MCSCMDID);
      }
      if (EVENTTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(EVENTTYPE);
      }
      if (VHSTATUS.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(VHSTATUS);
      }
      if (MESSAGE.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MESSAGE);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TIME);
      }
      if (SENDRECEIVE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SENDRECEIVE);
      }
      if (FUNNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNNAME);
      }
      if (SEQNO != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SEQNO);
      }
      if (VHID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VHID);
      }
      if (OHTCCMDID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OHTCCMDID);
      }
      if (ACTTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ACTTYPE);
      }
      if (MCSCMDID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MCSCMDID);
      }
      if (EVENTTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EVENTTYPE);
      }
      if (VHSTATUS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VHSTATUS);
      }
      if (MESSAGE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MESSAGE);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EQLOG_INFO other) {
      if (other == null) {
        return;
      }
      if (other.TIME.Length != 0) {
        TIME = other.TIME;
      }
      if (other.SENDRECEIVE.Length != 0) {
        SENDRECEIVE = other.SENDRECEIVE;
      }
      if (other.FUNNAME.Length != 0) {
        FUNNAME = other.FUNNAME;
      }
      if (other.SEQNO != 0) {
        SEQNO = other.SEQNO;
      }
      if (other.VHID.Length != 0) {
        VHID = other.VHID;
      }
      if (other.OHTCCMDID.Length != 0) {
        OHTCCMDID = other.OHTCCMDID;
      }
      if (other.ACTTYPE.Length != 0) {
        ACTTYPE = other.ACTTYPE;
      }
      if (other.MCSCMDID.Length != 0) {
        MCSCMDID = other.MCSCMDID;
      }
      if (other.EVENTTYPE.Length != 0) {
        EVENTTYPE = other.EVENTTYPE;
      }
      if (other.VHSTATUS.Length != 0) {
        VHSTATUS = other.VHSTATUS;
      }
      if (other.MESSAGE.Length != 0) {
        MESSAGE = other.MESSAGE;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TIME = input.ReadString();
            break;
          }
          case 18: {
            SENDRECEIVE = input.ReadString();
            break;
          }
          case 26: {
            FUNNAME = input.ReadString();
            break;
          }
          case 32: {
            SEQNO = input.ReadInt32();
            break;
          }
          case 42: {
            VHID = input.ReadString();
            break;
          }
          case 50: {
            OHTCCMDID = input.ReadString();
            break;
          }
          case 58: {
            ACTTYPE = input.ReadString();
            break;
          }
          case 66: {
            MCSCMDID = input.ReadString();
            break;
          }
          case 74: {
            EVENTTYPE = input.ReadString();
            break;
          }
          case 82: {
            VHSTATUS = input.ReadString();
            break;
          }
          case 90: {
            MESSAGE = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
