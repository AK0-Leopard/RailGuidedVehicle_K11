// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PortInfo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.mirle.ibg3k0.sc.ProtocolFormat.SystemClass.PortInfo {

  /// <summary>Holder for reflection information generated from PortInfo.proto</summary>
  public static partial class PortInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for PortInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PortInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Qb3J0SW5mby5wcm90bxIIdHV0b3JpYWwiKwoJVGltZXN0YW1wEg8KB3Nl",
            "Y29uZHMYASABKAMSDQoFbmFub3MYAiABKAUi0QUKCVBPUlRfSU5GTxIRCglU",
            "aW1lc3RhbXAYASABKAkSEgoKT3BBdXRvTW9kZRgCIAEoCBIUCgxPcE1hbnVh",
            "bE1vZGUYAyABKAgSDwoHT3BFcnJvchgEIAEoCBITCgtJc0lucHV0TW9kZRgF",
            "IAEoCBIUCgxJc091dHB1dE1vZGUYBiABKAgSFwoPSXNNb2RlQ2hhbmdhYmxl",
            "GAcgASgIEhEKCUlzQUdWTW9kZRgIIAEoCBIRCglJc01HVk1vZGUYCSABKAgS",
            "EgoKUG9ydFdhaXRJbhgKIAEoCBITCgtQb3J0V2FpdE91dBgLIAEoCBISCgpJ",
            "c0F1dG9Nb2RlGAwgASgIEhUKDUlzUmVhZHlUb0xvYWQYDSABKAgSFwoPSXNS",
            "ZWFkeVRvVW5sb2FkGA4gASgIEhUKDUxvYWRQb3NpdGlvbjEYDyABKAgSFQoN",
            "TG9hZFBvc2l0aW9uMhgQIAEoCBIVCg1Mb2FkUG9zaXRpb24zGBEgASgIEhUK",
            "DUxvYWRQb3NpdGlvbjQYEiABKAgSFQoNTG9hZFBvc2l0aW9uNRgTIAEoCBIV",
            "Cg1Mb2FkUG9zaXRpb243GBQgASgIEhUKDUxvYWRQb3NpdGlvbjYYFSABKAgS",
            "FQoNSXNDU1RQcmVzZW5jZRgWIAEoCBIUCgxBR1ZQb3J0UmVhZHkYFyABKAgS",
            "EgoKQ2FuT3BlbkJveBgYIAEoCBIRCglJc0JveE9wZW4YGSABKAgSEwoLQkNS",
            "UmVhZERvbmUYGiABKAgSGwoTQ1NUUHJlc2VuY2VNaXNtYXRjaBgbIAEoCBIa",
            "ChJJc1RyYW5zZmVyQ29tcGxldGUYHCABKAgSFgoOQ3N0UmVtb3ZlQ2hlY2sY",
            "HSABKAgSEQoJRXJyb3JDb2RlGB4gASgFEg0KBUJveElEGB8gASgJEhIKCkNh",
            "c3NldHRlSUQYICABKAkSDgoGUG9ydElEGCEgASgJQpsBChRjb20uZXhhbXBs",
            "ZS50dXRvcmlhbEIRQWRkcmVzc0Jvb2tQcm90b3NQAVorZ2l0aHViLmNvbS9n",
            "b2xhbmcvcHJvdG9idWYvcHR5cGVzL3RpbWVzdGFtcPgBAaICA0dQQqoCN2Nv",
            "bS5taXJsZS5pYmczazAuc2MuUHJvdG9jb2xGb3JtYXQuU3lzdGVtQ2xhc3Mu",
            "UG9ydEluZm9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.SystemClass.PortInfo.Timestamp), global::com.mirle.ibg3k0.sc.ProtocolFormat.SystemClass.PortInfo.Timestamp.Parser, new[]{ "Seconds", "Nanos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.SystemClass.PortInfo.PORT_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.SystemClass.PortInfo.PORT_INFO.Parser, new[]{ "Timestamp", "OpAutoMode", "OpManualMode", "OpError", "IsInputMode", "IsOutputMode", "IsModeChangable", "IsAGVMode", "IsMGVMode", "PortWaitIn", "PortWaitOut", "IsAutoMode", "IsReadyToLoad", "IsReadyToUnload", "LoadPosition1", "LoadPosition2", "LoadPosition3", "LoadPosition4", "LoadPosition5", "LoadPosition7", "LoadPosition6", "IsCSTPresence", "AGVPortReady", "CanOpenBox", "IsBoxOpen", "BCRReadDone", "CSTPresenceMismatch", "IsTransferComplete", "CstRemoveCheck", "ErrorCode", "BoxID", "CassetteID", "PortID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  [START messages]
  /// </summary>
  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.SystemClass.PortInfo.PortInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      seconds_ = other.seconds_;
      nanos_ = other.nanos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 1;
    private long seconds_;
    /// <summary>
    ///  Represents seconds of UTC time since Unix epoch
    ///  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    ///  9999-12-31T23:59:59Z inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    /// <summary>
    ///  Non-negative fractions of a second at nanosecond resolution. Negative
    ///  second values with fractions must still have non-negative nanos values
    ///  that count forward in time. Must be from 0 to 999,999,999
    ///  inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seconds != other.Seconds) return false;
      if (Nanos != other.Nanos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Seconds);
      }
      if (Nanos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nanos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Nanos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nanos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seconds = input.ReadInt64();
            break;
          }
          case 16: {
            Nanos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PORT_INFO : pb::IMessage<PORT_INFO> {
    private static readonly pb::MessageParser<PORT_INFO> _parser = new pb::MessageParser<PORT_INFO>(() => new PORT_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PORT_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.SystemClass.PortInfo.PortInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PORT_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PORT_INFO(PORT_INFO other) : this() {
      timestamp_ = other.timestamp_;
      opAutoMode_ = other.opAutoMode_;
      opManualMode_ = other.opManualMode_;
      opError_ = other.opError_;
      isInputMode_ = other.isInputMode_;
      isOutputMode_ = other.isOutputMode_;
      isModeChangable_ = other.isModeChangable_;
      isAGVMode_ = other.isAGVMode_;
      isMGVMode_ = other.isMGVMode_;
      portWaitIn_ = other.portWaitIn_;
      portWaitOut_ = other.portWaitOut_;
      isAutoMode_ = other.isAutoMode_;
      isReadyToLoad_ = other.isReadyToLoad_;
      isReadyToUnload_ = other.isReadyToUnload_;
      loadPosition1_ = other.loadPosition1_;
      loadPosition2_ = other.loadPosition2_;
      loadPosition3_ = other.loadPosition3_;
      loadPosition4_ = other.loadPosition4_;
      loadPosition5_ = other.loadPosition5_;
      loadPosition7_ = other.loadPosition7_;
      loadPosition6_ = other.loadPosition6_;
      isCSTPresence_ = other.isCSTPresence_;
      aGVPortReady_ = other.aGVPortReady_;
      canOpenBox_ = other.canOpenBox_;
      isBoxOpen_ = other.isBoxOpen_;
      bCRReadDone_ = other.bCRReadDone_;
      cSTPresenceMismatch_ = other.cSTPresenceMismatch_;
      isTransferComplete_ = other.isTransferComplete_;
      cstRemoveCheck_ = other.cstRemoveCheck_;
      errorCode_ = other.errorCode_;
      boxID_ = other.boxID_;
      cassetteID_ = other.cassetteID_;
      portID_ = other.portID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PORT_INFO Clone() {
      return new PORT_INFO(this);
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpAutoMode" field.</summary>
    public const int OpAutoModeFieldNumber = 2;
    private bool opAutoMode_;
    /// <summary>
    /// D6401.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpAutoMode {
      get { return opAutoMode_; }
      set {
        opAutoMode_ = value;
      }
    }

    /// <summary>Field number for the "OpManualMode" field.</summary>
    public const int OpManualModeFieldNumber = 3;
    private bool opManualMode_;
    /// <summary>
    /// D6401.1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpManualMode {
      get { return opManualMode_; }
      set {
        opManualMode_ = value;
      }
    }

    /// <summary>Field number for the "OpError" field.</summary>
    public const int OpErrorFieldNumber = 4;
    private bool opError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpError {
      get { return opError_; }
      set {
        opError_ = value;
      }
    }

    /// <summary>Field number for the "IsInputMode" field.</summary>
    public const int IsInputModeFieldNumber = 5;
    private bool isInputMode_;
    /// <summary>
    /// D6401.3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInputMode {
      get { return isInputMode_; }
      set {
        isInputMode_ = value;
      }
    }

    /// <summary>Field number for the "IsOutputMode" field.</summary>
    public const int IsOutputModeFieldNumber = 6;
    private bool isOutputMode_;
    /// <summary>
    /// D6401.4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOutputMode {
      get { return isOutputMode_; }
      set {
        isOutputMode_ = value;
      }
    }

    /// <summary>Field number for the "IsModeChangable" field.</summary>
    public const int IsModeChangableFieldNumber = 7;
    private bool isModeChangable_;
    /// <summary>
    /// D6401.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsModeChangable {
      get { return isModeChangable_; }
      set {
        isModeChangable_ = value;
      }
    }

    /// <summary>Field number for the "IsAGVMode" field.</summary>
    public const int IsAGVModeFieldNumber = 8;
    private bool isAGVMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAGVMode {
      get { return isAGVMode_; }
      set {
        isAGVMode_ = value;
      }
    }

    /// <summary>Field number for the "IsMGVMode" field.</summary>
    public const int IsMGVModeFieldNumber = 9;
    private bool isMGVMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMGVMode {
      get { return isMGVMode_; }
      set {
        isMGVMode_ = value;
      }
    }

    /// <summary>Field number for the "PortWaitIn" field.</summary>
    public const int PortWaitInFieldNumber = 10;
    private bool portWaitIn_;
    /// <summary>
    /// D6401.8
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PortWaitIn {
      get { return portWaitIn_; }
      set {
        portWaitIn_ = value;
      }
    }

    /// <summary>Field number for the "PortWaitOut" field.</summary>
    public const int PortWaitOutFieldNumber = 11;
    private bool portWaitOut_;
    /// <summary>
    /// D6401.9
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PortWaitOut {
      get { return portWaitOut_; }
      set {
        portWaitOut_ = value;
      }
    }

    /// <summary>Field number for the "IsAutoMode" field.</summary>
    public const int IsAutoModeFieldNumber = 12;
    private bool isAutoMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoMode {
      get { return isAutoMode_; }
      set {
        isAutoMode_ = value;
      }
    }

    /// <summary>Field number for the "IsReadyToLoad" field.</summary>
    public const int IsReadyToLoadFieldNumber = 13;
    private bool isReadyToLoad_;
    /// <summary>
    /// D6401.12
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReadyToLoad {
      get { return isReadyToLoad_; }
      set {
        isReadyToLoad_ = value;
      }
    }

    /// <summary>Field number for the "IsReadyToUnload" field.</summary>
    public const int IsReadyToUnloadFieldNumber = 14;
    private bool isReadyToUnload_;
    /// <summary>
    /// D6401.13
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReadyToUnload {
      get { return isReadyToUnload_; }
      set {
        isReadyToUnload_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition1" field.</summary>
    public const int LoadPosition1FieldNumber = 15;
    private bool loadPosition1_;
    /// <summary>
    /// D6402.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition1 {
      get { return loadPosition1_; }
      set {
        loadPosition1_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition2" field.</summary>
    public const int LoadPosition2FieldNumber = 16;
    private bool loadPosition2_;
    /// <summary>
    /// D6402.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition2 {
      get { return loadPosition2_; }
      set {
        loadPosition2_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition3" field.</summary>
    public const int LoadPosition3FieldNumber = 17;
    private bool loadPosition3_;
    /// <summary>
    /// D6402.2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition3 {
      get { return loadPosition3_; }
      set {
        loadPosition3_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition4" field.</summary>
    public const int LoadPosition4FieldNumber = 18;
    private bool loadPosition4_;
    /// <summary>
    /// D6402.3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition4 {
      get { return loadPosition4_; }
      set {
        loadPosition4_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition5" field.</summary>
    public const int LoadPosition5FieldNumber = 19;
    private bool loadPosition5_;
    /// <summary>
    /// D6402.4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition5 {
      get { return loadPosition5_; }
      set {
        loadPosition5_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition7" field.</summary>
    public const int LoadPosition7FieldNumber = 20;
    private bool loadPosition7_;
    /// <summary>
    /// D6402.B
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition7 {
      get { return loadPosition7_; }
      set {
        loadPosition7_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition6" field.</summary>
    public const int LoadPosition6FieldNumber = 21;
    private bool loadPosition6_;
    /// <summary>
    /// D6402.C
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition6 {
      get { return loadPosition6_; }
      set {
        loadPosition6_ = value;
      }
    }

    /// <summary>Field number for the "IsCSTPresence" field.</summary>
    public const int IsCSTPresenceFieldNumber = 22;
    private bool isCSTPresence_;
    /// <summary>
    /// D6402.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCSTPresence {
      get { return isCSTPresence_; }
      set {
        isCSTPresence_ = value;
      }
    }

    /// <summary>Field number for the "AGVPortReady" field.</summary>
    public const int AGVPortReadyFieldNumber = 23;
    private bool aGVPortReady_;
    /// <summary>
    /// D6402.6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AGVPortReady {
      get { return aGVPortReady_; }
      set {
        aGVPortReady_ = value;
      }
    }

    /// <summary>Field number for the "CanOpenBox" field.</summary>
    public const int CanOpenBoxFieldNumber = 24;
    private bool canOpenBox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanOpenBox {
      get { return canOpenBox_; }
      set {
        canOpenBox_ = value;
      }
    }

    /// <summary>Field number for the "IsBoxOpen" field.</summary>
    public const int IsBoxOpenFieldNumber = 25;
    private bool isBoxOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoxOpen {
      get { return isBoxOpen_; }
      set {
        isBoxOpen_ = value;
      }
    }

    /// <summary>Field number for the "BCRReadDone" field.</summary>
    public const int BCRReadDoneFieldNumber = 26;
    private bool bCRReadDone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCRReadDone {
      get { return bCRReadDone_; }
      set {
        bCRReadDone_ = value;
      }
    }

    /// <summary>Field number for the "CSTPresenceMismatch" field.</summary>
    public const int CSTPresenceMismatchFieldNumber = 27;
    private bool cSTPresenceMismatch_;
    /// <summary>
    /// D6402.A
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CSTPresenceMismatch {
      get { return cSTPresenceMismatch_; }
      set {
        cSTPresenceMismatch_ = value;
      }
    }

    /// <summary>Field number for the "IsTransferComplete" field.</summary>
    public const int IsTransferCompleteFieldNumber = 28;
    private bool isTransferComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTransferComplete {
      get { return isTransferComplete_; }
      set {
        isTransferComplete_ = value;
      }
    }

    /// <summary>Field number for the "CstRemoveCheck" field.</summary>
    public const int CstRemoveCheckFieldNumber = 29;
    private bool cstRemoveCheck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CstRemoveCheck {
      get { return cstRemoveCheck_; }
      set {
        cstRemoveCheck_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 30;
    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "BoxID" field.</summary>
    public const int BoxIDFieldNumber = 31;
    private string boxID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxID {
      get { return boxID_; }
      set {
        boxID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CassetteID" field.</summary>
    public const int CassetteIDFieldNumber = 32;
    private string cassetteID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CassetteID {
      get { return cassetteID_; }
      set {
        cassetteID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PortID" field.</summary>
    public const int PortIDFieldNumber = 33;
    private string portID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PortID {
      get { return portID_; }
      set {
        portID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PORT_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PORT_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (OpAutoMode != other.OpAutoMode) return false;
      if (OpManualMode != other.OpManualMode) return false;
      if (OpError != other.OpError) return false;
      if (IsInputMode != other.IsInputMode) return false;
      if (IsOutputMode != other.IsOutputMode) return false;
      if (IsModeChangable != other.IsModeChangable) return false;
      if (IsAGVMode != other.IsAGVMode) return false;
      if (IsMGVMode != other.IsMGVMode) return false;
      if (PortWaitIn != other.PortWaitIn) return false;
      if (PortWaitOut != other.PortWaitOut) return false;
      if (IsAutoMode != other.IsAutoMode) return false;
      if (IsReadyToLoad != other.IsReadyToLoad) return false;
      if (IsReadyToUnload != other.IsReadyToUnload) return false;
      if (LoadPosition1 != other.LoadPosition1) return false;
      if (LoadPosition2 != other.LoadPosition2) return false;
      if (LoadPosition3 != other.LoadPosition3) return false;
      if (LoadPosition4 != other.LoadPosition4) return false;
      if (LoadPosition5 != other.LoadPosition5) return false;
      if (LoadPosition7 != other.LoadPosition7) return false;
      if (LoadPosition6 != other.LoadPosition6) return false;
      if (IsCSTPresence != other.IsCSTPresence) return false;
      if (AGVPortReady != other.AGVPortReady) return false;
      if (CanOpenBox != other.CanOpenBox) return false;
      if (IsBoxOpen != other.IsBoxOpen) return false;
      if (BCRReadDone != other.BCRReadDone) return false;
      if (CSTPresenceMismatch != other.CSTPresenceMismatch) return false;
      if (IsTransferComplete != other.IsTransferComplete) return false;
      if (CstRemoveCheck != other.CstRemoveCheck) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (BoxID != other.BoxID) return false;
      if (CassetteID != other.CassetteID) return false;
      if (PortID != other.PortID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (OpAutoMode != false) hash ^= OpAutoMode.GetHashCode();
      if (OpManualMode != false) hash ^= OpManualMode.GetHashCode();
      if (OpError != false) hash ^= OpError.GetHashCode();
      if (IsInputMode != false) hash ^= IsInputMode.GetHashCode();
      if (IsOutputMode != false) hash ^= IsOutputMode.GetHashCode();
      if (IsModeChangable != false) hash ^= IsModeChangable.GetHashCode();
      if (IsAGVMode != false) hash ^= IsAGVMode.GetHashCode();
      if (IsMGVMode != false) hash ^= IsMGVMode.GetHashCode();
      if (PortWaitIn != false) hash ^= PortWaitIn.GetHashCode();
      if (PortWaitOut != false) hash ^= PortWaitOut.GetHashCode();
      if (IsAutoMode != false) hash ^= IsAutoMode.GetHashCode();
      if (IsReadyToLoad != false) hash ^= IsReadyToLoad.GetHashCode();
      if (IsReadyToUnload != false) hash ^= IsReadyToUnload.GetHashCode();
      if (LoadPosition1 != false) hash ^= LoadPosition1.GetHashCode();
      if (LoadPosition2 != false) hash ^= LoadPosition2.GetHashCode();
      if (LoadPosition3 != false) hash ^= LoadPosition3.GetHashCode();
      if (LoadPosition4 != false) hash ^= LoadPosition4.GetHashCode();
      if (LoadPosition5 != false) hash ^= LoadPosition5.GetHashCode();
      if (LoadPosition7 != false) hash ^= LoadPosition7.GetHashCode();
      if (LoadPosition6 != false) hash ^= LoadPosition6.GetHashCode();
      if (IsCSTPresence != false) hash ^= IsCSTPresence.GetHashCode();
      if (AGVPortReady != false) hash ^= AGVPortReady.GetHashCode();
      if (CanOpenBox != false) hash ^= CanOpenBox.GetHashCode();
      if (IsBoxOpen != false) hash ^= IsBoxOpen.GetHashCode();
      if (BCRReadDone != false) hash ^= BCRReadDone.GetHashCode();
      if (CSTPresenceMismatch != false) hash ^= CSTPresenceMismatch.GetHashCode();
      if (IsTransferComplete != false) hash ^= IsTransferComplete.GetHashCode();
      if (CstRemoveCheck != false) hash ^= CstRemoveCheck.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (BoxID.Length != 0) hash ^= BoxID.GetHashCode();
      if (CassetteID.Length != 0) hash ^= CassetteID.GetHashCode();
      if (PortID.Length != 0) hash ^= PortID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Timestamp);
      }
      if (OpAutoMode != false) {
        output.WriteRawTag(16);
        output.WriteBool(OpAutoMode);
      }
      if (OpManualMode != false) {
        output.WriteRawTag(24);
        output.WriteBool(OpManualMode);
      }
      if (OpError != false) {
        output.WriteRawTag(32);
        output.WriteBool(OpError);
      }
      if (IsInputMode != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsInputMode);
      }
      if (IsOutputMode != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsOutputMode);
      }
      if (IsModeChangable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsModeChangable);
      }
      if (IsAGVMode != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsAGVMode);
      }
      if (IsMGVMode != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsMGVMode);
      }
      if (PortWaitIn != false) {
        output.WriteRawTag(80);
        output.WriteBool(PortWaitIn);
      }
      if (PortWaitOut != false) {
        output.WriteRawTag(88);
        output.WriteBool(PortWaitOut);
      }
      if (IsAutoMode != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsAutoMode);
      }
      if (IsReadyToLoad != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsReadyToLoad);
      }
      if (IsReadyToUnload != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsReadyToUnload);
      }
      if (LoadPosition1 != false) {
        output.WriteRawTag(120);
        output.WriteBool(LoadPosition1);
      }
      if (LoadPosition2 != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(LoadPosition2);
      }
      if (LoadPosition3 != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(LoadPosition3);
      }
      if (LoadPosition4 != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(LoadPosition4);
      }
      if (LoadPosition5 != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(LoadPosition5);
      }
      if (LoadPosition7 != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(LoadPosition7);
      }
      if (LoadPosition6 != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(LoadPosition6);
      }
      if (IsCSTPresence != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsCSTPresence);
      }
      if (AGVPortReady != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(AGVPortReady);
      }
      if (CanOpenBox != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(CanOpenBox);
      }
      if (IsBoxOpen != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsBoxOpen);
      }
      if (BCRReadDone != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(BCRReadDone);
      }
      if (CSTPresenceMismatch != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(CSTPresenceMismatch);
      }
      if (IsTransferComplete != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsTransferComplete);
      }
      if (CstRemoveCheck != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(CstRemoveCheck);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ErrorCode);
      }
      if (BoxID.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(BoxID);
      }
      if (CassetteID.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(CassetteID);
      }
      if (PortID.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PortID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (OpAutoMode != false) {
        size += 1 + 1;
      }
      if (OpManualMode != false) {
        size += 1 + 1;
      }
      if (OpError != false) {
        size += 1 + 1;
      }
      if (IsInputMode != false) {
        size += 1 + 1;
      }
      if (IsOutputMode != false) {
        size += 1 + 1;
      }
      if (IsModeChangable != false) {
        size += 1 + 1;
      }
      if (IsAGVMode != false) {
        size += 1 + 1;
      }
      if (IsMGVMode != false) {
        size += 1 + 1;
      }
      if (PortWaitIn != false) {
        size += 1 + 1;
      }
      if (PortWaitOut != false) {
        size += 1 + 1;
      }
      if (IsAutoMode != false) {
        size += 1 + 1;
      }
      if (IsReadyToLoad != false) {
        size += 1 + 1;
      }
      if (IsReadyToUnload != false) {
        size += 1 + 1;
      }
      if (LoadPosition1 != false) {
        size += 1 + 1;
      }
      if (LoadPosition2 != false) {
        size += 2 + 1;
      }
      if (LoadPosition3 != false) {
        size += 2 + 1;
      }
      if (LoadPosition4 != false) {
        size += 2 + 1;
      }
      if (LoadPosition5 != false) {
        size += 2 + 1;
      }
      if (LoadPosition7 != false) {
        size += 2 + 1;
      }
      if (LoadPosition6 != false) {
        size += 2 + 1;
      }
      if (IsCSTPresence != false) {
        size += 2 + 1;
      }
      if (AGVPortReady != false) {
        size += 2 + 1;
      }
      if (CanOpenBox != false) {
        size += 2 + 1;
      }
      if (IsBoxOpen != false) {
        size += 2 + 1;
      }
      if (BCRReadDone != false) {
        size += 2 + 1;
      }
      if (CSTPresenceMismatch != false) {
        size += 2 + 1;
      }
      if (IsTransferComplete != false) {
        size += 2 + 1;
      }
      if (CstRemoveCheck != false) {
        size += 2 + 1;
      }
      if (ErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (BoxID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BoxID);
      }
      if (CassetteID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CassetteID);
      }
      if (PortID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PortID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PORT_INFO other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.OpAutoMode != false) {
        OpAutoMode = other.OpAutoMode;
      }
      if (other.OpManualMode != false) {
        OpManualMode = other.OpManualMode;
      }
      if (other.OpError != false) {
        OpError = other.OpError;
      }
      if (other.IsInputMode != false) {
        IsInputMode = other.IsInputMode;
      }
      if (other.IsOutputMode != false) {
        IsOutputMode = other.IsOutputMode;
      }
      if (other.IsModeChangable != false) {
        IsModeChangable = other.IsModeChangable;
      }
      if (other.IsAGVMode != false) {
        IsAGVMode = other.IsAGVMode;
      }
      if (other.IsMGVMode != false) {
        IsMGVMode = other.IsMGVMode;
      }
      if (other.PortWaitIn != false) {
        PortWaitIn = other.PortWaitIn;
      }
      if (other.PortWaitOut != false) {
        PortWaitOut = other.PortWaitOut;
      }
      if (other.IsAutoMode != false) {
        IsAutoMode = other.IsAutoMode;
      }
      if (other.IsReadyToLoad != false) {
        IsReadyToLoad = other.IsReadyToLoad;
      }
      if (other.IsReadyToUnload != false) {
        IsReadyToUnload = other.IsReadyToUnload;
      }
      if (other.LoadPosition1 != false) {
        LoadPosition1 = other.LoadPosition1;
      }
      if (other.LoadPosition2 != false) {
        LoadPosition2 = other.LoadPosition2;
      }
      if (other.LoadPosition3 != false) {
        LoadPosition3 = other.LoadPosition3;
      }
      if (other.LoadPosition4 != false) {
        LoadPosition4 = other.LoadPosition4;
      }
      if (other.LoadPosition5 != false) {
        LoadPosition5 = other.LoadPosition5;
      }
      if (other.LoadPosition7 != false) {
        LoadPosition7 = other.LoadPosition7;
      }
      if (other.LoadPosition6 != false) {
        LoadPosition6 = other.LoadPosition6;
      }
      if (other.IsCSTPresence != false) {
        IsCSTPresence = other.IsCSTPresence;
      }
      if (other.AGVPortReady != false) {
        AGVPortReady = other.AGVPortReady;
      }
      if (other.CanOpenBox != false) {
        CanOpenBox = other.CanOpenBox;
      }
      if (other.IsBoxOpen != false) {
        IsBoxOpen = other.IsBoxOpen;
      }
      if (other.BCRReadDone != false) {
        BCRReadDone = other.BCRReadDone;
      }
      if (other.CSTPresenceMismatch != false) {
        CSTPresenceMismatch = other.CSTPresenceMismatch;
      }
      if (other.IsTransferComplete != false) {
        IsTransferComplete = other.IsTransferComplete;
      }
      if (other.CstRemoveCheck != false) {
        CstRemoveCheck = other.CstRemoveCheck;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.BoxID.Length != 0) {
        BoxID = other.BoxID;
      }
      if (other.CassetteID.Length != 0) {
        CassetteID = other.CassetteID;
      }
      if (other.PortID.Length != 0) {
        PortID = other.PortID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Timestamp = input.ReadString();
            break;
          }
          case 16: {
            OpAutoMode = input.ReadBool();
            break;
          }
          case 24: {
            OpManualMode = input.ReadBool();
            break;
          }
          case 32: {
            OpError = input.ReadBool();
            break;
          }
          case 40: {
            IsInputMode = input.ReadBool();
            break;
          }
          case 48: {
            IsOutputMode = input.ReadBool();
            break;
          }
          case 56: {
            IsModeChangable = input.ReadBool();
            break;
          }
          case 64: {
            IsAGVMode = input.ReadBool();
            break;
          }
          case 72: {
            IsMGVMode = input.ReadBool();
            break;
          }
          case 80: {
            PortWaitIn = input.ReadBool();
            break;
          }
          case 88: {
            PortWaitOut = input.ReadBool();
            break;
          }
          case 96: {
            IsAutoMode = input.ReadBool();
            break;
          }
          case 104: {
            IsReadyToLoad = input.ReadBool();
            break;
          }
          case 112: {
            IsReadyToUnload = input.ReadBool();
            break;
          }
          case 120: {
            LoadPosition1 = input.ReadBool();
            break;
          }
          case 128: {
            LoadPosition2 = input.ReadBool();
            break;
          }
          case 136: {
            LoadPosition3 = input.ReadBool();
            break;
          }
          case 144: {
            LoadPosition4 = input.ReadBool();
            break;
          }
          case 152: {
            LoadPosition5 = input.ReadBool();
            break;
          }
          case 160: {
            LoadPosition7 = input.ReadBool();
            break;
          }
          case 168: {
            LoadPosition6 = input.ReadBool();
            break;
          }
          case 176: {
            IsCSTPresence = input.ReadBool();
            break;
          }
          case 184: {
            AGVPortReady = input.ReadBool();
            break;
          }
          case 192: {
            CanOpenBox = input.ReadBool();
            break;
          }
          case 200: {
            IsBoxOpen = input.ReadBool();
            break;
          }
          case 208: {
            BCRReadDone = input.ReadBool();
            break;
          }
          case 216: {
            CSTPresenceMismatch = input.ReadBool();
            break;
          }
          case 224: {
            IsTransferComplete = input.ReadBool();
            break;
          }
          case 232: {
            CstRemoveCheck = input.ReadBool();
            break;
          }
          case 240: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 250: {
            BoxID = input.ReadString();
            break;
          }
          case 258: {
            CassetteID = input.ReadString();
            break;
          }
          case 266: {
            PortID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
